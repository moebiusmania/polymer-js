{"version":3,"sources":["webpack:///webpack/bootstrap e0a7062f6b9c5109044c","webpack:///./~/@polymer/polymer/lib/utils/boot.html","webpack:///./~/@polymer/polymer/lib/utils/mixin.html","webpack:///./~/@polymer/polymer/lib/utils/case-map.html","webpack:///./~/@polymer/polymer/lib/utils/resolve-url.html","webpack:///./~/@polymer/polymer/polymer-element.html","webpack:///./~/@polymer/polymer/lib/mixins/mutable-data.html","webpack:///./~/@polymer/polymer/lib/mixins/property-effects.html","webpack:///./~/@polymer/polymer/lib/utils/async.html","webpack:///./index.js","webpack:///./components/fake-app/index.js","webpack:///./components/list-data/index.js","webpack:///./components/fake-app/template.html","webpack:///./components/list-data/template.html","webpack:///./~/@polymer/polymer/lib/elements/dom-module.html","webpack:///./~/@polymer/polymer/lib/elements/dom-repeat.html","webpack:///./~/@polymer/polymer/lib/mixins/element-mixin.html","webpack:///./~/@polymer/polymer/lib/mixins/property-accessors.html","webpack:///./~/@polymer/polymer/lib/mixins/template-stamp.html","webpack:///./~/@polymer/polymer/lib/utils/debounce.html","webpack:///./~/@polymer/polymer/lib/utils/flush.html","webpack:///./~/@polymer/polymer/lib/utils/path.html","webpack:///./~/@polymer/polymer/lib/utils/style-gather.html","webpack:///./~/@polymer/polymer/lib/utils/templatize.html"],"names":["userPolymer","window","Polymer","info","_polymerFn","Object","assign","Error","version","JSCompiler_renameProperty","prop","obj","require","dedupeId","cachingMixin","mixin","base","__mixinApplications","WeakMap","map","application","get","set","dedupingMixin","__dedupeId","baseSet","__mixinSet","extended","create","caseMap","DASH_TO_CAMEL","CAMEL_TO_DASH","CaseMap","dashToCamelCase","dash","indexOf","replace","m","toUpperCase","camelToDashCase","camel","toLowerCase","CSS_URL_RX","ABS_URL","workingURL","resolveDoc","resolveUrl","url","baseURI","test","undefined","u","URL","pathname","href","e","document","location","implementation","createHTMLDocument","createElement","head","appendChild","anchor","body","resolveCss","cssText","pre","post","pathFromUrl","substring","lastIndexOf","ResolveUrl","Element","ElementMixin","HTMLElement","mutablePropertyChange","inst","property","value","old","mutableData","isObject","__dataTemp","shouldChange","MutableData","superClass","_shouldPropertyChange","OptionalMutableData","properties","Boolean","_mutablePropertyChange","TYPES","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","READ_ONLY","ensureOwnEffectMap","model","type","effects","hasOwnProperty","p","protoFx","instFx","Array","length","i","runEffects","props","oldProps","hasPaths","extraArgs","ran","id","runEffectsForProperty","rootProperty","Path","root","fxs","l","fx","lastRun","pathMatchesTrigger","trigger","fn","path","triggerPath","name","structured","isAncestor","wildcard","isDescendant","runObserverEffect","methodName","changedProp","call","__data","dynamicFn","console","warn","runNotifyEffects","notifyProps","__notifyEffects","notified","notifyPath","host","__dataHost","_invalidateProperties","eventName","dispatchNotifyEvent","detail","queueProperty","dispatchEvent","CustomEvent","runNotifyEffect","handleNotification","event","fromProp","toPath","negate","fromPath","translate","target","__readOnly","_setPendingPropertyOrPath","runReflectEffect","sanitizeDOMValue","attrName","_propertyToAttribute","runComputedEffects","changedProps","computeEffects","__computeEffects","inputProps","__dataOld","__dataPending","runComputedEffect","result","runMethodEffect","computedProp","methodInfo","__dataHasAccessor","_setPendingProperty","computeLinkedPaths","links","__dataLinkedPaths","link","a","b","addBinding","constructor","templateInfo","nodeInfo","kind","parts","literal","bindings","binding","isCompound","push","shouldAddListener","listenerEvent","listenerNegate","index","nodeInfoList","part","compoundIndex","addEffectForBindingPart","dependencies","evaluator","j","parseArg","_addTemplatePropertyEffect","runBindingEffect","nodeList","node","source","_enqueueClient","_evaluateBinding","applyBindingValue","computeBindingValue","_valueToNodeAttribute","_setUnmanagedPropertyToNode","storage","__dataCompoundStorage","join","localName","mode","setupBindings","setupCompoundStorage","addNotifyListener","literals","addEventListener","createMethodEffect","sig","effectFn","static","args","arg","_addPropertyEffect","context","_methodHost","marshalArgs","apply","emptyArray","IDENT","NUMBER","SQUOTE_STRING","DQUOTE_STRING","STRING","ARGUMENT","ARGUMENTS","ARGUMENT_LIST","BINDING","OPEN_BRACKET","CLOSE_BRACKET","NEGATE","EXPRESSION","bindingRegex","RegExp","literalFromParts","s","parseMethod","expression","match","trim","split","parseArgs","argList","rawArg","fc","slice","Number","isPath","data","values","v","baseChanged","matches","notifySplices","array","splices","splicesPath","indexSplices","notifySplice","addedCount","removed","object","upper","PropertyEffects","propertyEffectsBase","TemplateStamp","PropertyAccessors","PROPERTY_EFFECT_TYPES","_initializeProperties","hostStack","registerHost","__dataClientsInitialized","__dataPendingClients","__dataToNotify","__dataHasPaths","_initializeProtoProperties","_initializeInstanceProperties","readOnly","effect","_createPropertyAccessor","_removePropertyEffect","idx","splice","_hasPropertyEffect","_hasReadOnlyEffect","_hasNotifyEffect","_hasReflectEffect","_hasComputedEffect","shouldNotify","isPathNotification","isArray","prevProps","_setProperty","__dataInitialized","_flushProperties","client","_flushClients","_readyClients","clients","__dataEnabled","_enableProperties","setProperties","setReadOnly","ready","_propertiesChanged","currentProps","_propagatePropertyChanges","__reflectEffects","__observeEffects","__dataCounter","__propagateEffects","__templateInfo","propertyEffects","nextTemplateInfo","linkPaths","to","from","normalize","unlinkPaths","items","len","ret","pop","hadLength","start","deleteCount","Math","floor","shift","unshift","propPath","arguments","_createReadOnlyProperty","protectedSetter","_createPropertyObserver","_createMethodObserver","_createNotifyingProperty","_createReflectedProperty","attr","_createComputedProperty","addPropertyEffect","prototype","createPropertyObserver","createMethodObserver","createNotifyingProperty","createReadOnlyProperty","createReflectedProperty","createComputedProperty","bindTemplate","template","_bindTemplate","instanceBinding","_parseTemplate","wasPreBound","last","__templateInfoLast","previousTemplateInfo","hostProps","propEffects","_stampTemplate","beginHosting","dom","endHosting","nodes","childNodes","n","firstChild","nextSibling","_removeBoundDom","parentNode","removeChild","_parseTemplateNode","noted","nodeType","Node","TEXT_NODE","_parseBindings","textContent","_parseTemplateNodeAttribute","origName","setAttribute","removeAttribute","_parseTemplateNestedTemplate","text","lastIndex","exec","customEvent","notifyEvent","colon","signature","dynamicFns","stack","stackLen","AsyncInterface","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","createTextNode","MutationObserver","microtaskFlush","observe","characterData","cb","setTimeout","Async","timeOut","after","delay","run","cancel","clearTimeout","bind","animationFrame","requestAnimationFrame","cancelAnimationFrame","idlePeriod","requestIdleCallback","handle","cancelIdleCallback","microTask","callback","FakeApp","is","String","customElements","define","ListData","connectedCallback","fetch","then","resp","json","c","d","innerHTML","children","write","modules","lcModules","findModule","styleOutsideTemplateCheck","querySelector","DomModule","observedAttributes","import","selector","attributeChangedCallback","register","assetpath","__assetpath","owner","HTMLImports","importForElement","ownerDocument","getAttribute","domRepeatBase","DomRepeat","as","indexAs","itemsIndexAs","sort","Function","observer","filter","renderedItemCount","notify","initialCount","targetFramerate","_targetFrameTime","computed","observers","__instances","__limit","Infinity","__pool","__renderDebouncer","__itemsIdxToInstIdx","__chunkCount","__lastChunkTime","__needFullRefresh","__sortFn","__filterFn","__observePaths","__ctor","disconnectedCallback","__isDetached","__detachInstance","parent","__attachInstance","__ensureTemplatized","disconnect","__render","childList","instanceProps","Templatize","templatize","parentModel","forwardHostProp","i$","notifyInstanceProp","__getMethodHost","__sortChanged","methodHost","__debounceRender","__filterChanged","__computeFrameTime","rate","ceil","__initializeChunking","performance","now","__tryRenderChunk","__requestRenderChunk","__renderChunk","currChunkTime","ratio","round","__observeChanged","__itemsChanged","change","__handleItemPath","__handleObservedPaths","paths","Debouncer","debounce","enqueueDebouncer","render","flush","__applyFullRefresh","_setRenderedItemCount","bubbles","composed","isntIdxToItemsIdx","itemsIdxToInstIdx","instIdx","limit","min","itemIdx","item","__insertInstance","__detachAndRemoveInstance","el","insertBefore","__stampInstance","beforeRow","beforeNode","_showHideChildren","hidden","itemsPath","dot","itemsIdx","parseInt","itemSubPath","itemPath","itemForElement","instance","modelForElement","indexForElement","PolymerElementProperties","PolymerElementConstructor","extends","polymerElementBase","ownPropertiesForClass","klass","__ownProperties","ownObserversForClass","__ownObservers","flattenProperties","flattenedProps","o","propertiesForClass","__classProperties","superCtor","getPrototypeOf","PolymerElement","propertyDefaultsForClass","__classPropertyDefaults","hasClassFinalized","finalizeClassAndSuper","proto","finalize","finalizeClass","__finalized","telemetry","finalizeProperties","finalizeObservers","t","cloneNode","_template","createPropertyFromConfig","allProps","reflectToAttribute","finalizeTemplate","ext","StyleGather","cssFromTemplate","cssFromModuleImports","style","content","ShadyCSS","prepareTemplate","list","__observedAttributes","importPath","module","_importPath","instanceCount","__polymerFinalized","__proto__","rootPath","p$","_hasAccessor","styleElement","$","_attachDom","attachShadow","shadowRoot","_attributeToProperty","updateStyles","styleSubtree","_parseTemplateContent","registrations","_regLog","log","dumpRegistrations","forEach","styleDocument","microtask","nativeProperties","getOwnPropertyNames","saveAccessorValue","__dataProto","createPropertiesForAttributes","a$","__serializing","__dataInvalid","__dataInstanceProps","_ensureAttribute","attribute","hasAttribute","_deserializeValue","str","_serializeValue","Date","toString","JSON","stringify","x","outValue","parse","defineProperty","_isPropertyPending","templateExtensions","wrapTemplateExtension","replaceChild","attributes","findTemplateNode","parentInfo","parentIndex","applyIdToMap","applyEventListener","events","e$","_addMethodEventListenerToNode","applyTemplateContent","_templateInfo","createNodeEventHandler","handler","outerTemplateInfo","stripWhiteSpace","hasInsertionPoint","_parseTemplateChildNodes","hasAttributes","_parseTemplateNodeAttributes","next","childInfo","infoIndex","createDocumentFragment","attrs","_contentForTemplate","HTMLTemplateElement","decorate","importNode","__noInsertionPoint","_addEventListenerToNode","_removeEventListenerFromNode","removeEventListener","AsyncModule","_asyncModule","_callback","_timer","setConfig","asyncModule","isActive","debouncer","debouncerQueue","flushDebouncers","didFlush","shadyDOM","debouncers","ShadyDOM","ScopingShim","dotIndex","newBase","isDeep","MODULE_STYLE_LINK_SELECTOR","INCLUDE_ATTR","importModule","moduleId","cssFromModules","moduleIds","cssFromModule","_cssText","querySelectorAll","include","importDoc","container","newInstance","HTMLTemplateElementExtension","writable","DataTemplate","MutableDataTemplate","upgradeTemplate","setPrototypeOf","TemplateInstanceBase","_configureProperties","__templatizeInstance","__templatizeOwner","__hideTemplateChildren__","options","__templatizeOptions","iprop","hprop","__hostProps","templateHost","hide","__polymerTextContent__","__polymerDisplay__","display","__parentModel","MutableTemplateInstanceBase","findMethodHost","createTemplatizerClass","addNotifyEffects","addPropagateEffects","userForwardHostProp","templatizeTemplateClass","TemplatizedTemplate","createForwardHostPropEffect","hostProp","userNotifyInstanceProp","createNotifyInstancePropEffect","createNotifyHostPropEffect","instProp","notifyHostProp","baseClass","templatizeInstanceClass","TemplateInstance"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 23);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e0a7062f6b9c5109044c","/*__wc__loader*/\n\n(function() {\n  'use strict';\n\n  const userPolymer = window.Polymer;\n\n  /**\n   * @namespace Polymer\n   * @summary Polymer is a lightweight library built on top of the web\n   * standards-based Web Components API's, and makes it easy to build your\n   * own custom HTML elements.\n   * @param {Object} info Prototype for the custom element. It must contain\n   * an `is` property to specify the element name. Other properties populate\n   * the element prototype. The `properties`, `observers`, `hostAttributes`,\n   * and `listeners` properties are processed to create element features.\n   * @return {Object} Returns a custom element class for the given provided\n   * prototype `info` object. The name of the element if given by `info.is`.\n   */\n  window.Polymer = function(info) {\n    return window.Polymer._polymerFn(info);\n  }\n\n  // support user settings on the Polymer object\n  if (userPolymer) {\n    Object.assign(Polymer, userPolymer);\n  }\n\n  // To be plugged by legacy implementation if loaded\n  /**\n   * @param {Object} info Prototype for the custom element. It must contain\n   * an `is` property to specify the element name. Other properties populate\n   * the element prototype. The `properties`, `observers`, `hostAttributes`,\n   * and `listeners` properties are processed to create element features.\n   */\n  window.Polymer._polymerFn = function(info) { // eslint-disable-line no-unused-vars\n    throw new Error('Load polymer.html to use the Polymer() function.');\n  }\n  window.Polymer.version = '2.0.0';\n\n  /* eslint-disable no-unused-vars */\n  /*\n  When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]\n  We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.\n  */\n  window.JSCompiler_renameProperty = function(prop, obj) {\n    return prop;\n  }\n  /* eslint-enable */\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/boot.html","/*__wc__loader*/\nrequire('./boot.html');\n\n\n\n(function() {\n\n  'use strict';\n\n  // unique global id for deduping mixins.\n  let dedupeId = 0;\n\n  /**\n   * Given a mixin producing function, memoize applications of mixin to base\n   * @private\n   * @param {Function} mixin Mixin for which to create a caching mixin.\n   * @return {Function} Returns a mixin which when applied multiple times to the\n   * same base will always return the same extended class.\n   */\n  function cachingMixin(mixin) {\n    return function(base) {\n      if (!mixin.__mixinApplications) {\n        mixin.__mixinApplications = new WeakMap();\n      }\n      let map = mixin.__mixinApplications;\n      let application = map.get(base);\n      if (!application) {\n        application = mixin(base);\n        map.set(base, application);\n      }\n      return application;\n    };\n  }\n\n  /**\n   * Wraps an ES6 class expression mixin such that the mixin is only applied\n   * if it has not already been applied its base argument.  Also memoizes mixin\n   * applications.\n   *\n   * @memberof Polymer\n   * @param {Function} mixin ES6 class expression mixin to wrap\n   * @return {Function} Wrapped mixin that deduplicates and memoizes\n   *   mixin applications to base\n   */\n  Polymer.dedupingMixin = function(mixin) {\n    mixin = cachingMixin(mixin);\n    // maintain a unique id for each mixin\n    mixin.__dedupeId = ++dedupeId;\n    return function(base) {\n      let baseSet = base.__mixinSet;\n      if (baseSet && baseSet[mixin.__dedupeId]) {\n        return base;\n      }\n      let extended = mixin(base);\n      // copy inherited mixin set from the extended class, or the base class\n      // NOTE: we avoid use of Set here because some browser (IE11)\n      // cannot extend a base Set via the constructor.\n      extended.__mixinSet =\n        Object.create(extended.__mixinSet || baseSet || null);\n      extended.__mixinSet[mixin.__dedupeId] = true;\n      return extended;\n    }\n  };\n\n})();\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/mixin.html","/*__wc__loader*/\nrequire('./boot.html');\n\n\n(function() {\n  'use strict';\n\n  const caseMap = {};\n  const DASH_TO_CAMEL = /-[a-z]/g;\n  const CAMEL_TO_DASH = /([A-Z])/g;\n\n  /**\n   * Module with utilities for converting between \"dash-case\" and \"camelCase\"\n   * identifiers.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides utilities for converting between \"dash-case\"\n   *   and \"camelCase\".\n   */\n  const CaseMap = {\n\n    /**\n     * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n     * (e.g. `fooBarBaz`).\n     *\n     * @memberof Polymer.CaseMap\n     * @param {string} dash Dash-case identifier\n     * @return {string} Camel-case representation of the identifier\n     */\n    dashToCamelCase(dash) {\n      return caseMap[dash] || (\n        caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n          (m) => m[1].toUpperCase()\n        )\n      );\n    },\n\n    /**\n     * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n     * (e.g. `foo-bar-baz`).\n     *\n     * @memberof Polymer.CaseMap\n     * @param {string} camel Camel-case identifier\n     * @return {string} Dash-case representation of the identifier\n     */\n    camelToDashCase(camel) {\n      return caseMap[camel] || (\n        caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n      );\n    }\n\n  };\n\n  Polymer.CaseMap = CaseMap;\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/case-map.html","/*__wc__loader*/\nrequire('./boot.html');\n\n\n\n  (function() {\n    'use strict';\n\n    let CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\n    let ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\n    let workingURL;\n    let resolveDoc;\n    /**\n     * Resolves the given URL against the provided `baseUri'.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} url Input URL to resolve\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} resolved URL\n     */\n    function resolveUrl(url, baseURI) {\n      if (url && ABS_URL.test(url)) {\n        return url;\n      }\n      // Lazy feature detection.\n      if (workingURL === undefined) {\n        workingURL = false;\n        try {\n          const u = new URL('b', 'http://a');\n          u.pathname = 'c%20d';\n          workingURL = (u.href === 'http://a/c%20d');\n        } catch (e) {\n          // silently fail\n        }\n      }\n      if (!baseURI) {\n        baseURI = document.baseURI || window.location.href;\n      }\n      if (workingURL) {\n        return (new URL(url, baseURI)).href;\n      }\n      // Fallback to creating an anchor into a disconnected document.\n      if (!resolveDoc) {\n        resolveDoc = document.implementation.createHTMLDocument('temp');\n        resolveDoc.base = resolveDoc.createElement('base');\n        resolveDoc.head.appendChild(resolveDoc.base);\n        resolveDoc.anchor = resolveDoc.createElement('a');\n        resolveDoc.body.appendChild(resolveDoc.anchor);\n      }\n      resolveDoc.base.href = baseURI;\n      resolveDoc.anchor.href = url;\n      return resolveDoc.anchor.href || url;\n\n    }\n\n    /**\n     * Resolves any relative URL's in the given CSS text against the provided\n     * `ownerDocument`'s `baseURI`.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} cssText CSS text to process\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} Processed CSS text with resolved URL's\n     */\n    function resolveCss(cssText, baseURI) {\n      return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n        return pre + '\\'' +\n          resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n          '\\'' + post;\n      });\n    }\n\n    /**\n     * Returns a path from a given `url`. The path includes the trailing\n     * `/` from the url.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} url Input URL to transform\n     * @return {string} resolved path\n     */\n    function pathFromUrl(url) {\n      return url.substring(0, url.lastIndexOf('/') + 1);\n    }\n\n    /**\n     * Module with utilities for resolving relative URL's.\n     *\n     * @namespace\n     * @memberof Polymer\n     * @summary Module with utilities for resolving relative URL's.\n     */\n    Polymer.ResolveUrl = {\n      resolveCss: resolveCss,\n      resolveUrl: resolveUrl,\n      pathFromUrl: pathFromUrl\n    };\n\n  })();\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/resolve-url.html","/*__wc__loader*/\nrequire('./lib/mixins/element-mixin.html');\n\n\n(function() {\n  'use strict';\n\n  /**\n   * Base class that provides the core API for Polymer's meta-programming\n   * features including template stamping, data-binding, attribute deserialization,\n   * and property change observation.\n   *\n   * @polymerElement\n   * @memberof Polymer\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @extends HTMLElement\n   * @mixes Polymer.ElementMixin\n   * @summary Custom element base class that provides the core API for Polymer's\n   *   key meta-programming features including template stamping, data-binding,\n   *   attribute deserialization, and property change observation\n   */\n  const Element = Polymer.ElementMixin(HTMLElement);\n  Polymer.Element = Element;\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/polymer-element.html","/*__wc__loader*/\nrequire('../utils/mixin.html');\n\n\n(function() {\n  'use strict';\n\n  // Common implementation for mixin & behavior\n  function mutablePropertyChange(inst, property, value, old, mutableData) {\n    let isObject;\n    if (mutableData) {\n      isObject = (typeof value === 'object' && value !== null);\n      // Pull `old` for Objects from temp cache, but treat `null` as a primitive\n      if (isObject) {\n        old = inst.__dataTemp[property];\n      }\n    }\n    // Strict equality check, but return false for NaN===NaN\n    let shouldChange = (old !== value && (old === old || value === value));\n    // Objects are stored in temporary cache (cleared at end of\n    // turn), which is used for dirty-checking\n    if (isObject && shouldChange) {\n      inst.__dataTemp[property] = value;\n    }\n    return shouldChange;\n  }\n\n  /**\n   * Element class mixin to skip strict dirty-checking for objects and arrays\n   * (always consider them to be \"dirty\"), for use on elements utilizing\n   * `Polymer.PropertyEffects`\n   *\n   * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n   * objects, which means that any deep modifications to an object or array will\n   * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n   * references from the root to the mutation were changed).\n   *\n   * Polymer also provides a proprietary data mutation and path notification API\n   * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n   * mutation and notification of deep changes in an object graph to all elements\n   * bound to the same object graph.\n   *\n   * In cases where neither immutable patterns nor the data mutation API can be\n   * used, applying this mixin will cause Polymer to skip dirty checking for\n   * objects and arrays (always consider them to be \"dirty\").  This allows a\n   * user to make a deep modification to a bound object graph, and then either\n   * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n   * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n   * elements that wish to be updated based on deep mutations must apply this\n   * mixin or otherwise skip strict dirty checking for objects/arrays.\n   *\n   * In order to make the dirty check strategy configurable, see\n   * `Polymer.OptionalMutableData`.\n   *\n   * Note, the performance characteristics of propagating large object graphs\n   * will be worse as opposed to using strict dirty checking with immutable\n   * patterns or Polymer's path notification API.\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin to skip strict dirty-checking for objects\n   *   and arrays\n   */\n  Polymer.MutableData = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymerMixinClass\n     * @implements {Polymer_MutableData}\n     */\n    class MutableData extends superClass {\n      /**\n       * Overrides `Polymer.PropertyEffects` to provide option for skipping\n       * strict equality checking for Objects and Arrays.\n       *\n       * This method pulls the value to dirty check against from the `__dataTemp`\n       * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n       * cache is cleared at the end of a turn, this implementation allows\n       * side-effects of deep object changes to be processed by re-setting the\n       * same object (using the temp cache as an in-turn backstop to prevent\n       * cycles due to 2-way notification).\n       *\n       * @param {string} property Property name\n       * @param {*} value New property value\n       * @param {*} old Previous property value\n       * @return {boolean} Whether the property should be considered a change\n       * @protected\n       */\n      _shouldPropertyChange(property, value, old) {\n        return mutablePropertyChange(this, property, value, old, true);\n      }\n\n    }\n\n    return MutableData;\n\n  });\n\n  /**\n   * Element class mixin to add the optional ability to skip strict\n   * dirty-checking for objects and arrays (always consider them to be\n   * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n   *\n   * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n   * objects, which means that any deep modifications to an object or array will\n   * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n   * references from the root to the mutation were changed).\n   *\n   * Polymer also provides a proprietary data mutation and path notification API\n   * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n   * mutation and notification of deep changes in an object graph to all elements\n   * bound to the same object graph.\n   *\n   * In cases where neither immutable patterns nor the data mutation API can be\n   * used, applying this mixin will allow Polymer to skip dirty checking for\n   * objects and arrays (always consider them to be \"dirty\").  This allows a\n   * user to make a deep modification to a bound object graph, and then either\n   * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n   * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n   * elements that wish to be updated based on deep mutations must apply this\n   * mixin or otherwise skip strict dirty checking for objects/arrays.\n   *\n   * While this mixin adds the ability to forgo Object/Array dirty checking,\n   * the `mutableData` flag defaults to false and must be set on the instance.\n   *\n   * Note, the performance characteristics of propagating large object graphs\n   * will be worse by relying on `mutableData: true` as opposed to using\n   * strict dirty checking with immutable patterns or Polymer's path notification\n   * API.\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin to optionally skip strict dirty-checking\n   *   for objects and arrays\n   */\n  Polymer.OptionalMutableData = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymerMixinClass\n     * @implements {Polymer_OptionalMutableData}\n     */\n    class OptionalMutableData extends superClass {\n\n      static get properties() {\n        return {\n          /**\n           * Instance-level flag for configuring the dirty-checking strategy\n           * for this element.  When true, Objects and Arrays will skip dirty\n           * checking, otherwise strict equality checking will be used.\n           */\n          mutableData: Boolean\n        };\n      }\n\n      /**\n       * Overrides `Polymer.PropertyEffects` to provide option for skipping\n       * strict equality checking for Objects and Arrays.\n       *\n       * When `this.mutableData` is true on this instance, this method\n       * pulls the value to dirty check against from the `__dataTemp` cache\n       * (rather than the normal `__data` cache) for Objects.  Since the temp\n       * cache is cleared at the end of a turn, this implementation allows\n       * side-effects of deep object changes to be processed by re-setting the\n       * same object (using the temp cache as an in-turn backstop to prevent\n       * cycles due to 2-way notification).\n       *\n       * @param {string} property Property name\n       * @param {*} value New property value\n       * @param {*} old Previous property value\n       * @return {boolean} Whether the property should be considered a change\n       * @protected\n       */\n      _shouldPropertyChange(property, value, old) {\n        return mutablePropertyChange(this, property, value, old, this.mutableData);\n      }\n    }\n\n    return OptionalMutableData;\n\n  });\n\n  // Export for use by legacy behavior\n  Polymer.MutableData._mutablePropertyChange = mutablePropertyChange;\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/mixins/mutable-data.html","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\nrequire('../utils/path.html');\n\nrequire('../utils/case-map.html');\n\nrequire('./property-accessors.html');\n\nrequire('./template-stamp.html');\n\n\n(function() {\n\n  'use strict';\n\n  /** @const {Object} */\n  const CaseMap = Polymer.CaseMap;\n\n  // Monotonically increasing unique ID used for de-duping effects triggered\n  // from multiple properties in the same turn\n  let dedupeId = 0;\n\n  // Property effect types; effects are stored on the prototype using these keys\n  const TYPES = {\n    COMPUTE: '__computeEffects',\n    REFLECT: '__reflectEffects',\n    NOTIFY: '__notifyEffects',\n    PROPAGATE: '__propagateEffects',\n    OBSERVE: '__observeEffects',\n    READ_ONLY: '__readOnly'\n  }\n\n  /**\n   * Ensures that the model has an own-property map of effects for the given type.\n   * The model may be a prototype or an instance.\n   *\n   * Property effects are stored as arrays of effects by property in a map,\n   * by named type on the model. e.g.\n   *\n   *   __computeEffects: {\n   *     foo: [ ... ],\n   *     bar: [ ... ]\n   *   }\n   *\n   * If the model does not yet have an effect map for the type, one is created\n   * and returned.  If it does, but it is not an own property (i.e. the\n   * prototype had effects), the the map is deeply cloned and the copy is\n   * set on the model and returned, ready for new effects to be added.\n   *\n   * @param {Object} model Prototype or instance\n   * @param {string} type Property effect type\n   * @return {Object} The own-property map of effects for the given type\n   * @private\n   */\n  function ensureOwnEffectMap(model, type) {\n    let effects = model[type];\n    if (!effects) {\n      effects = model[type] = {};\n    } else if (!model.hasOwnProperty(type)) {\n      effects = model[type] = Object.create(model[type]);\n      for (let p in effects) {\n        let protoFx = effects[p];\n        let instFx = effects[p] = Array(protoFx.length);\n        for (let i=0; i<protoFx.length; i++) {\n          instFx[i] = protoFx[i];\n        }\n      }\n    }\n    return effects;\n  }\n\n  // -- effects ----------------------------------------------\n\n  /**\n   * Runs all effects of a given type for the given set of property changes\n   * on an instance.\n   *\n   * @param {Object} inst The instance with effects to run\n   * @param {Object} effects Object map of property-to-Array of effects\n   * @param {Object} props Bag of current property changes\n   * @param {Object=} oldProps Bag of previous values for changed properties\n   * @param {boolean=} hasPaths True with `props` contains one or more paths\n   * @param {*=} extraArgs Additional metadata to pass to effect function\n   * @return {boolean} True if an effect ran for this property\n   * @private\n   */\n  function runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n    if (effects) {\n      let ran = false;\n      let id = dedupeId++;\n      for (let prop in props) {\n        if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n          ran = true;\n        }\n      }\n      return ran;\n    }\n    return false;\n  }\n\n  /**\n   * Runs a list of effects for a given property.\n   *\n   * @param {Object} inst The instance with effects to run\n   * @param {Object} effects Object map of property-to-Array of effects\n   * @param {number} dedupeId Counter used for de-duping effects\n   * @param {string} prop Name of changed property\n   * @param {*} props Changed properties\n   * @param {*} oldProps Old properties\n   * @param {boolean=} hasPaths True with `props` contains one or more paths\n   * @param {*=} extraArgs Additional metadata to pass to effect function\n   * @return {boolean} True if an effect ran for this property\n   * @private\n   */\n  function runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n    let ran = false;\n    let rootProperty = hasPaths ? Polymer.Path.root(prop) : prop;\n    let fxs = effects[rootProperty];\n    if (fxs) {\n      for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n        if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n            (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n          if (fx.info) {\n            fx.info.lastRun = dedupeId;\n          }\n          fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n          ran = true;\n        }\n      }\n    }\n    return ran;\n  }\n\n  /**\n   * Determines whether a property/path that has changed matches the trigger\n   * criteria for an effect.  A trigger is a descriptor with the following\n   * structure, which matches the descriptors returned from `parseArg`.\n   * e.g. for `foo.bar.*`:\n   * ```\n   * trigger: {\n   *   name: 'a.b',\n   *   structured: true,\n   *   wildcard: true\n   * }\n   * ```\n   * If no trigger is given, the path is deemed to match.\n   *\n   * @param {string} path Path or property that changed\n   * @param {Object} trigger Descriptor\n   * @return {boolean} Whether the path matched the trigger\n   */\n  function pathMatchesTrigger(path, trigger) {\n    if (trigger) {\n      let triggerPath = trigger.name;\n      return (triggerPath == path) ||\n        (trigger.structured && Polymer.Path.isAncestor(triggerPath, path)) ||\n        (trigger.wildcard && Polymer.Path.isDescendant(triggerPath, path));\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Implements the \"observer\" effect.\n   *\n   * Calls the method with `info.methodName` on the instance, passing the\n   * new and old values.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runObserverEffect(inst, property, props, oldProps, info) {\n    let fn = inst[info.methodName];\n    let changedProp = info.property;\n    if (fn) {\n      fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n    } else if (!info.dynamicFn) {\n      console.warn('observer method `' + info.methodName + '` not defined');\n    }\n  }\n\n  /**\n   * Runs \"notify\" effects for a set of changed properties.\n   *\n   * This method differs from the generic `runEffects` method in that it\n   * will dispatch path notification events in the case that the property\n   * changed was a path and the root property for that path didn't have a\n   * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n   * `notify: true` to ensure object sub-property notifications were\n   * sent.\n   *\n   * @param {Element} inst The instance with effects to run\n   * @param {Object} notifyProps Bag of properties to notify\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n    // Notify\n    let fxs = inst.__notifyEffects;\n    let notified;\n    let id = dedupeId++;\n    // Try normal notify effects; if none, fall back to try path notification\n    for (let prop in notifyProps) {\n      if (notifyProps[prop]) {\n        if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n          notified = true;\n        } else if (hasPaths && notifyPath(inst, prop, props)) {\n          notified = true;\n        }\n      }\n    }\n    // Flush host if we actually notified and host was batching\n    // And the host has already initialized clients; this prevents\n    // an issue with a host observing data changes before clients are ready.\n    let host;\n    if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n      host._invalidateProperties();\n    }\n  }\n\n  /**\n   * Dispatches {property}-changed events with path information in the detail\n   * object to indicate a sub-path of the property was changed.\n   *\n   * @param {Element} inst The element from which to fire the event\n   * @param {string} path The path that was changed\n   * @param {Object} props Bag of current property changes\n   * @return {boolean} Returns true if the path was notified\n   * @private\n   */\n  function notifyPath(inst, path, props) {\n    let rootProperty = Polymer.Path.root(path);\n    if (rootProperty !== path) {\n      let eventName = Polymer.CaseMap.camelToDashCase(rootProperty) + '-changed';\n      dispatchNotifyEvent(inst, eventName, props[path], path);\n      return true;\n    }\n  }\n\n  /**\n   * Dispatches {property}-changed events to indicate a property (or path)\n   * changed.\n   *\n   * @param {Element} inst The element from which to fire the event\n   * @param {string} eventName The name of the event to send ('{property}-changed')\n   * @param {*} value The value of the changed property\n   * @param {string | null | undefined} path If a sub-path of this property changed, the path\n   *   that changed (optional).\n   * @private\n   */\n  function dispatchNotifyEvent(inst, eventName, value, path) {\n    let detail = {\n      value: value,\n      queueProperty: true\n    };\n    if (path) {\n      detail.path = path;\n    }\n    inst.dispatchEvent(new CustomEvent(eventName, { detail }));\n  }\n\n  /**\n   * Implements the \"notify\" effect.\n   *\n   * Dispatches a non-bubbling event named `info.eventName` on the instance\n   * with a detail object containing the new `value`.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n    let rootProperty = hasPaths ? Polymer.Path.root(property) : property;\n    let path = rootProperty != property ? property : null;\n    let value = path ? Polymer.Path.get(inst, path) : inst.__data[property];\n    if (path && value === undefined) {\n      value = props[property];  // specifically for .splices\n    }\n    dispatchNotifyEvent(inst, info.eventName, value, path);\n  }\n\n  /**\n   * Handler function for 2-way notification events. Receives context\n   * information captured in the `addNotifyListener` closure from the\n   * `__notifyListeners` metadata.\n   *\n   * Sets the value of the notified property to the host property or path.  If\n   * the event contained path information, translate that path to the host\n   * scope's name for that path first.\n   *\n   * @param {Event} event Notification event (e.g. '<property>-changed')\n   * @param {Object} inst Host element instance handling the notification event\n   * @param {string} fromProp Child element property that was bound\n   * @param {string} toPath Host property/path that was bound\n   * @param {boolean} negate Whether the binding was negated\n   * @private\n   */\n  function handleNotification(event, inst, fromProp, toPath, negate) {\n    let value;\n    let detail = event.detail;\n    let fromPath = detail && detail.path;\n    if (fromPath) {\n      toPath = Polymer.Path.translate(fromProp, toPath, fromPath);\n      value = detail && detail.value;\n    } else {\n      value = event.target[fromProp];\n    }\n    value = negate ? !value : value;\n    if (!inst.__readOnly || !inst.__readOnly[toPath]) {\n      if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n        && (!detail || !detail.queueProperty)) {\n        inst._invalidateProperties();\n      }\n    }\n  }\n\n  /**\n   * Implements the \"reflect\" effect.\n   *\n   * Sets the attribute named `info.attrName` to the given property value.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runReflectEffect(inst, property, props, oldProps, info) {\n    let value = inst.__data[property];\n    if (Polymer.sanitizeDOMValue) {\n      value = Polymer.sanitizeDOMValue(value, info.attrName, 'attribute', inst);\n    }\n    inst._propertyToAttribute(property, info.attrName, value);\n  }\n\n  /**\n   * Runs \"computed\" effects for a set of changed properties.\n   *\n   * This method differs from the generic `runEffects` method in that it\n   * continues to run computed effects based on the output of each pass until\n   * there are no more newly computed properties.  This ensures that all\n   * properties that will be computed by the initial set of changes are\n   * computed before other effects (binding propagation, observers, and notify)\n   * run.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {Object} changedProps Bag of changed properties\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n    let computeEffects = inst.__computeEffects;\n    if (computeEffects) {\n      let inputProps = changedProps;\n      while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n        Object.assign(oldProps, inst.__dataOld);\n        Object.assign(changedProps, inst.__dataPending);\n        inputProps = inst.__dataPending;\n        inst.__dataPending = null;\n      }\n    }\n  }\n\n  /**\n   * Implements the \"computed property\" effect by running the method with the\n   * values of the arguments specified in the `info` object and setting the\n   * return value to the computed property specified.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runComputedEffect(inst, property, props, oldProps, info) {\n    let result = runMethodEffect(inst, property, props, oldProps, info);\n    let computedProp = info.methodInfo;\n    if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n      inst._setPendingProperty(computedProp, result, true);\n    } else {\n      inst[computedProp] = result;\n    }\n  }\n\n  /**\n   * Computes path changes based on path links set up using the `linkPaths`\n   * API.\n   *\n   * @param {Element} inst The instance whose props are changing\n   * @param {string} path Path that has changed\n   * @param {*} value Value of changed path\n   * @private\n   */\n  function computeLinkedPaths(inst, path, value) {\n    let links = inst.__dataLinkedPaths;\n    if (links) {\n      let link;\n      for (let a in links) {\n        let b = links[a];\n        if (Polymer.Path.isDescendant(a, path)) {\n          link = Polymer.Path.translate(a, b, path);\n          inst._setPendingPropertyOrPath(link, value, true, true);\n        } else if (Polymer.Path.isDescendant(b, path)) {\n          link = Polymer.Path.translate(b, a, path);\n          inst._setPendingPropertyOrPath(link, value, true, true);\n        }\n      }\n    }\n  }\n\n  // -- bindings ----------------------------------------------\n\n  /**\n   * Adds binding metadata to the current `nodeInfo`, and binding effects\n   * for all part dependencies to `templateInfo`.\n   *\n   * @param {Function} constructor Class that `_parseTemplate` is currently\n   *   running on\n   * @param {Object} templateInfo Template metadata for current template\n   * @param {Object} nodeInfo Node metadata for current template node\n   * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n   * @param {string} target Target property name\n   * @param {Array<Object>} parts Array of binding part metadata\n   * @param {string} literal Literal text surrounding binding parts (specified\n   *   only for 'property' bindings, since these must be initialized as part\n   *   of boot-up)\n   * @private\n   */\n  function addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n    // Create binding metadata and add to nodeInfo\n    nodeInfo.bindings = nodeInfo.bindings || [];\n    let binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n    nodeInfo.bindings.push(binding);\n    // Add listener info to binding metadata\n    if (shouldAddListener(binding)) {\n      let {event, negate} = binding.parts[0];\n      binding.listenerEvent = event || (CaseMap.camelToDashCase(target) + '-changed');\n      binding.listenerNegate = negate;\n    }\n    // Add \"propagate\" property effects to templateInfo\n    let index = templateInfo.nodeInfoList.length;\n    for (let i=0; i<binding.parts.length; i++) {\n      let part = binding.parts[i];\n      part.compoundIndex = i;\n      addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n    }\n  }\n\n  /**\n   * Adds property effects to the given `templateInfo` for the given binding\n   * part.\n   *\n   * @param {Function} constructor Class that `_parseTemplate` is currently\n   *   running on\n   * @param {Object} templateInfo Template metadata for current template\n   * @param {Object} binding Binding metadata\n   * @param {Object} part Binding part metadata\n   * @param {number} index Index into `nodeInfoList` for this node\n   */\n  function addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n    if (!part.literal) {\n      if (binding.kind === 'attribute' && binding.target[0] === '-') {\n        console.warn('Cannot set attribute ' + binding.target +\n          ' because \"-\" is not a valid attribute starting character');\n      } else {\n        let dependencies = part.dependencies;\n        let info = { index, binding, part, evaluator: constructor };\n        for (let j=0; j<dependencies.length; j++) {\n          let trigger = dependencies[j];\n          if (typeof trigger == 'string') {\n            trigger = parseArg(trigger);\n            trigger.wildcard = true;\n          }\n          constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n            fn: runBindingEffect,\n            info, trigger\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Implements the \"binding\" (property/path binding) effect.\n   *\n   * Note that binding syntax is overridable via `_parseBindings` and\n   * `_evaluateBindings`.  This method will call `_evaluateBinding` for any\n   * non-literal parts returned from `_parseBindings`.  However,\n   * there is no support for _path_ bindings via custom binding parts,\n   * as this is specific to Polymer's path binding syntax.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {string} path Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n   *   metadata\n   * @private\n   */\n  function runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n    let node = nodeList[info.index];\n    let binding = info.binding;\n    let part = info.part;\n    // Subpath notification: transform path and set to client\n    // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n    if (hasPaths && part.source && (path.length > part.source.length) &&\n        (binding.kind == 'property') && !binding.isCompound &&\n        node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n      let value = props[path];\n      path = Polymer.Path.translate(part.source, binding.target, path);\n      if (node._setPendingPropertyOrPath(path, value, false, true)) {\n        inst._enqueueClient(node);\n      }\n    } else {\n      let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n      // Propagate value to child\n      applyBindingValue(inst, node, binding, part, value);\n    }\n  }\n\n  /**\n   * Sets the value for an \"binding\" (binding) effect to a node,\n   * either as a property or attribute.\n   *\n   * @param {Object} inst The instance owning the binding effect\n   * @param {Node} node Target node for binding\n   * @param {Object} binding Binding metadata\n   * @param {Object} part Binding part metadata\n   * @param {*} value Value to set\n   * @private\n   */\n  function applyBindingValue(inst, node, binding, part, value) {\n    value = computeBindingValue(node, value, binding, part);\n    if (Polymer.sanitizeDOMValue) {\n      value = Polymer.sanitizeDOMValue(value, binding.target, binding.kind, node);\n    }\n    if (binding.kind == 'attribute') {\n      // Attribute binding\n      inst._valueToNodeAttribute(node, value, binding.target);\n    } else {\n      // Property binding\n      let prop = binding.target;\n      if (node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n        if (!node.__readOnly || !node.__readOnly[prop]) {\n          if (node._setPendingProperty(prop, value)) {\n            inst._enqueueClient(node);\n          }\n        }\n      } else  {\n        inst._setUnmanagedPropertyToNode(node, prop, value);\n      }\n    }\n  }\n\n  /**\n   * Transforms an \"binding\" effect value based on compound & negation\n   * effect metadata, as well as handling for special-case properties\n   *\n   * @param {Node} node Node the value will be set to\n   * @param {*} value Value to set\n   * @param {Object} binding Binding metadata\n   * @param {Object} part Binding part metadata\n   * @return {*} Transformed value to set\n   * @private\n   */\n  function computeBindingValue(node, value, binding, part) {\n    if (binding.isCompound) {\n      let storage = node.__dataCompoundStorage[binding.target];\n      storage[part.compoundIndex] = value;\n      value = storage.join('');\n    }\n    if (binding.kind !== 'attribute') {\n      // Some browsers serialize `undefined` to `\"undefined\"`\n      if (binding.target === 'textContent' ||\n          (node.localName == 'input' && binding.target == 'value')) {\n        value = value == undefined ? '' : value;\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Returns true if a binding's metadata meets all the requirements to allow\n   * 2-way binding, and therefore a `<property>-changed` event listener should be\n   * added:\n   * - used curly braces\n   * - is a property (not attribute) binding\n   * - is not a textContent binding\n   * - is not compound\n   *\n   * @param {Object} binding Binding metadata\n   * @return {boolean} True if 2-way listener should be added\n   * @private\n   */\n  function shouldAddListener(binding) {\n    return binding.target &&\n           binding.kind != 'attribute' &&\n           binding.kind != 'text' &&\n           !binding.isCompound &&\n           binding.parts[0].mode === '{';\n  }\n\n  /**\n   * Setup compound binding storage structures, notify listeners, and dataHost\n   * references onto the bound nodeList.\n   *\n   * @param {Object} inst Instance that bas been previously bound\n   * @param {Object} templateInfo Template metadata\n   * @private\n   */\n  function setupBindings(inst, templateInfo) {\n    // Setup compound storage, dataHost, and notify listeners\n    let {nodeList, nodeInfoList} = templateInfo;\n    if (nodeInfoList.length) {\n      for (let i=0; i < nodeInfoList.length; i++) {\n        let info = nodeInfoList[i];\n        let node = nodeList[i];\n        let bindings = info.bindings;\n        if (bindings) {\n          for (let i=0; i<bindings.length; i++) {\n            let binding = bindings[i];\n            setupCompoundStorage(node, binding);\n            addNotifyListener(node, inst, binding);\n          }\n        }\n        node.__dataHost = inst;\n      }\n    }\n  }\n\n  /**\n   * Initializes `__dataCompoundStorage` local storage on a bound node with\n   * initial literal data for compound bindings, and sets the joined\n   * literal parts to the bound property.\n   *\n   * When changes to compound parts occur, they are first set into the compound\n   * storage array for that property, and then the array is joined to result in\n   * the final value set to the property/attribute.\n   *\n   * @param {Node} node Bound node to initialize\n   * @param {Object} binding Binding metadata\n   * @private\n   */\n  function setupCompoundStorage(node, binding) {\n    if (binding.isCompound) {\n      // Create compound storage map\n      let storage = node.__dataCompoundStorage ||\n        (node.__dataCompoundStorage = {});\n      let parts = binding.parts;\n      // Copy literals from parts into storage for this binding\n      let literals = new Array(parts.length);\n      for (let j=0; j<parts.length; j++) {\n        literals[j] = parts[j].literal;\n      }\n      let target = binding.target;\n      storage[target] = literals;\n      // Configure properties with their literal parts\n      if (binding.literal && binding.kind == 'property') {\n        node[target] = binding.literal;\n      }\n    }\n  }\n\n  /**\n   * Adds a 2-way binding notification event listener to the node specified\n   *\n   * @param {Object} node Child element to add listener to\n   * @param {Object} inst Host element instance to handle notification event\n   * @param {Object} binding Binding metadata\n   * @private\n   */\n  function addNotifyListener(node, inst, binding) {\n    if (binding.listenerEvent) {\n      let part = binding.parts[0];\n      node.addEventListener(binding.listenerEvent, function(e) {\n        handleNotification(e, inst, binding.target, part.source, part.negate);\n      });\n    }\n  }\n\n  // -- for method-based effects (complexObserver & computed) --------------\n\n  /**\n   * Adds property effects for each argument in the method signature (and\n   * optionally, for the method name if `dynamic` is true) that calls the\n   * provided effect function.\n   *\n   * @param {Element | Object} model Prototype or instance\n   * @param {Object} sig Method signature metadata\n   * @param {string} type Type of property effect to add\n   * @param {Function} effectFn Function to run when arguments change\n   * @param {*=} methodInfo Effect-specific information to be included in\n   *   method effect metadata\n   * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n   *   method names should be included as a dependency to the effect. Note,\n   *   defaults to true if the signature is static (sig.static is true).\n   * @private\n   */\n  function createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n    dynamicFn = sig.static || (dynamicFn &&\n      (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n    let info = {\n      methodName: sig.methodName,\n      args: sig.args,\n      methodInfo,\n      dynamicFn\n    };\n    for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n      if (!arg.literal) {\n        model._addPropertyEffect(arg.rootProperty, type, {\n          fn: effectFn, info: info, trigger: arg\n        });\n      }\n    }\n    if (dynamicFn) {\n      model._addPropertyEffect(sig.methodName, type, {\n        fn: effectFn, info: info\n      });\n    }\n  }\n\n  /**\n   * Calls a method with arguments marshaled from properties on the instance\n   * based on the method signature contained in the effect metadata.\n   *\n   * Multi-property observers, computed properties, and inline computing\n   * functions call this function to invoke the method, then use the return\n   * value accordingly.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @return {*} Returns the return value from the method invocation\n   * @private\n   */\n  function runMethodEffect(inst, property, props, oldProps, info) {\n    // Instances can optionally have a _methodHost which allows redirecting where\n    // to find methods. Currently used by `templatize`.\n    let context = inst._methodHost || inst;\n    let fn = context[info.methodName];\n    if (fn) {\n      let args = marshalArgs(inst.__data, info.args, property, props);\n      return fn.apply(context, args);\n    } else if (!info.dynamicFn) {\n      console.warn('method `' + info.methodName + '` not defined');\n    }\n  }\n\n  const emptyArray = [];\n\n  // Regular expressions used for binding\n  const IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\n  const NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\n  const SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\n  const DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\n  const STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\n  const ARGUMENT = '(?:' + IDENT + '|' + NUMBER + '|' +  STRING + '\\\\s*' + ')';\n  const ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\n  const ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                                '(?:' + ARGUMENTS + '?' + ')' +\n                              '\\\\)\\\\s*' + ')';\n  const BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\n  const OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\n  const CLOSE_BRACKET = '(?:]]|}})';\n  const NEGATE = '(?:(!)\\\\s*)?'; // Group 2\n  const EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\n  const bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n  function literalFromParts(parts) {\n    let s = '';\n    for (let i=0; i<parts.length; i++) {\n      let literal = parts[i].literal;\n      s += literal || '';\n    }\n    return s;\n  }\n\n  /**\n   * Parses an expression string for a method signature, and returns a metadata\n   * describing the method in terms of `methodName`, `static` (whether all the\n   * arguments are literals), and an array of `args`\n   *\n   * @param {string} expression The expression to parse\n   * @return {?Object} The method metadata object if a method expression was\n   *   found, otherwise `undefined`\n   * @private\n   */\n  function parseMethod(expression) {\n    // tries to match valid javascript property names\n    let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n    if (m) {\n      let methodName = m[1];\n      let sig = { methodName, static: true };\n      if (m[2].trim()) {\n        // replace escaped commas with comma entity, split on un-escaped commas\n        let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n        return parseArgs(args, sig);\n      } else {\n        sig.args = emptyArray;\n        return sig;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Parses an array of arguments and sets the `args` property of the supplied\n   * signature metadata object. Sets the `static` property to false if any\n   * argument is a non-literal.\n   *\n   * @param {Array<string>} argList Array of argument names\n   * @param {Object} sig Method signature metadata object\n   * @return {Object} The updated signature metadata object\n   * @private\n   */\n  function parseArgs(argList, sig) {\n    sig.args = argList.map(function(rawArg) {\n      let arg = parseArg(rawArg);\n      if (!arg.literal) {\n        sig.static = false;\n      }\n      return arg;\n    }, this);\n    return sig;\n  }\n\n  /**\n   * Parses an individual argument, and returns an argument metadata object\n   * with the following fields:\n   *\n   *   {\n   *     value: 'prop',        // property/path or literal value\n   *     literal: false,       // whether argument is a literal\n   *     structured: false,    // whether the property is a path\n   *     rootProperty: 'prop', // the root property of the path\n   *     wildcard: false       // whether the argument was a wildcard '.*' path\n   *   }\n   *\n   * @param {string} rawArg The string value of the argument\n   * @return {Object} Argument metadata object\n   * @private\n   */\n  function parseArg(rawArg) {\n    // clean up whitespace\n    let arg = rawArg.trim()\n      // replace comma entity with comma\n      .replace(/&comma;/g, ',')\n      // repair extra escape sequences; note only commas strictly need\n      // escaping, but we allow any other char to be escaped since its\n      // likely users will do this\n      .replace(/\\\\(.)/g, '\\$1')\n      ;\n    // basic argument descriptor\n    let a = {\n      name: arg\n    };\n    // detect literal value (must be String or Number)\n    let fc = arg[0];\n    if (fc === '-') {\n      fc = arg[1];\n    }\n    if (fc >= '0' && fc <= '9') {\n      fc = '#';\n    }\n    switch(fc) {\n      case \"'\":\n      case '\"':\n        a.value = arg.slice(1, -1);\n        a.literal = true;\n        break;\n      case '#':\n        a.value = Number(arg);\n        a.literal = true;\n        break;\n    }\n    // if not literal, look for structured path\n    if (!a.literal) {\n      a.rootProperty = Polymer.Path.root(arg);\n      // detect structured path (has dots)\n      a.structured = Polymer.Path.isPath(arg);\n      if (a.structured) {\n        a.wildcard = (arg.slice(-2) == '.*');\n        if (a.wildcard) {\n          a.name = arg.slice(0, -2);\n        }\n      }\n    }\n    return a;\n  }\n\n  /**\n   * Gather the argument values for a method specified in the provided array\n   * of argument metadata.\n   *\n   * The `path` and `value` arguments are used to fill in wildcard descriptor\n   * when the method is being called as a result of a path notification.\n   *\n   * @param {Object} data Instance data storage object to read properties from\n   * @param {Array<Object>} args Array of argument metadata\n   * @param {string} path Property/path name that triggered the method effect\n   * @param {Object} props Bag of current property changes\n   * @return {Array<*>} Array of argument values\n   * @private\n   */\n  function marshalArgs(data, args, path, props) {\n    let values = [];\n    for (let i=0, l=args.length; i<l; i++) {\n      let arg = args[i];\n      let name = arg.name;\n      let v;\n      if (arg.literal) {\n        v = arg.value;\n      } else {\n        if (arg.structured) {\n          v = Polymer.Path.get(data, name);\n          // when data is not stored e.g. `splices`\n          if (v === undefined) {\n            v = props[name];\n          }\n        } else {\n          v = data[name];\n        }\n      }\n      if (arg.wildcard) {\n        // Only send the actual path changed info if the change that\n        // caused the observer to run matched the wildcard\n        let baseChanged = (name.indexOf(path + '.') === 0);\n        let matches = (path.indexOf(name) === 0 && !baseChanged);\n        values[i] = {\n          path: matches ? path : name,\n          value: matches ? props[path] : v,\n          base: v\n        };\n      } else {\n        values[i] = v;\n      }\n    }\n    return values;\n  }\n\n  // data api\n\n  /**\n   * Sends array splice notifications (`.splices` and `.length`)\n   *\n   * Note: this implementation only accepts normalized paths\n   *\n   * @param {Element} inst Instance to send notifications to\n   * @param {Array} array The array the mutations occurred on\n   * @param {string} path The path to the array that was mutated\n   * @param {Array} splices Array of splice records\n   * @private\n   */\n  function notifySplices(inst, array, path, splices) {\n    let splicesPath = path + '.splices';\n    inst.notifyPath(splicesPath, { indexSplices: splices });\n    inst.notifyPath(path + '.length', array.length);\n    // Null here to allow potentially large splice records to be GC'ed.\n    inst.__data[splicesPath] = {indexSplices: null};\n  }\n\n  /**\n   * Creates a splice record and sends an array splice notification for\n   * the described mutation\n   *\n   * Note: this implementation only accepts normalized paths\n   *\n   * @param {Element} inst Instance to send notifications to\n   * @param {Array} array The array the mutations occurred on\n   * @param {string} path The path to the array that was mutated\n   * @param {number} index Index at which the array mutation occurred\n   * @param {number} addedCount Number of added items\n   * @param {Array} removed Array of removed items\n   * @private\n   */\n  function notifySplice(inst, array, path, index, addedCount, removed) {\n    notifySplices(inst, array, path, [{\n      index: index,\n      addedCount: addedCount,\n      removed: removed,\n      object: array,\n      type: 'splice'\n    }]);\n  }\n\n  /**\n   * Returns an upper-cased version of the string.\n   *\n   * @param {string} name String to uppercase\n   * @return {string} Uppercased string\n   * @private\n   */\n  function upper(name) {\n    return name[0].toUpperCase() + name.substring(1);\n  }\n\n  /**\n   * Element class mixin that provides meta-programming for Polymer's template\n   * binding and data observation (collectively, \"property effects\") system.\n   *\n   * This mixin uses provides the following key static methods for adding\n   * property effects to an element class:\n   * - `addPropertyEffect`\n   * - `createPropertyObserver`\n   * - `createMethodObserver`\n   * - `createNotifyingProperty`\n   * - `createReadOnlyProperty`\n   * - `createReflectedProperty`\n   * - `createComputedProperty`\n   * - `bindTemplate`\n   *\n   * Each method creates one or more property accessors, along with metadata\n   * used by this mixin's implementation of `_propertiesChanged` to perform\n   * the property effects.\n   *\n   * Underscored versions of the above methods also exist on the element\n   * prototype for adding property effects on instances at runtime.\n   *\n   * Note that this mixin overrides several `PropertyAccessors` methods, in\n   * many cases to maintain guarantees provided by the Polymer 1.x features;\n   * notably it changes property accessors to be synchronous by default\n   * whereas the default when using `PropertyAccessors` standalone is to be\n   * async by default.\n   *\n   * @polymerMixin\n   * @mixes Polymer.TemplateStamp\n   * @mixes Polymer.PropertyAccessors\n   * @memberof Polymer\n   * @summary Element class mixin that provides meta-programming for Polymer's\n   * template binding and data observation system.\n   */\n  Polymer.PropertyEffects = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @constructor\n     * @extends {superClass}\n     * @implements {Polymer_PropertyAccessors}\n     * @implements {Polymer_TemplateStamp}\n     */\n    const propertyEffectsBase = Polymer.TemplateStamp(Polymer.PropertyAccessors(superClass));\n\n    /**\n     * @polymerMixinClass\n     * @unrestricted\n     * @implements {Polymer_PropertyEffects}\n     */\n    class PropertyEffects extends propertyEffectsBase {\n\n      get PROPERTY_EFFECT_TYPES() {\n        return TYPES;\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to initialize\n       * additional property-effect related properties.\n       *\n       * @override\n       */\n      _initializeProperties() {\n        super._initializeProperties();\n        hostStack.registerHost(this);\n        this.__dataClientsInitialized = false;\n        this.__dataPendingClients = null;\n        this.__dataToNotify = null;\n        this.__dataLinkedPaths = null;\n        this.__dataHasPaths = false;\n        // May be set on instance prior to upgrade\n        this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n        this.__dataHost = this.__dataHost || null;\n        this.__dataTemp = {};\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to provide a\n       * more efficient implementation of initializing properties from\n       * the prototype on the instance.\n       *\n       * @override\n       */\n      _initializeProtoProperties(props) {\n        this.__data = Object.create(props);\n        this.__dataPending = Object.create(props);\n        this.__dataOld = {};\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n       * `_setProperty`'s `shouldNotify: true`.\n       *\n       * @override\n       */\n      _initializeInstanceProperties(props) {\n        let readOnly = this.__readOnly;\n        for (let prop in props) {\n          if (!readOnly || !readOnly[prop]) {\n            this.__dataPending = this.__dataPending || {};\n            this.__dataOld = this.__dataOld || {};\n            this.__data[prop] = this.__dataPending[prop] = props[prop];\n          }\n        }\n      }\n\n      // Prototype setup ----------------------------------------\n\n      /**\n       * Equivalent to static `addPropertyEffect` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property that should trigger the effect\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      _addPropertyEffect(property, type, effect) {\n        this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n        // effects are accumulated into arrays per property based on type\n        let effects = ensureOwnEffectMap(this, type)[property];\n        if (!effects) {\n          effects = this[type][property] = [];\n        }\n        effects.push(effect);\n      }\n\n      /**\n       * Removes the given property effect.\n       *\n       * @param {string} property Property the effect was associated with\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object to remove\n       */\n      _removePropertyEffect(property, type, effect) {\n        let effects = ensureOwnEffectMap(this, type)[property];\n        let idx = effects.indexOf(effect);\n        if (idx >= 0) {\n          effects.splice(idx, 1);\n        }\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a property effect\n       * of a certain type.\n       *\n       * @param {string} property Property name\n       * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasPropertyEffect(property, type) {\n        let effects = this[type];\n        return Boolean(effects && effects[property]);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"read only\"\n       * accessor for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasReadOnlyEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"notify\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasNotifyEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.NOTIFY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"reflect to attribute\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasReflectEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.REFLECT);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"computed\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasComputedEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.COMPUTE);\n      }\n\n      // Runtime ----------------------------------------\n\n      /**\n       * Sets a pending property or path.  If the root property of the path in\n       * question had no accessor, the path is set, otherwise it is enqueued\n       * via `_setPendingProperty`.\n       *\n       * This function isolates relatively expensive functionality necessary\n       * for the public API (`set`, `setProperties`, `notifyPath`, and property\n       * change listeners via {{...}} bindings), such that it is only done\n       * when paths enter the system, and not at every propagation step.  It\n       * also sets a `__dataHasPaths` flag on the instance which is used to\n       * fast-path slower path-matching code in the property effects host paths.\n       *\n       * `path` can be a path string or array of path parts as accepted by the\n       * public API.\n       *\n       * @param {string | !Array<number|string>} path Path to set\n       * @param {*} value Value to set\n       * @param {boolean=} shouldNotify Set to true if this change should\n       *  cause a property notification event dispatch\n       * @param {boolean=} isPathNotification If the path being set is a path\n       *   notification of an already changed value, as opposed to a request\n       *   to set and notify the change.  In the latter `false` case, a dirty\n       *   check is performed and then the value is set to the path before\n       *   enqueuing the pending property change.\n       * @return {boolean} Returns true if the property/path was enqueued in\n       *   the pending changes bag.\n       * @protected\n       */\n      _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n        if (isPathNotification ||\n            Polymer.Path.root(Array.isArray(path) ? path[0] : path) !== path) {\n          // Dirty check changes being set to a path against the actual object,\n          // since this is the entry point for paths into the system; from here\n          // the only dirty checks are against the `__dataTemp` cache to prevent\n          // duplicate work in the same turn only. Note, if this was a notification\n          // of a change already set to a path (isPathNotification: true),\n          // we always let the change through and skip the `set` since it was\n          // already dirty checked at the point of entry and the underlying\n          // object has already been updated\n          if (!isPathNotification) {\n            let old = Polymer.Path.get(this, path);\n            path = /** @type {string} */ (Polymer.Path.set(this, path, value));\n            // Use property-accessor's simpler dirty check\n            if (!path || !super._shouldPropertyChange(path, value, old)) {\n              return false;\n            }\n          }\n          this.__dataHasPaths = true;\n          if (this._setPendingProperty(path, value, shouldNotify)) {\n            computeLinkedPaths(this, path, value);\n            return true;\n          }\n        } else {\n          if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n            return this._setPendingProperty(path, value, shouldNotify);\n          } else {\n            this[path] = value;\n          }\n        }\n        return false;\n      }\n\n      /**\n       * Applies a value to a non-Polymer element/node's property.\n       *\n       * The implementation makes a best-effort at binding interop:\n       * Some native element properties have side-effects when\n       * re-setting the same value (e.g. setting `<input>.value` resets the\n       * cursor position), so we do a dirty-check before setting the value.\n       * However, for better interop with non-Polymer custom elements that\n       * accept objects, we explicitly re-set object changes coming from the\n       * Polymer world (which may include deep object changes without the\n       * top reference changing), erring on the side of providing more\n       * information.\n       *\n       * Users may override this method to provide alternate approaches.\n       *\n       * @param {Node} node The node to set a property on\n       * @param {string} prop The property to set\n       * @param {*} value The value to set\n       * @protected\n       */\n      _setUnmanagedPropertyToNode(node, prop, value) {\n        // It is a judgment call that resetting primitives is\n        // \"bad\" and resettings objects is also \"good\"; alternatively we could\n        // implement a whitelist of tag & property values that should never\n        // be reset (e.g. <input>.value && <select>.value)\n        if (value !== node[prop] || typeof value == 'object') {\n          node[prop] = value;\n        }\n      }\n\n      /**\n       * Overrides the `PropertyAccessors` implementation to introduce special\n       * dirty check logic depending on the property & value being set:\n       *\n       * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n       *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n       * 2. Object set to simple property (e.g. 'prop': {...})\n       *    Stored in `__dataTemp` and `__data`, dirty checked against\n       *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n       * 3. Primitive value set to simple property (e.g. 'prop': 42)\n       *    Stored in `__data`, dirty checked against `__data`\n       *\n       * The dirty-check is important to prevent cycles due to two-way\n       * notification, but paths and objects are only dirty checked against any\n       * previous value set during this turn via a \"temporary cache\" that is\n       * cleared when the last `_propertiesChaged` exits. This is so:\n       * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n       *    due to array mutations like shift/unshift/splice; this is fine\n       *    since path changes are dirty-checked at user entry points like `set`\n       * b. dirty-checking for objects only lasts one turn to allow the user\n       *    to mutate the object in-place and re-set it with the same identity\n       *    and have all sub-properties re-propagated in a subsequent turn.\n       *\n       * The temp cache is not necessarily sufficient to prevent invalid array\n       * paths, since a splice can happen during the same turn (with pathological\n       * user code); we could introduce a \"fixup\" for temporarily cached array\n       * paths if needed: https://github.com/Polymer/polymer/issues/4227\n       *\n       * @override\n       */\n      _setPendingProperty(property, value, shouldNotify) {\n        let isPath = this.__dataHasPaths && Polymer.Path.isPath(property);\n        let prevProps = isPath ? this.__dataTemp : this.__data;\n        if (this._shouldPropertyChange(property, value, prevProps[property])) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (!(property in this.__dataOld)) {\n            this.__dataOld[property] = this.__data[property];\n          }\n          // Paths are stored in temporary cache (cleared at end of turn),\n          // which is used for dirty-checking, all others stored in __data\n          if (isPath) {\n            this.__dataTemp[property] = value;\n          } else {\n            this.__data[property] = value;\n          }\n          // All changes go into pending property bag, passed to _propertiesChanged\n          this.__dataPending[property] = value;\n          // Track properties that should notify separately\n          if (isPath || (this.__notifyEffects && this.__notifyEffects[property])) {\n            this.__dataToNotify = this.__dataToNotify || {};\n            this.__dataToNotify[property] = shouldNotify;\n          }\n          return true;\n        }\n      }\n\n      /**\n       * Overrides base implementation to ensure all accessors set `shouldNotify`\n       * to true, for per-property notification tracking.\n       *\n       * @override\n       */\n      _setProperty(property, value) {\n        if (this._setPendingProperty(property, value, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Overrides `PropertyAccessor`'s default async queuing of\n       * `_propertiesChanged`: if `__dataInitialized` is false (has not yet been\n       * manually flushed), the function no-ops; otherwise flushes\n       * `_propertiesChanged` synchronously.\n       *\n       * @override\n       */\n      _invalidateProperties() {\n        if (this.__dataInitialized) {\n          this._flushProperties();\n        }\n      }\n\n      /**\n       * Enqueues the given client on a list of pending clients, whose\n       * pending property changes can later be flushed via a call to\n       * `_flushClients`.\n       *\n       * @param {Object} client PropertyEffects client to enqueue\n       * @protected\n       */\n      _enqueueClient(client) {\n        this.__dataPendingClients = this.__dataPendingClients || [];\n        if (client !== this) {\n          this.__dataPendingClients.push(client);\n        }\n      }\n\n      /**\n       * Flushes any clients previously enqueued via `_enqueueClient`, causing\n       * their `_flushProperties` method to run.\n       *\n       * @protected\n       */\n      _flushClients() {\n        if (!this.__dataClientsInitialized) {\n          this.__dataClientsInitialized = true;\n          this._readyClients();\n          // Override point where accessors are turned on; importantly,\n          // this is after clients have fully readied, providing a guarantee\n          // that any property effects occur only after all clients are ready.\n          this.__dataInitialized = true;\n        } else {\n          // Flush all clients\n          let clients = this.__dataPendingClients;\n          if (clients) {\n            this.__dataPendingClients = null;\n            for (let i=0; i < clients.length; i++) {\n              let client = clients[i];\n              if (client.__dataPending) {\n                client._flushProperties();\n              }\n            }\n          }\n        }\n      }\n\n      /**\n       * Perform any initial setup on client dom. Called before the first\n       * `_flushProperties` call on client dom and before any element\n       * observers are called.\n       *\n       * @protected\n       */\n      _readyClients() {\n        let clients = this.__dataPendingClients;\n        if (clients) {\n          this.__dataPendingClients = null;\n          for (let i=0; i < clients.length; i++) {\n            let client = clients[i];\n            if (!client.__dataEnabled) {\n              client._enableProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Sets a bag of property changes to this instance, and\n       * synchronously processes all effects of the properties as a batch.\n       *\n       * Property names must be simple properties, not paths.  Batched\n       * path propagation is not supported.\n       *\n       * @param {Object} props Bag of one or more key-value pairs whose key is\n       *   a property and value is the new value to set for that property.\n       * @param {boolean=} setReadOnly When true, any private values set in\n       *   `props` will be set. By default, `setProperties` will not set\n       *   `readOnly: true` root properties.\n       * @public\n       */\n      setProperties(props, setReadOnly) {\n        for (let path in props) {\n          if (setReadOnly || !this.__readOnly || !this.__readOnly[path]) {\n            //TODO(kschaaf): explicitly disallow paths in setProperty?\n            // wildcard observers currently only pass the first changed path\n            // in the `info` object, and you could do some odd things batching\n            // paths, e.g. {'foo.bar': {...}, 'foo': null}\n            this._setPendingPropertyOrPath(path, props[path], true);\n          }\n        }\n        this._invalidateProperties();\n      }\n\n      /**\n       * Overrides `PropertyAccessors` so that property accessor\n       * side effects are not enabled until after client dom is fully ready.\n       * Also calls `_flushClients` callback to ensure client dom is enabled\n       * that was not enabled as a result of flushing properties.\n       *\n       * @override\n       */\n      ready() {\n        // It is important that `super.ready()` is not called here as it\n        // immediately turns on accessors. Instead, we wait until `readyClients`\n        // to enable accessors to provide a guarantee that clients are ready\n        // before processing any accessors side effects.\n        this._flushProperties();\n        // If no data was pending, `_flushProperties` will not `flushClients`\n        // so ensure this is done.\n        if (!this.__dataClientsInitialized) {\n          this._flushClients();\n        }\n        // Before ready, client notifications do not trigger _flushProperties.\n        // Therefore a flush is necessary here if data has been set.\n        if (this.__dataPending) {\n          this._flushProperties();\n        }\n      }\n\n      /**\n       * Implements `PropertyAccessors`'s properties changed callback.\n       *\n       * Runs each class of effects for the batch of changed properties in\n       * a specific order (compute, propagate, reflect, observe, notify).\n       *\n       * @override\n       */\n      _propertiesChanged(currentProps, changedProps, oldProps) {\n        // ----------------------------\n        // let c = Object.getOwnPropertyNames(changedProps || {});\n        // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n        // if (window.debug) { debugger; }\n        // ----------------------------\n        let hasPaths = this.__dataHasPaths;\n        this.__dataHasPaths = false;\n        // Compute properties\n        runComputedEffects(this, changedProps, oldProps, hasPaths);\n        // Clear notify properties prior to possible reentry (propagate, observe),\n        // but after computing effects have a chance to add to them\n        let notifyProps = this.__dataToNotify;\n        this.__dataToNotify = null;\n        // Propagate properties to clients\n        this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n        // Flush clients\n        this._flushClients();\n        // Reflect properties\n        runEffects(this, this.__reflectEffects, changedProps, oldProps, hasPaths);\n        // Observe properties\n        runEffects(this, this.__observeEffects, changedProps, oldProps, hasPaths);\n        // Notify properties to host\n        if (notifyProps) {\n          runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n        }\n        // Clear temporary cache at end of turn\n        if (this.__dataCounter == 1) {\n          this.__dataTemp = {};\n        }\n        // ----------------------------\n        // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n        // ----------------------------\n      }\n\n      /**\n       * Called to propagate any property changes to stamped template nodes\n       * managed by this element.\n       *\n       * @param {Object} changedProps Bag of changed properties\n       * @param {Object} oldProps Bag of previous values for changed properties\n       * @param {boolean} hasPaths True with `props` contains one or more paths\n       * @protected\n       */\n      _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n        if (this.__propagateEffects) {\n          runEffects(this, this.__propagateEffects, changedProps, oldProps, hasPaths);\n        }\n        let templateInfo = this.__templateInfo;\n        while (templateInfo) {\n          runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n            hasPaths, templateInfo.nodeList);\n          templateInfo = templateInfo.nextTemplateInfo;\n        }\n      }\n\n      /**\n       * Aliases one data path as another, such that path notifications from one\n       * are routed to the other.\n       *\n       * @param {string | !Array<string|number>} to Target path to link.\n       * @param {string | !Array<string|number>} from Source path to link.\n       * @public\n       */\n      linkPaths(to, from) {\n        to = Polymer.Path.normalize(to);\n        from = Polymer.Path.normalize(from);\n        this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n        this.__dataLinkedPaths[to] = from;\n      }\n\n      /**\n       * Removes a data path alias previously established with `_linkPaths`.\n       *\n       * Note, the path to unlink should be the target (`to`) used when\n       * linking the paths.\n       *\n       * @param {string | !Array<string|number>} path Target path to unlink.\n       * @public\n       */\n      unlinkPaths(path) {\n        path = Polymer.Path.normalize(path);\n        if (this.__dataLinkedPaths) {\n          delete this.__dataLinkedPaths[path];\n        }\n      }\n\n      /**\n       * Notify that an array has changed.\n       *\n       * Example:\n       *\n       *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n       *     ...\n       *     this.items.splice(1, 1, {name: 'Sam'});\n       *     this.items.push({name: 'Bob'});\n       *     this.notifySplices('items', [\n       *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n       *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n       *     ]);\n       *\n       * @param {string} path Path that should be notified.\n       * @param {Array} splices Array of splice records indicating ordered\n       *   changes that occurred to the array. Each record should have the\n       *   following fields:\n       *    * index: index at which the change occurred\n       *    * removed: array of items that were removed from this index\n       *    * addedCount: number of new items added at this index\n       *    * object: a reference to the array in question\n       *    * type: the string literal 'splice'\n       *\n       *   Note that splice records _must_ be normalized such that they are\n       *   reported in index order (raw results from `Object.observe` are not\n       *   ordered and must be normalized/merged before notifying).\n       * @public\n      */\n      notifySplices(path, splices) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        notifySplices(this, array, info.path, splices);\n      }\n\n      /**\n       * Convenience method for reading a value from a path.\n       *\n       * Note, if any part in the path is undefined, this method returns\n       * `undefined` (this method does not throw when dereferencing undefined\n       * paths).\n       *\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n       * @param {Object=} root Root object from which the path is evaluated.\n       * @return {*} Value at the path, or `undefined` if any part of the path\n       *   is undefined.\n       * @public\n       */\n      get(path, root) {\n        return Polymer.Path.get(root || this, path);\n      }\n\n      /**\n       * Convenience method for setting a value to a path and notifying any\n       * elements bound to the same path.\n       *\n       * Note, if any part in the path except for the last is undefined,\n       * this method does nothing (this method does not throw when\n       * dereferencing undefined paths).\n       *\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n       * @param {*} value Value to set at the specified path.\n       * @param {Object=} root Root object from which the path is evaluated.\n       *   When specified, no notification will occur.\n       * @public\n      */\n      set(path, value, root) {\n        if (root) {\n          Polymer.Path.set(root, path, value);\n        } else {\n          if (!this.__readOnly || !this.__readOnly[/** @type {string} */(path)]) {\n            if (this._setPendingPropertyOrPath(path, value, true)) {\n              this._invalidateProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Adds items onto the end of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @param {...*} items Items to push onto array\n       * @return {number} New length of the array.\n       * @public\n       */\n      push(path, ...items) {\n        let info = {};\n        let array = /** @type {Array}*/(Polymer.Path.get(this, path, info));\n        let len = array.length;\n        let ret = array.push(...items);\n        if (items.length) {\n          notifySplice(this, array, info.path, len, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the end of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n      pop(path) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let hadLength = Boolean(array.length);\n        let ret = array.pop();\n        if (hadLength) {\n          notifySplice(this, array, info.path, array.length, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Starting from the start index specified, removes 0 or more items\n       * from the array and inserts 0 or more new items in their place.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.splice`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @param {number} start Index from which to start removing/inserting.\n       * @param {number} deleteCount Number of items to remove.\n       * @param {...*} items Items to insert into array.\n       * @return {Array} Array of removed items.\n       * @public\n       */\n      splice(path, start, deleteCount, ...items) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        // Normalize fancy native splice handling of crazy start values\n        if (start < 0) {\n          start = array.length - Math.floor(-start);\n        } else {\n          start = Math.floor(start);\n        }\n        if (!start) {\n          start = 0;\n        }\n        let ret = array.splice(start, deleteCount, ...items);\n        if (items.length || ret.length) {\n          notifySplice(this, array, info.path, start, items.length, ret);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the beginning of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n      shift(path) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let hadLength = Boolean(array.length);\n        let ret = array.shift();\n        if (hadLength) {\n          notifySplice(this, array, info.path, 0, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Adds items onto the beginning of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @param {...*} items Items to insert info array\n       * @return {number} New length of the array.\n       * @public\n       */\n      unshift(path, ...items) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let ret = array.unshift(...items);\n        if (items.length) {\n          notifySplice(this, array, info.path, 0, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Notify that a path has changed.\n       *\n       * Example:\n       *\n       *     this.item.user.name = 'Bob';\n       *     this.notifyPath('item.user.name');\n       *\n       * @param {string} path Path that should be notified.\n       * @param {*=} value Value at the path (optional).\n       * @public\n      */\n      notifyPath(path, value) {\n        /** @type {string} */\n        let propPath;\n        if (arguments.length == 1) {\n          // Get value if not supplied\n          let info = {};\n          value = Polymer.Path.get(this, path, info);\n          propPath = info.path;\n        } else if (Array.isArray(path)) {\n          // Normalize path if needed\n          propPath = Polymer.Path.normalize(path);\n        } else {\n          propPath = /** @type{string} */(path);\n        }\n        if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Equivalent to static `createReadOnlyProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @param {boolean=} protectedSetter Creates a custom protected setter\n       *   when `true`.\n       * @protected\n       */\n      _createReadOnlyProperty(property, protectedSetter) {\n        this._addPropertyEffect(property, TYPES.READ_ONLY);\n        if (protectedSetter) {\n          this['_set' + upper(property)] = function(value) {\n            this._setProperty(property, value);\n          }\n        }\n      }\n\n      /**\n       * Equivalent to static `createPropertyObserver` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @param {string} methodName Name of observer method to call\n       * @param {boolean=} dynamicFn Whether the method name should be included as\n       *   a dependency to the effect.\n       * @protected\n       */\n      _createPropertyObserver(property, methodName, dynamicFn) {\n        let info = { property, methodName, dynamicFn };\n        this._addPropertyEffect(property, TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: property}\n        });\n        if (dynamicFn) {\n          this._addPropertyEffect(methodName, TYPES.OBSERVE, {\n            fn: runObserverEffect, info, trigger: {name: methodName}\n          });\n        }\n      }\n\n      /**\n       * Equivalent to static `createMethodObserver` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      _createMethodObserver(expression, dynamicFn) {\n        let sig = parseMethod(expression);\n        if (!sig) {\n          throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n        }\n        createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n      }\n\n      /**\n       * Equivalent to static `createNotifyingProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      _createNotifyingProperty(property) {\n        this._addPropertyEffect(property, TYPES.NOTIFY, {\n          fn: runNotifyEffect,\n          info: {\n            eventName: CaseMap.camelToDashCase(property) + '-changed',\n            property: property\n          }\n        });\n      }\n\n      /**\n       * Equivalent to static `createReflectedProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      _createReflectedProperty(property) {\n        let attr = CaseMap.camelToDashCase(property);\n        if (attr[0] === '-') {\n          console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n            attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property thisead.');\n        } else {\n          this._addPropertyEffect(property, TYPES.REFLECT, {\n            fn: runReflectEffect,\n            info: {\n              attrName: attr\n            }\n          });\n        }\n      }\n\n      /**\n       * Equivalent to static `createComputedProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Name of computed property to set\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      _createComputedProperty(property, expression, dynamicFn) {\n        let sig = parseMethod(expression);\n        if (!sig) {\n          throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n        }\n        createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n      }\n\n      // -- static class methods ------------\n\n      /**\n       * Ensures an accessor exists for the specified property, and adds\n       * to a list of \"property effects\" that will run when the accessor for\n       * the specified property is set.  Effects are grouped by \"type\", which\n       * roughly corresponds to a phase in effect processing.  The effect\n       * metadata should be in the following form:\n       *\n       *   {\n       *     fn: effectFunction, // Reference to function to call to perform effect\n       *     info: { ... }       // Effect metadata passed to function\n       *     trigger: {          // Optional triggering metadata; if not provided\n       *       name: string      // the property is treated as a wildcard\n       *       structured: boolean\n       *       wildcard: boolean\n       *     }\n       *   }\n       *\n       * Effects are called from `_propertiesChanged` in the following order by\n       * type:\n       *\n       * 1. COMPUTE\n       * 2. PROPAGATE\n       * 3. REFLECT\n       * 4. OBSERVE\n       * 5. NOTIFY\n       *\n       * Effect functions are called with the following signature:\n       *\n       *   effectFunction(inst, path, props, oldProps, info, hasPaths)\n       *\n       * @param {string} property Property that should trigger the effect\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      static addPropertyEffect(property, type, effect) {\n        this.prototype._addPropertyEffect(property, type, effect);\n      }\n\n      /**\n       * Creates a single-property observer for the given property.\n       *\n       * @param {string} property Property name\n       * @param {string} methodName Name of observer method to call\n       * @param {boolean=} dynamicFn Whether the method name should be included as\n       *   a dependency to the effect.\n       * @protected\n       */\n      static createPropertyObserver(property, methodName, dynamicFn) {\n        this.prototype._createPropertyObserver(property, methodName, dynamicFn);\n      }\n\n      /**\n       * Creates a multi-property \"method observer\" based on the provided\n       * expression, which should be a string in the form of a normal Javascript\n       * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n       * should correspond to a property or path in the context of this\n       * prototype (or instance), or may be a literal string or number.\n       *\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      static createMethodObserver(expression, dynamicFn) {\n        this.prototype._createMethodObserver(expression, dynamicFn);\n      }\n\n      /**\n       * Causes the setter for the given property to dispatch `<property>-changed`\n       * events to notify of changes to the property.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      static createNotifyingProperty(property) {\n        this.prototype._createNotifyingProperty(property);\n      }\n\n      /**\n       * Creates a read-only accessor for the given property.\n       *\n       * To set the property, use the protected `_setProperty` API.\n       * To create a custom protected setter (e.g. `_setMyProp()` for\n       * property `myProp`), pass `true` for `protectedSetter`.\n       *\n       * Note, if the property will have other property effects, this method\n       * should be called first, before adding other effects.\n       *\n       * @param {string} property Property name\n       * @param {boolean=} protectedSetter Creates a custom protected setter\n       *   when `true`.\n       * @protected\n       */\n      static createReadOnlyProperty(property, protectedSetter) {\n        this.prototype._createReadOnlyProperty(property, protectedSetter);\n      }\n\n      /**\n       * Causes the setter for the given property to reflect the property value\n       * to a (dash-cased) attribute of the same name.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      static createReflectedProperty(property) {\n        this.prototype._createReflectedProperty(property);\n      }\n\n      /**\n       * Creates a computed property whose value is set to the result of the\n       * method described by the given `expression` each time one or more\n       * arguments to the method changes.  The expression should be a string\n       * in the form of a normal Javascript function signature:\n       * `'methodName(arg1, [..., argn])'`\n       *\n       * @param {string} property Name of computed property to set\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n       *   method names should be included as a dependency to the effect.\n       * @protected\n       */\n      static createComputedProperty(property, expression, dynamicFn) {\n        this.prototype._createComputedProperty(property, expression, dynamicFn);\n      }\n\n      /**\n       * Parses the provided template to ensure binding effects are created\n       * for them, and then ensures property accessors are created for any\n       * dependent properties in the template.  Binding effects for bound\n       * templates are stored in a linked list on the instance so that\n       * templates can be efficiently stamped and unstamped.\n       *\n       * @param {HTMLTemplateElement} template Template containing binding\n       *   bindings\n       * @return {Object} Template metadata object\n       * @protected\n       */\n      static bindTemplate(template) {\n        return this.prototype._bindTemplate(template);\n      }\n\n      // -- binding ----------------------------------------------\n\n      /**\n       * Equivalent to static `bindTemplate` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * This method may be called on the prototype (for prototypical template\n       * binding, to avoid creating accessors every instance) once per prototype,\n       * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n       * create and link an instance of the template metadata associated with a\n       * particular stamping.\n       *\n       * @param {HTMLTemplateElement} template Template containing binding\n       *   bindings\n       * @param {boolean=} instanceBinding When false (default), performs\n       *   \"prototypical\" binding of the template and overwrites any previously\n       *   bound template for the class. When true (as passed from\n       *   `_stampTemplate`), the template info is instanced and linked into\n       *   the list of bound templates.\n       * @return {Object} Template metadata object; for `runtimeBinding`,\n       *   this is an instance of the prototypical template info\n       * @protected\n       */\n      _bindTemplate(template, instanceBinding) {\n        let templateInfo = this.constructor._parseTemplate(template);\n        let wasPreBound = this.__templateInfo == templateInfo;\n        // Optimization: since this is called twice for proto-bound templates,\n        // don't attempt to recreate accessors if this template was pre-bound\n        if (!wasPreBound) {\n          for (let prop in templateInfo.propertyEffects) {\n            this._createPropertyAccessor(prop);\n          }\n        }\n        if (instanceBinding) {\n          // For instance-time binding, create instance of template metadata\n          // and link into list of templates if necessary\n          templateInfo = Object.create(templateInfo);\n          templateInfo.wasPreBound = wasPreBound;\n          if (!wasPreBound && this.__templateInfo) {\n            let last = this.__templateInfoLast || this.__templateInfo;\n            this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n            templateInfo.previousTemplateInfo = last;\n            return templateInfo;\n          }\n        }\n        return this.__templateInfo = templateInfo;\n      }\n\n      /**\n       * Adds a property effect to the given template metadata, which is run\n       * at the \"propagate\" stage of `_propertiesChanged` when the template\n       * has been bound to the element via `_bindTemplate`.\n       *\n       * The `effect` object should match the format in `_addPropertyEffect`.\n       *\n       * @param {Object} templateInfo Template metadata to add effect to\n       * @param {string} prop Property that should trigger the effect\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n        let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n        hostProps[prop] = true;\n        let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n        let propEffects = effects[prop] = effects[prop] || [];\n        propEffects.push(effect);\n      }\n\n      /**\n       * Stamps the provided template and performs instance-time setup for\n       * Polymer template features, including data bindings, declarative event\n       * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n       * is returned containing the stamped DOM, ready for insertion into the\n       * DOM.\n       *\n       * This method may be called more than once; however note that due to\n       * `shadycss` polyfill limitations, only styles from templates prepared\n       * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n       * to the shadow root and support CSS custom properties), and note that\n       * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n       * any styles required by in runtime-stamped templates must be included\n       * in the main element template.\n       *\n       * @param {HTMLTemplateElement} template Template to stamp\n       * @return {DocumentFragment} Cloned template content\n       * @protected\n       */\n      _stampTemplate(template) {\n        // Ensures that created dom is `_enqueueClient`'d to this element so\n        // that it can be flushed on next call to `_flushProperties`\n        hostStack.beginHosting(this);\n        let dom = super._stampTemplate(template);\n        hostStack.endHosting(this);\n        let templateInfo = this._bindTemplate(template, true);\n        // Add template-instance-specific data to instanced templateInfo\n        templateInfo.nodeList = dom.nodeList;\n        // Capture child nodes to allow unstamping of non-prototypical templates\n        if (!templateInfo.wasPreBound) {\n          let nodes = templateInfo.childNodes = [];\n          for (let n=dom.firstChild; n; n=n.nextSibling) {\n            nodes.push(n);\n          }\n        }\n        dom.templateInfo = templateInfo;\n        // Setup compound storage, 2-way listeners, and dataHost for bindings\n        setupBindings(this, templateInfo);\n        // Flush properties into template nodes if already booted\n        if (this.__dataInitialized) {\n          runEffects(this, templateInfo.propertyEffects, this.__data, null,\n            false, templateInfo.nodeList);\n        }\n        return dom;\n      }\n\n      /**\n       * Removes and unbinds the nodes previously contained in the provided\n       * DocumentFragment returned from `_stampTemplate`.\n       *\n       * @param {DocumentFragment} dom DocumentFragment previously returned\n       *   from `_stampTemplate` associated with the nodes to be removed\n       * @protected\n       */\n      _removeBoundDom(dom) {\n        // Unlink template info\n        let templateInfo = dom.templateInfo;\n        if (templateInfo.previousTemplateInfo) {\n          templateInfo.previousTemplateInfo.nextTemplateInfo =\n            templateInfo.nextTemplateInfo;\n        }\n        if (templateInfo.nextTemplateInfo) {\n          templateInfo.nextTemplateInfo.previousTemplateInfo =\n            templateInfo.previousTemplateInfo;\n        }\n        if (this.__templateInfoLast == templateInfo) {\n          this.__templateInfoLast = templateInfo.previousTemplateInfo;\n        }\n        templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n        // Remove stamped nodes\n        let nodes = templateInfo.childNodes;\n        for (let i=0; i<nodes.length; i++) {\n          let node = nodes[i];\n          node.parentNode.removeChild(node);\n        }\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n       * array is added to `nodeInfo` and populated with binding metadata\n       * with information capturing the binding target, and a `parts` array\n       * with one or more metadata objects capturing the source(s) of the\n       * binding.\n       *\n       * @override\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template node\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       */\n      static _parseTemplateNode(node, templateInfo, nodeInfo) {\n        let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);\n        if (node.nodeType === Node.TEXT_NODE) {\n          let parts = this._parseBindings(node.textContent, templateInfo);\n          if (parts) {\n            // Initialize the textContent with any literal parts\n            // NOTE: default to a space here so the textNode remains; some browsers\n            // (IE) evacipate an empty textNode following cloneNode/importNode.\n            node.textContent = literalFromParts(parts) || ' ';\n            addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n            noted = true;\n          }\n        }\n        return noted;\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * parsing bindings from attributes.  A `bindings`\n       * array is added to `nodeInfo` and populated with binding metadata\n       * with information capturing the binding target, and a `parts` array\n       * with one or more metadata objects capturing the source(s) of the\n       * binding.\n       *\n       * @override\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template node\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       */\n      static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n        let parts = this._parseBindings(value, templateInfo);\n        if (parts) {\n          // Attribute or property\n          let origName = name;\n          let kind = 'property';\n          if (name[name.length-1] == '$') {\n            name = name.slice(0, -1);\n            kind = 'attribute';\n          }\n          // Initialize attribute bindings with any literal parts\n          let literal = literalFromParts(parts);\n          if (literal && kind == 'attribute') {\n            node.setAttribute(name, literal);\n          }\n          // Clear attribute before removing, since IE won't allow removing\n          // `value` attribute if it previously had a value (can't\n          // unconditionally set '' before removing since attributes with `$`\n          // can't be set using setAttribute)\n          if (node.localName === 'input' && origName === 'value') {\n            node.setAttribute(origName, '');\n          }\n          // Remove annotation\n          node.removeAttribute(origName);\n          // Case hackery: attributes are lower-case, but bind targets\n          // (properties) are case sensitive. Gambit is to map dash-case to\n          // camel-case: `foo-bar` becomes `fooBar`.\n          // Attribute bindings are excepted.\n          if (kind === 'property') {\n            name = Polymer.CaseMap.dashToCamelCase(name);\n          }\n          addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n          return true;\n        } else {\n          return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);\n        }\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * binding the properties that a nested template depends on to the template\n       * as `_host_<property>`.\n       *\n       * @override\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template node\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       */\n      static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n        let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);\n        // Merge host props into outer template and add bindings\n        let hostProps = nodeInfo.templateInfo.hostProps;\n        let mode = '{';\n        for (let source in hostProps) {\n          let parts = [{ mode, source, dependencies: [source] }];\n          addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n        }\n        return noted;\n      }\n\n      /**\n       * Called to parse text in a template (either attribute values or\n       * textContent) into binding metadata.\n       *\n       * Any overrides of this method should return an array of binding part\n       * metadata  representing one or more bindings found in the provided text\n       * and any \"literal\" text in between.  Any non-literal parts will be passed\n       * to `_evaluateBinding` when any dependencies change.  The only required\n       * fields of each \"part\" in the returned array are as follows:\n       *\n       * - `dependencies` - Array containing trigger metadata for each property\n       *   that should trigger the binding to update\n       * - `literal` - String containing text if the part represents a literal;\n       *   in this case no `dependencies` are needed\n       *\n       * Additional metadata for use by `_evaluateBinding` may be provided in\n       * each part object as needed.\n       *\n       * The default implementation handles the following types of bindings\n       * (one or more may be intermixed with literal strings):\n       * - Property binding: `[[prop]]`\n       * - Path binding: `[[object.prop]]`\n       * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n       * - Two-way property or path bindings (supports negation):\n       *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n       * - Inline computed method (supports negation):\n       *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n       *\n       * @param {string} text Text to parse from attribute or textContent\n       * @param {Object} templateInfo Current template metadata\n       * @return {Array<Object>} Array of binding part metadata\n       * @protected\n       */\n      static _parseBindings(text, templateInfo) {\n        let parts = [];\n        let lastIndex = 0;\n        let m;\n        // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n        // Regex matches:\n        //        Iteration 1:  Iteration 2:\n        // m[1]: '{{'          '[['\n        // m[2]: ''            '!'\n        // m[3]: 'prop'        'compute(foo,bar)'\n        while ((m = bindingRegex.exec(text)) !== null) {\n          // Add literal part\n          if (m.index > lastIndex) {\n            parts.push({literal: text.slice(lastIndex, m.index)});\n          }\n          // Add binding part\n          let mode = m[1][0];\n          let negate = Boolean(m[2]);\n          let source = m[3].trim();\n          let customEvent, notifyEvent, colon;\n          if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n            notifyEvent = source.substring(colon + 2);\n            source = source.substring(0, colon);\n            customEvent = true;\n          }\n          let signature = parseMethod(source);\n          let dependencies = [];\n          if (signature) {\n            // Inline computed function\n            let {args, methodName} = signature;\n            for (let i=0; i<args.length; i++) {\n              let arg = args[i];\n              if (!arg.literal) {\n                dependencies.push(arg);\n              }\n            }\n            let dynamicFns = templateInfo.dynamicFns;\n            if (dynamicFns && dynamicFns[methodName] || signature.static) {\n              dependencies.push(methodName);\n              signature.dynamicFn = true;\n            }\n          } else {\n            // Property or path\n            dependencies.push(source);\n          }\n          parts.push({\n            source, mode, negate, customEvent, signature, dependencies,\n            event: notifyEvent\n          });\n          lastIndex = bindingRegex.lastIndex;\n        }\n        // Add a final literal part\n        if (lastIndex && lastIndex < text.length) {\n          let literal = text.substring(lastIndex);\n          if (literal) {\n            parts.push({\n              literal: literal\n            });\n          }\n        }\n        if (parts.length) {\n          return parts;\n        }\n      }\n\n      /**\n       * Called to evaluate a previously parsed binding part based on a set of\n       * one or more changed dependencies.\n       *\n       * @param {HTMLElement} inst Element that should be used as scope for\n       *   binding dependencies\n       * @param {Object} part Binding part metadata\n       * @param {string} path Property/path that triggered this effect\n       * @param {Object} props Bag of current property changes\n       * @param {Object} oldProps Bag of previous values for changed properties\n       * @param {boolean} hasPaths True with `props` contains one or more paths\n       * @return {*} Value the binding part evaluated to\n       * @protected\n       */\n      static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n        let value;\n        if (part.signature) {\n          value = runMethodEffect(inst, path, props, oldProps, part.signature);\n        } else if (path != part.source) {\n          value = Polymer.Path.get(inst, part.source);\n        } else {\n          if (hasPaths && Polymer.Path.isPath(path)) {\n            value = Polymer.Path.get(inst, path);\n          } else {\n            value = inst.__data[path];\n          }\n        }\n        if (part.negate) {\n          value = !value;\n        }\n        return value;\n      }\n\n    }\n\n    return PropertyEffects;\n  });\n\n  /**\n   * Helper api for enqueing client dom created by a host element.\n   *\n   * By default elements are flushed via `_flushProperties` when\n   * `connectedCallback` is called. Elements attach their client dom to\n   * themselves at `ready` time which results from this first flush.\n   * This provides an ordering guarantee that the client dom an element\n   * creates is flushed before the element itself (i.e. client `ready`\n   * fires before host `ready`).\n   *\n   * However, if `_flushProperties` is called *before* an element is connected,\n   * as for example `Templatize` does, this ordering guarantee cannot be\n   * satisfied because no elements are connected. (Note: Bound elements that\n   * receive data do become enqueued clients and are properly ordered but\n   * unbound elements are not.)\n   *\n   * To maintain the desired \"client before host\" ordering guarantee for this\n   * case we rely on the \"host stack. Client nodes registers themselves with\n   * the creating host element when created. This ensures that all client dom\n   * is readied in the proper order, maintaining the desired guarantee.\n   *\n   * @private\n   */\n  let hostStack = {\n\n    stack: [],\n\n    registerHost(inst) {\n      if (this.stack.length) {\n        let host = this.stack[this.stack.length-1];\n        host._enqueueClient(inst);\n      }\n    },\n\n    beginHosting(inst) {\n      this.stack.push(inst);\n    },\n\n    endHosting(inst) {\n      let stackLen = this.stack.length;\n      if (stackLen && this.stack[stackLen-1] == inst) {\n        this.stack.pop();\n      }\n    }\n\n  }\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/mixins/property-effects.html","/*__wc__loader*/\nrequire('./boot.html');\n\n\n(function() {\n\n  'use strict';\n\n  /** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\n  let AsyncInterface; // eslint-disable-line no-unused-vars\n\n  // Microtask implemented using Mutation Observer\n  let microtaskCurrHandle = 0;\n  let microtaskLastHandle = 0;\n  let microtaskCallbacks = [];\n  let microtaskNodeContent = 0;\n  let microtaskNode = document.createTextNode('');\n  new window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\n  function microtaskFlush() {\n    const len = microtaskCallbacks.length;\n    for (let i = 0; i < len; i++) {\n      let cb = microtaskCallbacks[i];\n      if (cb) {\n        try {\n          cb();\n        } catch (e) {\n          setTimeout(() => { throw e });\n        }\n      }\n    }\n    microtaskCallbacks.splice(0, len);\n    microtaskLastHandle += len;\n  }\n\n  /**\n   * Module that provides a number of strategies for enqueuing asynchronous\n   * tasks.  Each sub-module provides a standard `run(fn)` interface that returns a\n   * handle, and a `cancel(handle)` interface for canceling async tasks before\n   * they run.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides a number of strategies for enqueuing asynchronous\n   * tasks.\n   */\n  Polymer.Async = {\n\n    /**\n     * Async interface wrapper around `setTimeout`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `setTimeout`.\n     */\n    timeOut: {\n      /**\n       * Returns a sub-module with the async interface providing the provided\n       * delay.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} delay Time to wait before calling callbacks in ms\n       * @return {AsyncInterface} An async timeout interface\n       */\n      after(delay) {\n        return  {\n          run(fn) { return setTimeout(fn, delay) },\n          cancel: window.clearTimeout.bind(window)\n        }\n      },\n      /**\n       * Enqueues a function called in the next task.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {Function} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run: window.setTimeout.bind(window),\n      /**\n       * Cancels a previously enqueued `timeOut` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel: window.clearTimeout.bind(window)\n    },\n\n    /**\n     * Async interface wrapper around `requestAnimationFrame`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `requestAnimationFrame`.\n     */\n    animationFrame: {\n      /**\n       * Enqueues a function called at `requestAnimationFrame` timing.\n       *\n       * @memberof Polymer.Async.animationFrame\n       * @param {Function} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run: window.requestAnimationFrame.bind(window),\n      /**\n       * Cancels a previously enqueued `animationFrame` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel: window.cancelAnimationFrame.bind(window)\n    },\n\n    /**\n     * Async interface wrapper around `requestIdleCallback`.  Falls back to\n     * `setTimeout` on browsers that do not support `requestIdleCallback`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `requestIdleCallback`.\n     */\n    idlePeriod: {\n      /**\n       * Enqueues a function called at `requestIdleCallback` timing.\n       *\n       * @memberof Polymer.Async.idlePeriod\n       * @param {function(IdleDeadline)} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run(fn) {\n        return window.requestIdleCallback ?\n          window.requestIdleCallback(fn) :\n          window.setTimeout(fn, 16);\n      },\n      /**\n       * Cancels a previously enqueued `idlePeriod` callback.\n       *\n       * @memberof Polymer.Async.idlePeriod\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel(handle) {\n        window.cancelIdleCallback ?\n          window.cancelIdleCallback(handle) :\n          window.clearTimeout(handle);\n      }\n    },\n\n    /**\n     * Async interface for enqueueing callbacks that run at microtask timing.\n     *\n     * Note that microtask timing is achieved via a single `MutationObserver`,\n     * and thus callbacks enqueued with this API will all run in a single\n     * batch, and not interleaved with other microtasks such as promises.\n     * Promises are avoided as an implementation choice for the time being\n     * due to Safari bugs that cause Promises to lack microtask guarantees.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface for enqueueing callbacks that run at microtask\n     *   timing.\n     */\n    microTask: {\n\n      /**\n       * Enqueues a function called at microtask timing.\n       *\n       * @memberof Polymer.Async.microTask\n       * @param {Function} callback Callback to run\n       * @return {*} Handle used for canceling task\n       */\n      run(callback) {\n        microtaskNode.textContent = microtaskNodeContent++;\n        microtaskCallbacks.push(callback);\n        return microtaskCurrHandle++;\n      },\n\n      /**\n       * Cancels a previously enqueued `microTask` callback.\n       *\n       * @memberof Polymer.Async.microTask\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel(handle) {\n        const idx = handle - microtaskLastHandle;\n        if (idx >= 0) {\n          if (!microtaskCallbacks[idx]) {\n            throw new Error('invalid async handle: ' + handle);\n          }\n          microtaskCallbacks[idx] = null;\n        }\n      }\n\n    }\n  };\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/async.html","'use strict';\n\nimport './components/fake-app';\n\n\n// WEBPACK FOOTER //\n// ./index.js","'use strict';\n\nimport '@polymer/polymer/polymer-element.html';\nimport './template.html';\n\nimport './../list-data';\n\nclass FakeApp extends Polymer.Element {\n  static get is() { return 'fake-app' }\n  static get properties() {\n    return {\n      test: {\n        type: String,\n        value: \"hello world\"\n      },\n      version: {\n        type: String,\n        value: () => { return window.Polymer.version }  \n      }\n    }\n  }\n\n}\n\ncustomElements.define(FakeApp.is, FakeApp);\n\n\n// WEBPACK FOOTER //\n// ./components/fake-app/index.js","'use strict';\n\nimport '@polymer/polymer/polymer-element.html';\nimport '@polymer/polymer/lib/elements/dom-repeat.html';\nimport './template.html';\n\nclass ListData extends Polymer.Element {\n  static get is() { return 'list-data' }\n  static get properties() {\n    return {\n      data: {\n        type: Array,\n        value: []\n      }\n    }\n  }\n\n  connectedCallback(){\n    fetch('http://jsonplaceholder.typicode.com/posts/')\n      .then(resp => resp.json())\n      .then(data => {\n        this.data = data\n      });\n  }\n\n}\n\ncustomElements.define(ListData.is, ListData);\n\n\n// WEBPACK FOOTER //\n// ./components/list-data/index.js","/*__wc__loader*/!function(a){var b=\"<dom-module id=\\\"fake-app\\\">\\n\\t<template>\\n    <style>:host{display:block;width:80%;margin:30px auto;}</style>\\n    <slot></slot>\\n    <p><small>Running on Polymer [[version]]</small></p>\\n    <list-data></list-data>\\n\\t</template>\\n</dom-module>\";if(a.body){var c=a.body,d=a.createElement(\"div\");for(d.innerHTML=b;d.children.length>0;)c.appendChild(d.children[0])}else a.write(b)}(document);\n\n\n// WEBPACK FOOTER //\n// ./components/fake-app/template.html","/*__wc__loader*/!function(a){var b=\"<dom-module id=\\\"list-data\\\">\\n\\t<template>\\n    <style></style>\\n    <ul>\\n      <dom-repeat items=\\\"[[data]]\\\">\\n        <template>\\n          <li data-id$=\\\"[[item.id]]\\\" data-user$=\\\"[[item.userId]]\\\">\\n            <strong>[[item.title]]</strong> - [[item.body]]\\n          </li>\\n        </template>\\n      </dom-repeat>\\n    </ul>\\n\\t</template>\\n</dom-module>\";if(a.body){var c=a.body,d=a.createElement(\"div\");for(d.innerHTML=b;d.children.length>0;)c.appendChild(d.children[0])}else a.write(b)}(document);\n\n\n// WEBPACK FOOTER //\n// ./components/list-data/template.html","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/resolve-url.html');\n\n\n(function() {\n  'use strict';\n\n  let modules = {};\n  let lcModules = {};\n  function findModule(id) {\n    return modules[id] || lcModules[id.toLowerCase()];\n  }\n\n  function styleOutsideTemplateCheck(inst) {\n    if (inst.querySelector('style')) {\n      console.warn('dom-module %s has style outside template', inst.id);\n    }\n  }\n\n  /**\n   * The `dom-module` element registers the dom it contains to the name given\n   * by the module's id attribute. It provides a unified database of dom\n   * accessible via its static `import` API.\n   *\n   * A key use case of `dom-module` is for providing custom element `<template>`s\n   * via HTML imports that are parsed by the native HTML parser, that can be\n   * relocated during a bundling pass and still looked up by `id`.\n   *\n   * Example:\n   *\n   *     <dom-module id=\"foo\">\n   *       <img src=\"stuff.png\">\n   *     </dom-module>\n   *\n   * Then in code in some other location that cannot access the dom-module above\n   *\n   *     let img = document.createElement('dom-module').import('foo', 'img');\n   *\n   * @extends HTMLElement\n   * @memberof Polymer\n   * @summary Custom element that provides a registry of relocatable DOM content\n   *   by `id` that is agnostic to bundling.\n   */\n  class DomModule extends HTMLElement {\n\n    static get observedAttributes() { return ['id'] }\n\n    /**\n     * Retrieves the element specified by the css `selector` in the module\n     * registered by `id`. For example, this.import('foo', 'img');\n     * @param {string} id The id of the dom-module in which to search.\n     * @param {string=} selector The css selector by which to find the element.\n     * @return {Element} Returns the element which matches `selector` in the\n     * module registered at the specified `id`.\n     */\n    static import(id, selector) {\n      if (id) {\n        let m = findModule(id);\n        if (m && selector) {\n          return m.querySelector(selector);\n        }\n        return m;\n      }\n      return null;\n    }\n\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        this.register();\n      }\n    }\n\n    /**\n     * The absolute URL of the original location of this `dom-module`.\n     *\n     * This value will differ from this element's `ownerDocument` in the\n     * following ways:\n     * - Takes into account any `assetpath` attribute added during bundling\n     *   to indicate the original location relative to the bundled location\n     * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n     *   the path is relative to the import document's location since\n     *   `ownerDocument` is not currently polyfilled\n     */\n    get assetpath() {\n      // Don't override existing assetpath.\n      if (!this.__assetpath) {\n        // note: assetpath set via an attribute must be relative to this\n        // element's location; accomodate polyfilled HTMLImports\n        const owner = window.HTMLImports && HTMLImports.importForElement ?\n          HTMLImports.importForElement(this) || document : this.ownerDocument;\n        const url = Polymer.ResolveUrl.resolveUrl(\n          this.getAttribute('assetpath') || '', owner.baseURI);\n        this.__assetpath = Polymer.ResolveUrl.pathFromUrl(url);\n      }\n      return this.__assetpath;\n    }\n\n    /**\n     * Registers the dom-module at a given id. This method should only be called\n     * when a dom-module is imperatively created. For\n     * example, `document.createElement('dom-module').register('foo')`.\n     * @param {string=} id The id at which to register the dom-module.\n     */\n    register(id) {\n      id = id || this.id;\n      if (id) {\n        this.id = id;\n        // store id separate from lowercased id so that\n        // in all cases mixedCase id will stored distinctly\n        // and lowercase version is a fallback\n        modules[id] = this;\n        lcModules[id.toLowerCase()] = this;\n        styleOutsideTemplateCheck(this);\n      }\n    }\n  }\n\n  DomModule.prototype['modules'] = modules;\n\n  customElements.define('dom-module', DomModule);\n\n  // export\n  Polymer.DomModule = DomModule;\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/elements/dom-module.html","/*__wc__loader*/\nrequire('../../polymer-element.html');\n\nrequire('../utils/templatize.html');\n\nrequire('../utils/debounce.html');\n\nrequire('../utils/flush.html');\n\nrequire('../mixins/mutable-data.html');\n\n\n(function() {\n  'use strict';\n\n  /**\n   * @constructor\n   * @implements {Polymer_OptionalMutableData}\n   * @extends {Polymer.Element}\n   */\n  const domRepeatBase = Polymer.OptionalMutableData(Polymer.Element);\n\n  /**\n   * The `<dom-repeat>` element will automatically stamp and binds one instance\n   * of template content to each object in a user-provided array.\n   * `dom-repeat` accepts an `items` property, and one instance of the template\n   * is stamped for each item into the DOM at the location of the `dom-repeat`\n   * element.  The `item` property will be set on each instance's binding\n   * scope, thus templates should bind to sub-properties of `item`.\n   *\n   * Example:\n   *\n   * ```html\n   * <dom-module id=\"employee-list\">\n   *\n   *   <template>\n   *\n   *     <div> Employee list: </div>\n   *     <template is=\"dom-repeat\" items=\"{{employees}}\">\n   *         <div>First name: <span>{{item.first}}</span></div>\n   *         <div>Last name: <span>{{item.last}}</span></div>\n   *     </template>\n   *\n   *   </template>\n   *\n   *   <script>\n   *     Polymer({\n   *       is: 'employee-list',\n   *       ready: function() {\n   *         this.employees = [\n   *             {first: 'Bob', last: 'Smith'},\n   *             {first: 'Sally', last: 'Johnson'},\n   *             ...\n   *         ];\n   *       }\n   *     });\n   *   < /script>\n   *\n   * </dom-module>\n   * ```\n   *\n   * Notifications for changes to items sub-properties will be forwarded to template\n   * instances, which will update via the normal structured data notification system.\n   *\n   * Mutations to the `items` array itself should me made using the Array\n   * mutation API's on `Polymer.Base` (`push`, `pop`, `splice`, `shift`,\n   * `unshift`), and template instances will be kept in sync with the data in the\n   * array.\n   *\n   * Events caught by event handlers within the `dom-repeat` template will be\n   * decorated with a `model` property, which represents the binding scope for\n   * each template instance.  The model is an instance of Polymer.Base, and should\n   * be used to manipulate data on the instance, for example\n   * `event.model.set('item.checked', true);`.\n   *\n   * Alternatively, the model for a template instance for an element stamped by\n   * a `dom-repeat` can be obtained using the `modelForElement` API on the\n   * `dom-repeat` that stamped it, for example\n   * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.\n   * This may be useful for manipulating instance data of event targets obtained\n   * by event handlers on parents of the `dom-repeat` (event delegation).\n   *\n   * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a\n   * `filter` and/or `sort` property.  This may be a string that names a function on\n   * the host, or a function may be assigned to the property directly.  The functions\n   * should implemented following the standard `Array` filter/sort API.\n   *\n   * In order to re-run the filter or sort functions based on changes to sub-fields\n   * of `items`, the `observe` property may be set as a space-separated list of\n   * `item` sub-fields that should cause a re-filter/sort when modified.  If\n   * the filter or sort function depends on properties not contained in `items`,\n   * the user should observe changes to those properties and call `render` to update\n   * the view based on the dependency change.\n   *\n   * For example, for an `dom-repeat` with a filter of the following:\n   *\n   * ```js\n   * isEngineer: function(item) {\n   *     return item.type == 'engineer' || item.manager.type == 'engineer';\n   * }\n   * ```\n   *\n   * Then the `observe` property should be configured as follows:\n   *\n   * ```html\n   * <template is=\"dom-repeat\" items=\"{{employees}}\"\n   *           filter=\"isEngineer\" observe=\"type manager.type\">\n   * ```\n   *\n   * @polymerElement\n   * @memberof Polymer\n   * @extends Polymer.Element\n   * @mixes Polymer.MutableData\n   * @summary Custom element for stamping instance of a template bound to\n   *   items in an array.\n   */\n  class DomRepeat extends domRepeatBase {\n\n    // Not needed to find template; can be removed once the analyzer\n    // can find the tag name from customElements.define call\n    static get is() { return 'dom-repeat'; }\n\n    static get template() { return null; }\n\n    static get properties() {\n\n      /**\n       * Fired whenever DOM is added or removed by this template (by\n       * default, rendering occurs lazily).  To force immediate rendering, call\n       * `render`.\n       *\n       * @event dom-change\n       */\n      return {\n\n        /**\n         * An array containing items determining how many instances of the template\n         * to stamp and that that each template instance should bind to.\n         */\n        items: {\n          type: Array\n        },\n\n        /**\n         * The name of the variable to add to the binding scope for the array\n         * element associated with a given template instance.\n         */\n        as: {\n          type: String,\n          value: 'item'\n        },\n\n        /**\n         * The name of the variable to add to the binding scope with the index\n         * of the instance in the sorted and filtered list of rendered items.\n         * Note, for the index in the `this.items` array, use the value of the\n         * `itemsIndexAs` property.\n         */\n        indexAs: {\n          type: String,\n          value: 'index'\n        },\n\n        /**\n         * The name of the variable to add to the binding scope with the index\n         * of the instance in the `this.items` array. Note, for the index of\n         * this instance in the sorted and filtered list of rendered items,\n         * use the value of the `indexAs` property.\n         */\n        itemsIndexAs: {\n          type: String,\n          value: 'itemsIndex'\n        },\n\n        /**\n         * A function that should determine the sort order of the items.  This\n         * property should either be provided as a string, indicating a method\n         * name on the element's host, or else be an actual function.  The\n         * function should match the sort function passed to `Array.sort`.\n         * Using a sort function has no effect on the underlying `items` array.\n         */\n        sort: {\n          type: Function,\n          observer: '__sortChanged'\n        },\n\n        /**\n         * A function that can be used to filter items out of the view.  This\n         * property should either be provided as a string, indicating a method\n         * name on the element's host, or else be an actual function.  The\n         * function should match the sort function passed to `Array.filter`.\n         * Using a filter function has no effect on the underlying `items` array.\n         */\n        filter: {\n          type: Function,\n          observer: '__filterChanged'\n        },\n\n        /**\n         * When using a `filter` or `sort` function, the `observe` property\n         * should be set to a space-separated list of the names of item\n         * sub-fields that should trigger a re-sort or re-filter when changed.\n         * These should generally be fields of `item` that the sort or filter\n         * function depends on.\n         */\n        observe: {\n          type: String,\n          observer: '__observeChanged'\n        },\n\n        /**\n         * When using a `filter` or `sort` function, the `delay` property\n         * determines a debounce time after a change to observed item\n         * properties that must pass before the filter or sort is re-run.\n         * This is useful in rate-limiting shuffing of the view when\n         * item changes may be frequent.\n         */\n        delay: Number,\n\n        /**\n         * Count of currently rendered items after `filter` (if any) has been applied.\n         * If \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\n         * set of template instances is rendered.\n         *\n         */\n        renderedItemCount: {\n          type: Number,\n          notify: true,\n          readOnly: true\n        },\n\n        /**\n         * Defines an initial count of template instances to render after setting\n         * the `items` array, before the next paint, and puts the `dom-repeat`\n         * into \"chunking mode\".  The remaining items will be created and rendered\n         * incrementally at each animation frame therof until all instances have\n         * been rendered.\n         */\n        initialCount: {\n          type: Number,\n          observer: '__initializeChunking'\n        },\n\n        /**\n         * When `initialCount` is used, this property defines a frame rate to\n         * target by throttling the number of instances rendered each frame to\n         * not exceed the budget for the target frame rate.  Setting this to a\n         * higher number will allow lower latency and higher throughput for\n         * things like event handlers, but will result in a longer time for the\n         * remaining items to complete rendering.\n         */\n        targetFramerate: {\n          type: Number,\n          value: 20\n        },\n\n        _targetFrameTime: {\n          type: Number,\n          computed: '__computeFrameTime(targetFramerate)'\n        }\n\n      }\n\n    }\n\n    static get observers() {\n      return [ '__itemsChanged(items.*)' ]\n    }\n\n    constructor() {\n      super();\n      this.__instances = [];\n      this.__limit = Infinity;\n      this.__pool = [];\n      this.__renderDebouncer = null;\n      this.__itemsIdxToInstIdx = {};\n      this.__chunkCount = null;\n      this.__lastChunkTime = null;\n      this.__needFullRefresh = false;\n      this.__sortFn = null;\n      this.__filterFn = null;\n      this.__observePaths = null;\n      this.__ctor = null;\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.__isDetached = true;\n      for (let i=0; i<this.__instances.length; i++) {\n        this.__detachInstance(i);\n      }\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      // only perform attachment if the element was previously detached.\n      if (this.__isDetached) {\n        this.__isDetached = false;\n        let parent = this.parentNode;\n        for (let i=0; i<this.__instances.length; i++) {\n          this.__attachInstance(i, parent);\n        }\n      }\n    }\n\n    __ensureTemplatized() {\n      // Templatizing (generating the instance constructor) needs to wait\n      // until ready, since won't have its template content handed back to\n      // it until then\n      if (!this.__ctor) {\n        let template = this.template = this.querySelector('template');\n        if (!template) {\n          // // Wait until childList changes and template should be there by then\n          let observer = new MutationObserver(() => {\n            if (this.querySelector('template')) {\n              observer.disconnect();\n              this.__render();\n            } else {\n              throw new Error('dom-repeat requires a <template> child');\n            }\n          })\n          observer.observe(this, {childList: true});\n          return false;\n        }\n        // Template instance props that should be excluded from forwarding\n        let instanceProps = {};\n        instanceProps[this.as] = true;\n        instanceProps[this.indexAs] = true;\n        instanceProps[this.itemsIndexAs] = true;\n        this.__ctor = Polymer.Templatize.templatize(template, this, {\n          mutableData: this.mutableData,\n          parentModel: true,\n          instanceProps: instanceProps,\n          forwardHostProp: function(prop, value) {\n            let i$ = this.__instances;\n            for (let i=0, inst; (i<i$.length) && (inst=i$[i]); i++) {\n              inst.forwardHostProp(prop, value);\n            }\n          },\n          notifyInstanceProp: function(inst, prop, value) {\n            if (Polymer.Path.matches(this.as, prop)) {\n              let idx = inst[this.itemsIndexAs];\n              if (prop == this.as) {\n                this.items[idx] = value;\n              }\n              let path = Polymer.Path.translate(this.as, 'items.' + idx, prop);\n              this.notifyPath(path, value);\n            }\n          }\n        });\n      }\n      return true;\n    }\n\n    __getMethodHost() {\n      // Technically this should be the owner of the outermost template.\n      // In shadow dom, this is always getRootNode().host, but we can\n      // approximate this via cooperation with our dataHost always setting\n      // `_methodHost` as long as there were bindings (or id's) on this\n      // instance causing it to get a dataHost.\n      return this.__dataHost._methodHost || this.__dataHost;\n    }\n\n    __sortChanged(sort) {\n      let methodHost = this.__getMethodHost();\n      this.__sortFn = sort && (typeof sort == 'function' ? sort :\n        function() { return methodHost[sort].apply(methodHost, arguments); });\n      this.__needFullRefresh = true;\n      if (this.items) {\n        this.__debounceRender(this.__render);\n      }\n    }\n\n    __filterChanged(filter) {\n      let methodHost = this.__getMethodHost();\n      this.__filterFn = filter && (typeof filter == 'function' ? filter :\n        function() { return methodHost[filter].apply(methodHost, arguments); });\n      this.__needFullRefresh = true;\n      if (this.items) {\n        this.__debounceRender(this.__render);\n      }\n    }\n\n    __computeFrameTime(rate) {\n      return Math.ceil(1000/rate);\n    }\n\n    __initializeChunking() {\n      if (this.initialCount) {\n        this.__limit = this.initialCount;\n        this.__chunkCount = this.initialCount;\n        this.__lastChunkTime = performance.now();\n      }\n    }\n\n    __tryRenderChunk() {\n      // Debounced so that multiple calls through `_render` between animation\n      // frames only queue one new rAF (e.g. array mutation & chunked render)\n      if (this.items && this.__limit < this.items.length) {\n        this.__debounceRender(this.__requestRenderChunk);\n      }\n    }\n\n    __requestRenderChunk() {\n      requestAnimationFrame(()=>this.__renderChunk());\n    }\n\n    __renderChunk() {\n      // Simple auto chunkSize throttling algorithm based on feedback loop:\n      // measure actual time between frames and scale chunk count by ratio\n      // of target/actual frame time\n      let currChunkTime = performance.now();\n      let ratio = this._targetFrameTime / (currChunkTime - this.__lastChunkTime);\n      this.__chunkCount = Math.round(this.__chunkCount * ratio) || 1;\n      this.__limit += this.__chunkCount;\n      this.__lastChunkTime = currChunkTime;\n      this.__debounceRender(this.__render);\n    }\n\n    __observeChanged() {\n      this.__observePaths = this.observe &&\n        this.observe.replace('.*', '.').split(' ');\n    }\n\n    __itemsChanged(change) {\n      if (this.items && !Array.isArray(this.items)) {\n        console.warn('dom-repeat expected array for `items`, found', this.items);\n      }\n      // If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the\n      // path to that instance synchronously (retuns false for non-item paths)\n      if (!this.__handleItemPath(change.path, change.value)) {\n        // Otherwise, the array was reset ('items') or spliced ('items.splices'),\n        // so queue a full refresh\n        this.__needFullRefresh = true;\n        this.__initializeChunking();\n        this.__debounceRender(this.__render);\n      }\n    }\n\n    __handleObservedPaths(path) {\n      if (this.__observePaths) {\n        path = path.substring(path.indexOf('.') + 1);\n        let paths = this.__observePaths;\n        for (let i=0; i<paths.length; i++) {\n          if (path.indexOf(paths[i]) === 0) {\n            this.__needFullRefresh = true;\n            this.__debounceRender(this.__render, this.delay);\n            return true;\n          }\n        }\n      }\n    }\n\n    /**\n     * @param {function()} fn Function to debounce.\n     * @param {number=} delay Delay in ms to debounce by.\n     */\n    __debounceRender(fn, delay) {\n      this.__renderDebouncer = Polymer.Debouncer.debounce(\n            this.__renderDebouncer\n          , delay > 0 ? Polymer.Async.timeOut.after(delay) : Polymer.Async.microTask\n          , fn.bind(this));\n      Polymer.enqueueDebouncer(this.__renderDebouncer);\n    }\n\n    /**\n     * Forces the element to render its content. Normally rendering is\n     * asynchronous to a provoking change. This is done for efficiency so\n     * that multiple changes trigger only a single render. The render method\n     * should be called if, for example, template rendering is required to\n     * validate application state.\n     */\n    render() {\n      // Queue this repeater, then flush all in order\n      this.__needFullRefresh = true;\n      this.__debounceRender(this.__render);\n      Polymer.flush();\n    }\n\n    __render() {\n      if (!this.__ensureTemplatized()) {\n        // No template found yet\n        return;\n      }\n      this.__applyFullRefresh();\n      // Reset the pool\n      // TODO(kschaaf): Reuse pool across turns and nested templates\n      // Now that objects/arrays are re-evaluated when set, we can safely\n      // reuse pooled instances across turns, however we still need to decide\n      // semantics regarding how long to hold, how many to hold, etc.\n      this.__pool.length = 0;\n      // Set rendered item count\n      this._setRenderedItemCount(this.__instances.length);\n      // Notify users\n      this.dispatchEvent(new CustomEvent('dom-change', {\n        bubbles: true,\n        composed: true\n      }));\n      // Check to see if we need to render more items\n      this.__tryRenderChunk();\n    }\n\n    __applyFullRefresh() {\n      const items = this.items || [];\n      let isntIdxToItemsIdx = new Array(items.length);\n      for (let i=0; i<items.length; i++) {\n        isntIdxToItemsIdx[i] = i;\n      }\n      // Apply user filter\n      if (this.__filterFn) {\n        isntIdxToItemsIdx = isntIdxToItemsIdx.filter((i, idx, array) =>\n          this.__filterFn(items[i], idx, array));\n      }\n      // Apply user sort\n      if (this.__sortFn) {\n        isntIdxToItemsIdx.sort((a, b) => this.__sortFn(items[a], items[b]));\n      }\n      // items->inst map kept for item path forwarding\n      const itemsIdxToInstIdx = this.__itemsIdxToInstIdx = {};\n      let instIdx = 0;\n      // Generate instances and assign items\n      const limit = Math.min(isntIdxToItemsIdx.length, this.__limit);\n      for (; instIdx<limit; instIdx++) {\n        let inst = this.__instances[instIdx];\n        let itemIdx = isntIdxToItemsIdx[instIdx];\n        let item = items[itemIdx];\n        itemsIdxToInstIdx[itemIdx] = instIdx;\n        if (inst && instIdx < this.__limit) {\n          inst._setPendingProperty(this.as, item);\n          inst._setPendingProperty(this.indexAs, instIdx);\n          inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n          inst._flushProperties();\n        } else {\n          this.__insertInstance(item, instIdx, itemIdx);\n        }\n      }\n      // Remove any extra instances from previous state\n      for (let i=this.__instances.length-1; i>=instIdx; i--) {\n        this.__detachAndRemoveInstance(i);\n      }\n    }\n\n    __detachInstance(idx) {\n      let inst = this.__instances[idx];\n      for (let i=0; i<inst.children.length; i++) {\n        let el = inst.children[i];\n        inst.root.appendChild(el);\n      }\n      return inst;\n    }\n\n    __attachInstance(idx, parent) {\n      let inst = this.__instances[idx];\n      parent.insertBefore(inst.root, this);\n    }\n\n    __detachAndRemoveInstance(idx) {\n      let inst = this.__detachInstance(idx);\n      if (inst) {\n        this.__pool.push(inst);\n      }\n      this.__instances.splice(idx, 1);\n    }\n\n    __stampInstance(item, instIdx, itemIdx) {\n      let model = {};\n      model[this.as] = item;\n      model[this.indexAs] = instIdx;\n      model[this.itemsIndexAs] = itemIdx;\n      return new this.__ctor(model);\n    }\n\n    __insertInstance(item, instIdx, itemIdx) {\n      let inst = this.__pool.pop();\n      if (inst) {\n        // TODO(kschaaf): If the pool is shared across turns, hostProps\n        // need to be re-set to reused instances in addition to item\n        inst._setPendingProperty(this.as, item);\n        inst._setPendingProperty(this.indexAs, instIdx);\n        inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n        inst._flushProperties();\n      } else {\n        inst = this.__stampInstance(item, instIdx, itemIdx);\n      }\n      let beforeRow = this.__instances[instIdx + 1];\n      let beforeNode = beforeRow ? beforeRow.children[0] : this;\n      this.parentNode.insertBefore(inst.root, beforeNode);\n      this.__instances[instIdx] = inst;\n      return inst;\n    }\n\n    // Implements extension point from Templatize mixin\n    _showHideChildren(hidden) {\n      for (let i=0; i<this.__instances.length; i++) {\n        this.__instances[i]._showHideChildren(hidden);\n      }\n    }\n\n    // Called as a side effect of a host items.<key>.<path> path change,\n    // responsible for notifying item.<path> changes to inst for key\n    __handleItemPath(path, value) {\n      let itemsPath = path.slice(6); // 'items.'.length == 6\n      let dot = itemsPath.indexOf('.');\n      let itemsIdx = dot < 0 ? itemsPath : itemsPath.substring(0, dot);\n      // If path was index into array...\n      if (itemsIdx == parseInt(itemsIdx, 10)) {\n        let itemSubPath = dot < 0 ? '' : itemsPath.substring(dot+1);\n        // See if the item subpath should trigger a full refresh...\n        if (!this.__handleObservedPaths(itemSubPath)) {\n          // If not, forward to the instance for that index\n          let instIdx = this.__itemsIdxToInstIdx[itemsIdx];\n          let inst = this.__instances[instIdx];\n          if (inst) {\n            let itemPath = this.as + (itemSubPath ? '.' + itemSubPath : '');\n            // This is effectively `notifyPath`, but avoids some of the overhead\n            // of the public API\n            inst._setPendingPropertyOrPath(itemPath, value, false, true);\n            inst._flushProperties();\n          }\n        }\n        return true;\n      }\n    }\n\n    /**\n     * Returns the item associated with a given element stamped by\n     * this `dom-repeat`.\n     *\n     * Note, to modify sub-properties of the item,\n     * `modelForElement(el).set('item.<sub-prop>', value)`\n     * should be used.\n     *\n     * @param {HTMLElement} el Element for which to return the item.\n     * @return {*} Item associated with the element.\n     */\n    itemForElement(el) {\n      let instance = this.modelForElement(el);\n      return instance && instance[this.as];\n    }\n\n    /**\n     * Returns the inst index for a given element stamped by this `dom-repeat`.\n     * If `sort` is provided, the index will reflect the sorted order (rather\n     * than the original array order).\n     *\n     * @param {HTMLElement} el Element for which to return the index.\n     * @return {*} Row index associated with the element (note this may\n     *   not correspond to the array index if a user `sort` is applied).\n     */\n    indexForElement(el) {\n      let instance = this.modelForElement(el);\n      return instance && instance[this.indexAs];\n    }\n\n    /**\n     * Returns the template \"model\" associated with a given element, which\n     * serves as the binding scope for the template instance the element is\n     * contained in. A template model is an instance of `Polymer.Base`, and\n     * should be used to manipulate data associated with this template instance.\n     *\n     * Example:\n     *\n     *   let model = modelForElement(el);\n     *   if (model.index < 10) {\n     *     model.set('item.checked', true);\n     *   }\n     *\n     * @param {HTMLElement} el Element for which to return a template model.\n     * @return {TemplateInstanceBase} Model representing the binding scope for\n     *   the element.\n     */\n    modelForElement(el) {\n      return Polymer.Templatize.modelForElement(this.template, el);\n    }\n\n  }\n\n  customElements.define(DomRepeat.is, DomRepeat);\n\n  Polymer.DomRepeat = DomRepeat;\n\n})();\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/elements/dom-repeat.html","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\nrequire('../utils/case-map.html');\n\nrequire('../utils/style-gather.html');\n\nrequire('../utils/resolve-url.html');\n\nrequire('../elements/dom-module.html');\n\nrequire('./property-effects.html');\n\n\n(function() {\n  'use strict';\n  /**\n   * @typedef Object<string, {\n   *   value: *,\n   *   type: (Function | undefined),\n   *   readOnly: (boolean | undefined),\n   *   computed: (string | undefined),\n   *   reflectToAttribute: (boolean | undefined),\n   *   notify: (boolean | undefined),\n   *   observer: (string | undefined)\n   * }>)\n   */\n  let PolymerElementProperties; // eslint-disable-line no-unused-vars\n\n  /** @record */\n  let PolymerElementConstructor = function(){}; // eslint-disable-line no-unused-vars\n  /** @type {(string | undefined)} */\n  PolymerElementConstructor.is;\n  /** @type {(string | undefined)} */\n  PolymerElementConstructor.extends;\n  /** @type {(!PolymerElementProperties | undefined)} */\n  PolymerElementConstructor.properties;\n  /** @type {(!Array<string> | undefined)} */\n  PolymerElementConstructor.observers;\n  /** @type {(!HTMLTemplateElement | string | undefined)} */\n  PolymerElementConstructor.template;\n\n  /**\n   * Element class mixin that provides the core API for Polymer's meta-programming\n   * features including template stamping, data-binding, attribute deserialization,\n   * and property change observation.\n   *\n   * Subclassers may provide the following static getters to return metadata\n   * used to configure Polymer's features for the class:\n   *\n   * - `static get is()`: When the template is provided via a `dom-module`,\n   *   users should return the `dom-module` id from a static `is` getter.  If\n   *   no template is needed or the template is provided directly via the\n   *   `template` getter, there is no need to define `is` for the element.\n   *\n   * - `static get template()`: Users may provide the template directly (as\n   *   opposed to via `dom-module`) by implementing a static `template` getter.\n   *   The getter may return an `HTMLTemplateElement` or a string, which will\n   *   automatically be parsed into a template.\n   *\n   * - `static get properties()`: Should return an object describing\n   *   property-related metadata used by Polymer features (key: property name\n   *   value: object containing property metadata). Valid keys in per-property\n   *   metadata include:\n   *   - `type` (String|Number|Object|Array|...): Used by\n   *     `attributeChangedCallback` to determine how string-based attributes\n   *     are deserialized to JavaScript property values.\n   *   - `notify` (boolean): Causes a change in the property to fire a\n   *     non-bubbling event called `<property>-changed`. Elements that have\n   *     enabled two-way binding to the property use this event to observe changes.\n   *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n   *     To set a read-only property, use the private setter method\n   *     `_setProperty(property, value)`.\n   *   - `observer` (string): Observer method name that will be called when\n   *     the property changes. The arguments of the method are\n   *     `(value, previousValue)`.\n   *   - `computed` (string): String describing method and dependent properties\n   *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n   *     Computed properties are read-only by default and can only be changed\n   *     via the return value of the computing method.\n   *\n   * - `static get observers()`: Array of strings describing multi-property\n   *   observer methods and their dependent properties (e.g.\n   *   `'observeABC(a, b, c)'`).\n   *\n   * The base class provides default implementations for the following standard\n   * custom element lifecycle callbacks; users may override these, but should\n   * call the super method to ensure\n   * - `constructor`: Run when the element is created or upgraded\n   * - `connectedCallback`: Run each time the element is connected to the\n   *   document\n   * - `disconnectedCallback`: Run each time the element is disconnected from\n   *   the document\n   * - `attributeChangedCallback`: Run each time an attribute in\n   *   `observedAttributes` is set or removed (note: this element's default\n   *   `observedAttributes` implementation will automatically return an array\n   *   of dash-cased attributes based on `properties`)\n   *\n   * @polymerMixin\n   * @mixes Polymer.PropertyEffects\n   * @memberof Polymer\n   * @property rootPath {string} Set to the value of `Polymer.rootPath`,\n   *   which defaults to the main document path\n   * @property importPath {string} Set to the value of the class's static\n   *   `importPath` property, which defaults to the path of this element's\n   *   `dom-module` (when `is` is used), but can be overridden for other\n   *   import strategies.\n   * @summary Element class mixin that provides the core API for Polymer's\n   * meta-programming features.\n   */\n  Polymer.ElementMixin = Polymer.dedupingMixin(base => {\n\n    /**\n     * @constructor\n     * @extends {base}\n     * @implements {Polymer_PropertyEffects}\n     */\n    const polymerElementBase = Polymer.PropertyEffects(base);\n\n    let caseMap = Polymer.CaseMap;\n\n    /**\n     * Returns the `properties` object specifically on `klass`. Use for:\n     * (1) super chain mixes togther to make `propertiesForClass` which is\n     * then used to make `observedAttributes`.\n     * (2) properties effects and observers are created from it at `finalize` time.\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {Object} Object containing own properties for this class\n     * @private\n     */\n    function ownPropertiesForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__ownProperties', klass))) {\n        klass.__ownProperties =\n          klass.hasOwnProperty(JSCompiler_renameProperty('properties', klass)) ?\n          klass.properties : {};\n      }\n      return klass.__ownProperties;\n    }\n\n    /**\n     * Returns the `observers` array specifically on `klass`. Use for\n     * setting up observers.\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {Array} Array containing own observers for this class\n     * @private\n     */\n    function ownObserversForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__ownObservers', klass))) {\n        klass.__ownObservers =\n          klass.hasOwnProperty(JSCompiler_renameProperty('observers', klass)) ?\n          klass.observers : [];\n      }\n      return klass.__ownObservers;\n    }\n\n    /**\n     * Mixes `props` into `flattenedProps` but upgrades shorthand type\n     * syntax to { type: Type}.\n     *\n     * @param {Object} flattenedProps Bag to collect flattened properties into\n     * @param {Object} props Bag of properties to add to `flattenedProps`\n     * @return {Objecg} The input `flattenedProps` bag\n     * @private\n     */\n    function flattenProperties(flattenedProps, props) {\n      for (let p in props) {\n        let o = props[p];\n        if (typeof o == 'function') {\n          o = { type: o };\n        }\n        flattenedProps[p] = o;\n      }\n      return flattenedProps;\n    }\n\n    /**\n     * Returns a flattened list of properties mixed together from the chain of all\n     * constructor's `config.properties`. This list is used to create\n     * (1) observedAttributes,\n     * (2) class property default values\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {PolymerElementProperties} Flattened properties for this class\n     * @private\n     */\n    function propertiesForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__classProperties', klass))) {\n        klass.__classProperties =\n        flattenProperties({}, ownPropertiesForClass(klass));\n        let superCtor = Object.getPrototypeOf(klass.prototype).constructor;\n        if (superCtor.prototype instanceof PolymerElement) {\n          klass.__classProperties = Object.assign(\n            Object.create(propertiesForClass(superCtor)),\n            klass.__classProperties);\n        }\n      }\n      return klass.__classProperties;\n    }\n\n    /**\n     * Returns a list of properties with default values.\n     * This list is created as an optimization since it is a subset of\n     * the list returned from `propertiesForClass`.\n     * This list is used in `_initializeProperties` to set property defaults.\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {PolymerElementProperties} Flattened properties for this class\n     *   that have default values\n     * @private\n     */\n    function propertyDefaultsForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__classPropertyDefaults', klass))) {\n        klass.__classPropertyDefaults = null;\n        let props = propertiesForClass(klass);\n        for (let p in props) {\n          let info = props[p];\n          if ('value' in info) {\n            klass.__classPropertyDefaults = klass.__classPropertyDefaults || {};\n            klass.__classPropertyDefaults[p] = info;\n          }\n        }\n      }\n      return klass.__classPropertyDefaults;\n    }\n\n    /**\n     * Returns true if a `klass` has finalized. Called in `ElementClass.finalize()`\n     * @param {HTMLElement} klass Element class\n     * @return {boolean} True if all metaprogramming for this class has been\n     *   completed\n     * @private\n     */\n    function hasClassFinalized(klass) {\n      return klass.hasOwnProperty(JSCompiler_renameProperty('__finalized', klass));\n    }\n\n    /**\n     * Called by `ElementClass.finalize()`. Ensures this `klass` and\n     * *all superclasses* are finalized by traversing the prototype chain\n     * and calling `klass.finalize()`.\n     *\n     * @param {HTMLElement} klass Element class\n     * @private\n     */\n    function finalizeClassAndSuper(klass) {\n      let proto = klass.prototype;\n      let superCtor = Object.getPrototypeOf(proto).constructor;\n      if (superCtor.prototype instanceof PolymerElement) {\n        superCtor.finalize();\n      }\n      finalizeClass(klass);\n    }\n\n    /**\n     * Configures a `klass` based on a staic `klass.config` object and\n     * a `template`. This includes creating accessors and effects\n     * for properties in `config` and the `template` as well as preparing the\n     * `template` for stamping.\n     *\n     * @param {HTMLElement} klass Element class\n     * @private\n     */\n    function finalizeClass(klass) {\n      klass.__finalized = true;\n      let proto = klass.prototype;\n      if (klass.hasOwnProperty(\n        JSCompiler_renameProperty('is', klass)) && klass.is) {\n        Polymer.telemetry.register(proto);\n      }\n      let props = ownPropertiesForClass(klass);\n      if (props) {\n        finalizeProperties(proto, props);\n      }\n      let observers = ownObserversForClass(klass);\n      if (observers) {\n        finalizeObservers(proto, observers, props);\n      }\n      // note: create \"working\" template that is finalized at instance time\n      let template = klass.template;\n      if (template) {\n        if (typeof template === 'string') {\n          let t = document.createElement('template');\n          t.innerHTML = template;\n          template = t;\n        } else {\n          template = template.cloneNode(true);\n        }\n        proto._template = template;\n      }\n    }\n\n    /**\n     * Configures a `proto` based on a `properties` object.\n     * Leverages `PropertyEffects` to create property accessors and effects\n     * supporting, observers, reflecting to attributes, change notification,\n     * computed properties, and read only properties.\n     * @param {HTMLElement} proto Element class prototype to add accessors\n     *    and effects to\n     * @param {Object} properties Flattened bag of property descriptors for\n     *    this class\n     * @private\n     */\n    function finalizeProperties(proto, properties) {\n      for (let p in properties) {\n        createPropertyFromConfig(proto, p, properties[p], properties);\n      }\n    }\n\n    /**\n     * Configures a `proto` based on a `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {HTMLElement} proto Element class prototype to add accessors\n     *   and effects to\n     * @param {Object} observers Flattened array of observer descriptors for\n     *   this class\n     * @param {Object} dynamicFns Object containing keys for any properties\n     *   that are functions and should trigger the effect when the function\n     *   reference is changed\n     * @private\n     */\n    function finalizeObservers(proto, observers, dynamicFns) {\n      for (let i=0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicFns);\n      }\n    }\n\n    /**\n     * Creates effects for a property.\n     *\n     * Note, once a property has been set to\n     * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n     * these values may not be changed. For example, a subclass cannot\n     * alter these settings. However, additional `observers` may be added\n     * by subclasses.\n     *\n     * The info object should may contain property metadata as follows:\n     *\n     * * `type`: {function} type to which an attribute matching the property\n     * is deserialized. Note the property is camel-cased from a dash-cased\n     * attribute. For example, 'foo-bar' attribute is dersialized to a\n     * property named 'fooBar'.\n     *\n     * * `readOnly`: {boolean} creates a readOnly property and\n     * makes a private setter for the private of the form '_setFoo' for a\n     * property 'foo',\n     *\n     * * `computed`: {string} creates a computed property. A computed property\n     * also automatically is set to `readOnly: true`. The value is calculated\n     * by running a method and arguments parsed from the given string. For\n     * example 'compute(foo)' will compute a given property when the\n     * 'foo' property changes by executing the 'compute' method. This method\n     * must return the computed value.\n     *\n     * * `reflectToAttriute`: {boolean} If true, the property value is reflected\n     * to an attribute of the same name. Note, the attribute is dash-cased\n     * so a property named 'fooBar' is reflected as 'foo-bar'.\n     *\n     * * `notify`: {boolean} sends a non-bubbling notification event when\n     * the property changes. For example, a property named 'foo' sends an\n     * event named 'foo-changed' with `event.detail` set to the value of\n     * the property.\n     *\n     * * observer: {string} name of a method that runs when the property\n     * changes. The arguments of the method are (value, previousValue).\n     *\n     * Note: Users may want control over modifying property\n     * effects via subclassing. For example, a user might want to make a\n     * reflectToAttribute property not do so in a subclass. We've chosen to\n     * disable this because it leads to additional complication.\n     * For example, a readOnly effect generates a special setter. If a subclass\n     * disables the effect, the setter would fail unexpectedly.\n     * Based on feedback, we may want to try to make effects more malleable\n     * and/or provide an advanced api for manipulating them.\n     * Also consider adding warnings when an effect cannot be changed.\n     *\n     * @param {HTMLElement} proto Element class prototype to add accessors\n     *   and effects to\n     * @param {string} name Name of the property.\n     * @param {Object} info Info object from which to create property effects.\n     * Supported keys:\n     * @param {Object} allProps Flattened map of all properties defined in this\n     *   element (including inherited properties)\n     * @private\n     */\n    function createPropertyFromConfig(proto, name, info, allProps) {\n      // computed forces readOnly...\n      if (info.computed) {\n        info.readOnly = true;\n      }\n      // Note, since all computed properties are readOnly, this prevents\n      // adding additional computed property effects (which leads to a confusing\n      // setup where multiple triggers for setting a property)\n      // While we do have `hasComputedEffect` this is set on the property's\n      // dependencies rather than itself.\n      if (info.computed  && !proto._hasReadOnlyEffect(name)) {\n        proto._createComputedProperty(name, info.computed, allProps);\n      }\n      if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n        proto._createReadOnlyProperty(name, !info.computed);\n      }\n      if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n        proto._createReflectedProperty(name);\n      }\n      if (info.notify && !proto._hasNotifyEffect(name)) {\n        proto._createNotifyingProperty(name);\n      }\n      // always add observer\n      if (info.observer) {\n        proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n      }\n    }\n\n    /**\n     * Configures an element `proto` to function with a given `template`.\n     * The element name `is` and extends `ext` must be specified for ShadyCSS\n     * style scoping.\n     *\n     * @param {HTMLElement} proto Element class prototype to add accessors\n     *   and effects to\n     * @param {HTMLTemplateElement} template Template to process and bind\n     * @param {string} baseURI URL against which to resolve urls in\n     *   style element cssText\n     * @param {string} is Tag name (or type extension name) for this element\n     * @param {string=} ext For type extensions, the tag name that was extended\n     * @private\n     */\n    function finalizeTemplate(proto, template, baseURI, is, ext) {\n      // support `include=\"module-name\"`\n      let cssText =\n        Polymer.StyleGather.cssFromTemplate(template, baseURI) +\n        Polymer.StyleGather.cssFromModuleImports(is);\n      if (cssText) {\n        let style = document.createElement('style');\n        style.textContent = cssText;\n        template.content.insertBefore(style, template.content.firstChild);\n      }\n      if (window.ShadyCSS) {\n        window.ShadyCSS.prepareTemplate(template, is, ext);\n      }\n      proto._bindTemplate(template);\n    }\n\n    /**\n     * @polymerMixinClass\n     * @unrestricted\n     * @implements {Polymer_ElementMixin}\n     */\n    class PolymerElement extends polymerElementBase {\n\n      /**\n       * Standard Custom Elements V1 API.  The default implementation returns\n       * a list of dash-cased attributes based on a flattening of all properties\n       * declared in `static get properties()` for this element and any\n       * superclasses.\n       *\n       * @return {Array} Observed attribute list\n       */\n      static get observedAttributes() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n          let list = [];\n          let properties = propertiesForClass(this);\n          for (let prop in properties) {\n            list.push(Polymer.CaseMap.camelToDashCase(prop));\n          }\n          this.__observedAttributes = list;\n        }\n        return this.__observedAttributes;\n      }\n\n      /**\n       * Called automatically when the first element instance is created to\n       * ensure that class finalization work has been completed.\n       * May be called by users to eagerly perform class finalization work\n       * prior to the creation of the first element instance.\n       *\n       * Class finalization work generally includes meta-programming such as\n       * creating property accessors and any property effect metadata needed for\n       * the features used.\n       *\n       * @public\n       */\n      static finalize() {\n        if (!hasClassFinalized(this)) {\n          finalizeClassAndSuper(this);\n        }\n      }\n\n      /**\n       * Returns the template that will be stamped into this element's shadow root.\n       *\n       * If a `static get is()` getter is defined, the default implementation\n       * will return the first `<template>` in a `dom-module` whose `id`\n       * matches this element's `is`.\n       *\n       * Users may override this getter to return an arbitrary template\n       * (in which case the `is` getter is unnecessary). The template returned\n       * may be either an `HTMLTemplateElement` or a string that will be\n       * automatically parsed into a template.\n       *\n       * Note that when subclassing, if the super class overrode the default\n       * implementation and the subclass would like to provide an alternate\n       * template via a `dom-module`, it should override this getter and\n       * return `Polymer.DomModule.import(this.is, 'template')`.\n       *\n       * If a subclass would like to modify the super class template, it should\n       * clone it rather than modify it in place.  If the getter does expensive\n       * work such as cloning/modifying a template, it should memoize the\n       * template for maximum performance:\n       *\n       *   let memoizedTemplate;\n       *   class MySubClass extends MySuperClass {\n       *     static get template() {\n       *       if (!memoizedTemplate) {\n       *         memoizedTemplate = super.template.cloneNode(true);\n       *         let subContent = document.createElement('div');\n       *         subContent.textContent = 'This came from MySubClass';\n       *         memoizedTemplate.content.appendChild(subContent);\n       *       }\n       *       return memoizedTemplate;\n       *     }\n       *   }\n       *\n       * @return {HTMLTemplateElement|string} Template to be stamped\n       */\n      static get template() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n          this._template = Polymer.DomModule.import(this.is, 'template') ||\n            // note: implemented so a subclass can retrieve the super\n            // template; call the super impl this way so that `this` points\n            // to the superclass.\n            Object.getPrototypeOf(this.prototype).constructor.template;\n        }\n        return this._template;\n      }\n\n      /**\n       * Path matching the url from which the element was imported.\n       * This path is used to resolve url's in template style cssText.\n       * The `importPath` property is also set on element instances and can be\n       * used to create bindings relative to the import path.\n       * Defaults to the path matching the url containing a `dom-module` element\n       * matching this element's static `is` property.\n       * Note, this path should contain a trailing `/`.\n       *\n       * @return {string} The import path for this element class\n       */\n      static get importPath() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n            const module = Polymer.DomModule.import(this.is);\n            this._importPath = module ? module.assetpath : '' ||\n            Object.getPrototypeOf(this.prototype).constructor.importPath;\n        }\n        return this._importPath;\n      }\n\n      /**\n       * Overrides the default `Polymer.PropertyAccessors` to ensure class\n       * metaprogramming related to property accessors and effects has\n       * completed (calls `finalize`).\n       *\n       * It also initializes any property defaults provided via `value` in\n       * `properties` metadata.\n       *\n       * @override\n       */\n      _initializeProperties() {\n        Polymer.telemetry.instanceCount++;\n        this.constructor.finalize();\n        const importPath = this.constructor.importPath;\n        // note: finalize template when we have access to `localName` to\n        // avoid dependence on `is` for polyfilling styling.\n        if (this._template && !this._template.__polymerFinalized) {\n          this._template.__polymerFinalized = true;\n          const baseURI =\n            importPath ? Polymer.ResolveUrl.resolveUrl(importPath) : '';\n          finalizeTemplate(this.__proto__, this._template, baseURI,\n            this.localName);\n        }\n        super._initializeProperties();\n        // set path defaults\n        this.rootPath = Polymer.rootPath;\n        this.importPath = importPath;\n        // apply property defaults...\n        let p$ = propertyDefaultsForClass(this.constructor);\n        if (!p$) {\n          return;\n        }\n        for (let p in p$) {\n          let info = p$[p];\n          // Don't set default value if there is already an own property, which\n          // happens when a `properties` property with default but no effects had\n          // a property set (e.g. bound) by its host before upgrade\n          if (!this.hasOwnProperty(p)) {\n            let value = typeof info.value == 'function' ?\n              info.value.call(this) :\n              info.value;\n            // Set via `_setProperty` if there is an accessor, to enable\n            // initializing readOnly property defaults\n            if (this._hasAccessor(p)) {\n              this._setPendingProperty(p, value, true);\n            } else {\n              this[p] = value;\n            }\n          }\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `connectedCallback`.\n       *\n       * The default implementation enables the property effects system and\n       * flushes any pending properties, and updates shimmed CSS properties\n       * when using the ShadyCSS scoping/custom properties polyfill.\n       *\n       * @override\n       */\n      connectedCallback() {\n        if (window.ShadyCSS && this._template) {\n          window.ShadyCSS.styleElement(this);\n        }\n        this._enableProperties();\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `disconnectedCallback`.\n       *\n       * @override\n       */\n      disconnectedCallback() {}\n\n      /**\n       * Stamps the element template.\n       *\n       * @override\n       */\n      ready() {\n        if (this._template) {\n          this.root = this._stampTemplate(this._template);\n          this.$ = this.root.$;\n        }\n        super.ready();\n      }\n\n      /**\n       * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n       * element dom by calling `_attachDom` with the dom stamped from the\n       * element's template via `_stampTemplate`. Note that this allows\n       * client dom to be attached to the element prior to any observers\n       * running.\n       *\n       * @override\n       */\n      _readyClients() {\n        if (this._template) {\n          this.root = this._attachDom(this.root);\n        }\n        // The super._readyClients here sets the clients initialized flag.\n        // We must wait to do this until after client dom is created/attached\n        // so that this flag can be checked to prevent notifications fired\n        // during this process from being handled before clients are ready.\n        super._readyClients();\n      }\n\n\n      /**\n       * Attaches an element's stamped dom to itself. By default,\n       * this method creates a `shadowRoot` and adds the dom to it.\n       * However, this method may be overridden to allow an element\n       * to put its dom in another location.\n       *\n       * @throws {Error}\n       * @suppress {missingReturn}\n       * @param {NodeList} dom to attach to the element.\n       * @return {Node} node to which the dom has been attached.\n       */\n      _attachDom(dom) {\n        if (this.attachShadow) {\n          if (dom) {\n            if (!this.shadowRoot) {\n              this.attachShadow({mode: 'open'});\n            }\n            this.shadowRoot.appendChild(dom);\n            return this.shadowRoot;\n          }\n        } else {\n          throw new Error('ShadowDOM not available. ' +\n            // TODO(sorvell): move to compile-time conditional when supported\n          'Polymer.Element can create dom as children instead of in ' +\n          'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `attributeChangedCallback`.\n       *\n       * By default, attributes declared in `properties` metadata are\n       * deserialized using their `type` information to properties of the\n       * same name.  \"Dash-cased\" attributes are deserialzed to \"camelCase\"\n       * properties.\n       *\n       * @override\n       */\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          let property = caseMap.dashToCamelCase(name);\n          let type = propertiesForClass(this.constructor)[property].type;\n          if (!this._hasReadOnlyEffect(property)) {\n            this._attributeToProperty(name, value, type);\n          }\n        }\n      }\n\n      /**\n       * When using the ShadyCSS scoping and custom property shim, causes all\n       * shimmed styles in this element (and its subtree) to be updated\n       * based on current custom property values.\n       *\n       * The optional parameter overrides inline custom property styles with an\n       * object of properties where the keys are CSS properties, and the values\n       * are strings.\n       *\n       * Example: `this.updateStyles({'--color': 'blue'})`\n       *\n       * These properties are retained unless a value of `null` is set.\n       *\n       * @param {Object=} properties Bag of custom property key/values to\n       *   apply to this element.\n       */\n      updateStyles(properties) {\n        if (window.ShadyCSS) {\n          window.ShadyCSS.styleSubtree(this, properties);\n        }\n      }\n\n      /**\n       * Rewrites a given URL relative to a base URL. The base URL defaults to\n       * the original location of the document containing the `dom-module` for\n       * this element. This method will return the same URL before and after\n       * bundling.\n       *\n       * @param {string} url URL to resolve.\n       * @param {string=} base Optional base URL to resolve against, defaults\n       * to the element's `importPath`\n       * @return {string} Rewritten URL relative to base\n       */\n      resolveUrl(url, base) {\n        if (!base && this.importPath) {\n          base = Polymer.ResolveUrl.resolveUrl(this.importPath);\n        }\n        return Polymer.ResolveUrl.resolveUrl(url, base);\n      }\n\n      /**\n       * Overrides `PropertyAccessors` to add map of dynamic functions on\n       * template info, for consumption by `PropertyEffects` template binding\n       * code. This map determines which method templates should have accessors\n       * created for them.\n       *\n       * @override\n       */\n      static _parseTemplateContent(template, templateInfo, nodeInfo) {\n        templateInfo.dynamicFns = templateInfo.dynamicFns || propertiesForClass(this);\n        return super._parseTemplateContent(template, templateInfo, nodeInfo);\n      }\n\n    }\n\n    return PolymerElement;\n  });\n\n  /**\n   * Provides basic tracking of element definitions (registrations) and\n   * instance counts.\n   *\n   * @namespace\n   * @summary Provides basic tracking of element definitions (registrations) and\n   * instance counts.\n   */\n  Polymer.telemetry = {\n    /**\n     * Total number of Polymer element instances created.\n     * @type {number}\n     */\n    instanceCount: 0,\n    /**\n     * Array of Polymer element classes that have been finalized.\n     * @type {Array<Polymer.Element>}\n     */\n    registrations: [],\n    /**\n     * @param {HTMLElement} prototype Element prototype to log\n     * @private\n     */\n    _regLog: function(prototype) {\n      console.log('[' + prototype.is + ']: registered')\n    },\n    /**\n     * Registers a class prototype for telemetry purposes.\n     * @param {HTMLElement} prototype Element prototype to register\n     * @protected\n     */\n    register: function(prototype) {\n      this.registrations.push(prototype);\n      Polymer.log && this._regLog(prototype);\n    },\n    /**\n     * Logs all elements registered with an `is` to the console.\n     * @public\n     */\n    dumpRegistrations: function() {\n      this.registrations.forEach(this._regLog);\n    }\n  };\n\n  /**\n   * When using the ShadyCSS scoping and custom property shim, causes all\n   * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n   * to be updated based on current custom property values.\n   *\n   * The optional parameter overrides inline custom property styles with an\n   * object of properties where the keys are CSS properties, and the values\n   * are strings.\n   *\n   * Example: `Polymer.updateStyles({'--color': 'blue'})`\n   *\n   * These properties are retained unless a value of `null` is set.\n   *\n   * @param {Object=} props Bag of custom property key/values to\n   *   apply to the document.\n   */\n  Polymer.updateStyles = function(props) {\n    if (window.ShadyCSS) {\n      window.ShadyCSS.styleDocument(props);\n    }\n  };\n\n  /**\n   * Globally settable property that is automatically assigned to\n   * `Polymer.ElementMixin` instances, useful for binding in templates to\n   * make URL's relative to an application's root.  Defaults to the main\n   * document URL, but can be overridden by users.  It may be useful to set\n   * `Polymer.rootPath` to provide a stable application mount path when\n   * using client side routing.\n   *\n   * @memberof Polymer\n   */\n  Polymer.rootPath = Polymer.rootPath ||\n    Polymer.ResolveUrl.pathFromUrl(document.baseURI || window.location.href);\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/mixins/element-mixin.html","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\nrequire('../utils/case-map.html');\n\nrequire('../utils/async.html');\n\n\n(function() {\n\n  'use strict';\n\n  let caseMap = Polymer.CaseMap;\n\n  let microtask = Polymer.Async.microTask;\n\n  // Save map of native properties; this forms a blacklist or properties\n  // that won't have their values \"saved\" by `saveAccessorValue`, since\n  // reading from an HTMLElement accessor from the context of a prototype throws\n  const nativeProperties = {};\n  let proto = HTMLElement.prototype;\n  while (proto) {\n    let props = Object.getOwnPropertyNames(proto);\n    for (let i=0; i<props.length; i++) {\n      nativeProperties[props[i]] = true;\n    }\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  /**\n   * Used to save the value of a property that will be overridden with\n   * an accessor. If the `model` is a prototype, the values will be saved\n   * in `__dataProto`, and it's up to the user (or downstream mixin) to\n   * decide how/when to set these values back into the accessors.\n   * If `model` is already an instance (it has a `__data` property), then\n   * the value will be set as a pending property, meaning the user should\n   * call `_invalidateProperties` or `_flushProperties` to take effect\n   *\n   * @param {Object} model Prototype or instance\n   * @param {string} property Name of property\n   * @private\n   */\n  function saveAccessorValue(model, property) {\n    // Don't read/store value for any native properties since they could throw\n    if (!nativeProperties[property]) {\n      let value = model[property];\n      if (value !== undefined) {\n        if (model.__data) {\n          // Adding accessor to instance; update the property\n          // It is the user's responsibility to call _flushProperties\n          model._setPendingProperty(property, value);\n        } else {\n          // Adding accessor to proto; save proto's value for instance-time use\n          if (!model.__dataProto) {\n            model.__dataProto = {};\n          } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n            model.__dataProto = Object.create(model.__dataProto);\n          }\n          model.__dataProto[property] = value;\n        }\n      }\n    }\n  }\n\n  /**\n   * Element class mixin that provides basic meta-programming for creating one\n   * or more property accessors (getter/setter pair) that enqueue an async\n   * (batched) `_propertiesChanged` callback.\n   *\n   * For basic usage of this mixin, simply declare attributes to observe via\n   * the standard `static get observedAttributes()`, implement `_propertiesChanged`\n   * on the class, and then call `MyClass.createPropertiesForAttributes()` once\n   * on the class to generate property accessors for each observed attribute\n   * prior to instancing.  Last, call `this._flushProperties()` once to enable\n   * the accessors.\n   *\n   * Any `observedAttributes` will automatically be\n   * deserialized via `attributeChangedCallback` and set to the associated\n   * property using `dash-case`-to-`camelCase` convention.\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin for reacting to property changes from\n   *   generated property accessors.\n   */\n  Polymer.PropertyAccessors = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymerMixinClass\n     * @implements {Polymer_PropertyAccessors}\n     * @unrestricted\n     */\n    class PropertyAccessors extends superClass {\n\n      /**\n       * Generates property accessors for all attributes in the standard\n       * static `observedAttributes` array.\n       *\n       * Attribute names are mapped to property names using the `dash-case` to\n       * `camelCase` convention\n       *\n       */\n      static createPropertiesForAttributes() {\n        let a$ = this.observedAttributes;\n        for (let i=0; i < a$.length; i++) {\n          this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n        }\n      }\n\n      constructor() {\n        super();\n        this._initializeProperties();\n      }\n\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          this._attributeToProperty(name, value);\n        }\n      }\n\n      /**\n       * Initializes the local storage for property accessors.\n       *\n       * Provided as an override point for performing any setup work prior\n       * to initializing the property accessor system.\n       *\n       * @protected\n       */\n      _initializeProperties() {\n        this.__serializing = false;\n        this.__dataCounter = 0;\n        this.__dataEnabled = false;\n        this.__dataInitialized = false;\n        this.__dataInvalid = false;\n        // initialize data with prototype values saved when creating accessors\n        this.__data = {};\n        this.__dataPending = null;\n        this.__dataOld = null;\n        if (this.__dataProto) {\n          this._initializeProtoProperties(this.__dataProto);\n          this.__dataProto = null;\n        }\n        // Capture instance properties; these will be set into accessors\n        // during first flush. Don't set them here, since we want\n        // these to overwrite defaults/constructor assignments\n        for (let p in this.__dataHasAccessor) {\n          if (this.hasOwnProperty(p)) {\n            this.__dataInstanceProps = this.__dataInstanceProps || {};\n            this.__dataInstanceProps[p] = this[p];\n            delete this[p];\n          }\n        }\n      }\n\n      /**\n       * Called at instance time with bag of properties that were overwritten\n       * by accessors on the prototype when accessors were created.\n       *\n       * The default implementation sets these properties back into the\n       * setter at instance time.  This method is provided as an override\n       * point for customizing or providing more efficient initialization.\n       *\n       * @param {Object} props Bag of property values that were overwritten\n       *   when creating property accessors.\n       * @protected\n       */\n      _initializeProtoProperties(props) {\n        for (let p in props) {\n          this._setProperty(p, props[p]);\n        }\n      }\n\n      /**\n       * Called at ready time with bag of instance properties that overwrote\n       * accessors when the element upgraded.\n       *\n       * The default implementation sets these properties back into the\n       * setter at ready time.  This method is provided as an override\n       * point for customizing or providing more efficient initialization.\n       *\n       * @param {Object} props Bag of property values that were overwritten\n       *   when creating property accessors.\n       * @protected\n       */\n      _initializeInstanceProperties(props) {\n        Object.assign(this, props);\n      }\n\n      /**\n       * Ensures the element has the given attribute. If it does not,\n       * assigns the given value to the attribute.\n       *\n       *\n       * @param {string} attribute Name of attribute to ensure is set.\n       * @param {string} value of the attribute.\n       */\n      _ensureAttribute(attribute, value) {\n        if (!this.hasAttribute(attribute)) {\n          this._valueToNodeAttribute(this, value, attribute);\n        }\n      }\n\n      /**\n       * Deserializes an attribute to its associated property.\n       *\n       * This method calls the `_deserializeValue` method to convert the string to\n       * a typed value.\n       *\n       * @param {string} attribute Name of attribute to deserialize.\n       * @param {string} value of the attribute.\n       * @param {*} type type to deserialize to.\n       */\n      _attributeToProperty(attribute, value, type) {\n        // Don't deserialize back to property if currently reflecting\n        if (!this.__serializing) {\n          let property = caseMap.dashToCamelCase(attribute);\n          this[property] = this._deserializeValue(value, type);\n        }\n      }\n\n      /**\n       * Serializes a property to its associated attribute.\n       *\n       * @param {string} property Property name to reflect.\n       * @param {string=} attribute Attribute name to reflect.\n       * @param {*=} value Property value to refect.\n       */\n      _propertyToAttribute(property, attribute, value) {\n        this.__serializing = true;\n        value = (arguments.length < 3) ? this[property] : value;\n        this._valueToNodeAttribute(this, value,\n          attribute || caseMap.camelToDashCase(property));\n        this.__serializing = false;\n      }\n\n      /**\n       * Sets a typed value to an HTML attribute on a node.\n       *\n       * This method calls the `_serializeValue` method to convert the typed\n       * value to a string.  If the `_serializeValue` method returns `undefined`,\n       * the attribute will be removed (this is the default for boolean\n       * type `false`).\n       *\n       * @param {Element} node Element to set attribute to.\n       * @param {*} value Value to serialize.\n       * @param {string} attribute Attribute name to serialize to.\n       */\n      _valueToNodeAttribute(node, value, attribute) {\n        let str = this._serializeValue(value);\n        if (str === undefined) {\n          node.removeAttribute(attribute);\n        } else {\n          node.setAttribute(attribute, str);\n        }\n      }\n\n      /**\n       * Converts a typed JavaScript value to a string.\n       *\n       * This method is called by Polymer when setting JS property values to\n       * HTML attributes.  Users may override this method on Polymer element\n       * prototypes to provide serialization for custom types.\n       *\n       * @param {*} value Property value to serialize.\n       * @return {string | undefined} String serialized from the provided property value.\n       */\n      _serializeValue(value) {\n        /* eslint-disable no-fallthrough */\n        switch (typeof value) {\n          case 'boolean':\n            return value ? '' : undefined;\n\n          case 'object':\n            if (value instanceof Date) {\n              return value.toString();\n            } else if (value) {\n              try {\n                return JSON.stringify(value);\n              } catch(x) {\n                return '';\n              }\n            }\n\n          default:\n            return value != null ? value.toString() : undefined;\n        }\n      }\n\n      /**\n       * Converts a string to a typed JavaScript value.\n       *\n       * This method is called by Polymer when reading HTML attribute values to\n       * JS properties.  Users may override this method on Polymer element\n       * prototypes to provide deserialization for custom `type`s.  Note,\n       * the `type` argument is the value of the `type` field provided in the\n       * `properties` configuration object for a given property, and is\n       * by convention the constructor for the type to deserialize.\n       *\n       * Note: The return value of `undefined` is used as a sentinel value to\n       * indicate the attribute should be removed.\n       *\n       * @param {string} value Attribute value to deserialize.\n       * @param {*} type Type to deserialize the string to.\n       * @return {*} Typed value deserialized from the provided string.\n       */\n      _deserializeValue(value, type) {\n        /**\n         * @type {*}\n         */\n        let outValue;\n        switch (type) {\n          case Number:\n            outValue = Number(value);\n            break;\n\n          case Boolean:\n            outValue = (value !== null);\n            break;\n\n          case Object:\n            try {\n              outValue = JSON.parse(value);\n            } catch(x) {\n              // allow non-JSON literals like Strings and Numbers\n            }\n            break;\n\n          case Array:\n            try {\n              outValue = JSON.parse(value);\n            } catch(x) {\n              outValue = null;\n              console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n            }\n            break;\n\n          case Date:\n            outValue = new Date(value);\n            break;\n\n          case String:\n          default:\n            outValue = value;\n            break;\n        }\n\n        return outValue;\n      }\n      /* eslint-enable no-fallthrough */\n\n      /**\n       * Creates a setter/getter pair for the named property with its own\n       * local storage.  The getter returns the value in the local storage,\n       * and the setter calls `_setProperty`, which updates the local storage\n       * for the property and enqueues a `_propertiesChanged` callback.\n       *\n       * This method may be called on a prototype or an instance.  Calling\n       * this method may overwrite a property value that already exists on\n       * the prototype/instance by creating the accessor.  When calling on\n       * a prototype, any overwritten values are saved in `__dataProto`,\n       * and it is up to the subclasser to decide how/when to set those\n       * properties back into the accessor.  When calling on an instance,\n       * the overwritten value is set via `_setPendingProperty`, and the\n       * user should call `_invalidateProperties` or `_flushProperties`\n       * for the values to take effect.\n       *\n       * @param {string} property Name of the property\n       * @param {boolean=} readOnly When true, no setter is created; the\n       *   protected `_setProperty` function must be used to set the property\n       * @protected\n       */\n      _createPropertyAccessor(property, readOnly) {\n        if (!this.hasOwnProperty('__dataHasAccessor')) {\n          this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n        }\n        if (!this.__dataHasAccessor[property]) {\n          this.__dataHasAccessor[property] = true;\n          saveAccessorValue(this, property);\n          Object.defineProperty(this, property, {\n            get: function() {\n              return this.__data[property];\n            },\n            set: readOnly ? function() { } : function(value) {\n              this._setProperty(property, value);\n            }\n          });\n        }\n      }\n\n      /**\n       * Returns true if this library created an accessor for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if an accessor was created\n       */\n      _hasAccessor(property) {\n        return this.__dataHasAccessor && this.__dataHasAccessor[property];\n      }\n\n      /**\n       * Updates the local storage for a property (via `_setPendingProperty`)\n       * and enqueues a `_proeprtiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @protected\n       */\n      _setProperty(property, value) {\n        if (this._setPendingProperty(property, value)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Updates the local storage for a property, records the previous value,\n       * and adds it to the set of \"pending changes\" that will be passed to the\n       * `_propertiesChanged` callback.  This method does not enqueue the\n       * `_propertiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @return {boolean} Returns true if the property changed\n       * @protected\n       */\n      _setPendingProperty(property, value) {\n        let old = this.__data[property];\n        if (this._shouldPropertyChange(property, value, old)) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (!(property in this.__dataOld)) {\n            this.__dataOld[property] = old;\n          }\n          this.__data[property] = value;\n          this.__dataPending[property] = value;\n          return true;\n        }\n      }\n\n      /**\n       * Returns true if the specified property has a pending change.\n       *\n       * @param {string} prop Property name\n       * @return {boolean} True if property has a pending change\n       * @protected\n       */\n      _isPropertyPending(prop) {\n        return this.__dataPending && (prop in this.__dataPending);\n      }\n\n      /**\n       * Marks the properties as invalid, and enqueues an async\n       * `_propertiesChanged` callback.\n       *\n       * @protected\n       */\n      _invalidateProperties() {\n        if (!this.__dataInvalid && this.__dataInitialized) {\n          this.__dataInvalid = true;\n          microtask.run(() => {\n            if (this.__dataInvalid) {\n              this.__dataInvalid = false;\n              this._flushProperties();\n            }\n          });\n        }\n      }\n\n      /**\n       * Call to enable property accessor processing. Before this method is\n       * called accessor values will be set but side effects are\n       * queued. When called, any pending side effects occur immediately.\n       * For elements, generally `connectedCallback` is a normal spot to do so.\n       * It is safe to call this method multiple times as it only turns on\n       * property accessors once.\n       */\n      _enableProperties() {\n        if (!this.__dataEnabled) {\n          this.__dataEnabled = true;\n          if (this.__dataInstanceProps) {\n            this._initializeInstanceProperties(this.__dataInstanceProps);\n            this.__dataInstanceProps = null;\n          }\n          this.ready()\n        }\n      }\n\n      /**\n       * Calls the `_propertiesChanged` callback with the current set of\n       * pending changes (and old values recorded when pending changes were\n       * set), and resets the pending set of changes. Generally, this method\n       * should not be called in user code.\n       *\n       *\n       * @protected\n       */\n      _flushProperties() {\n        if (this.__dataPending) {\n          let changedProps = this.__dataPending;\n          this.__dataPending = null;\n          this.__dataCounter++;\n          this._propertiesChanged(this.__data, changedProps, this.__dataOld);\n          this.__dataCounter--;\n        }\n      }\n\n      /**\n       * Lifecycle callback called the first time properties are being flushed.\n       * Prior to `ready`, all property sets through accessors are queued and\n       * their effects are flushed after this method returns.\n       *\n       * Users may override this function to implement behavior that is\n       * dependent on the element having its properties initialized, e.g.\n       * from defaults (initialized from `constructor`, `_initializeProperties`),\n       * `attributeChangedCallback`, or values propagated from host e.g. via\n       * bindings.  `super.ready()` must be called to ensure the data system\n       * becomes enabled.\n       *\n       * @public\n       */\n      ready() {\n        this.__dataInitialized = true;\n        // Run normal flush\n        this._flushProperties();\n      }\n\n      /**\n       * Callback called when any properties with accessors created via\n       * `_createPropertyAccessor` have been set.\n       *\n       * @param {Object} currentProps Bag of all current accessor values\n       * @param {Object} changedProps Bag of properties changed since the last\n       *   call to `_propertiesChanged`\n       * @param {Object} oldProps Bag of previous values for each property\n       *   in `changedProps`\n       * @protected\n       */\n      _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      }\n\n      /**\n       * Method called to determine whether a property value should be\n       * considered as a change and cause the `_propertiesChanged` callback\n       * to be enqueued.\n       *\n       * The default implementation returns `true` for primitive types if a\n       * strict equality check fails, and returns `true` for all Object/Arrays.\n       * The method always returns false for `NaN`.\n       *\n       * Override this method to e.g. provide stricter checking for\n       * Objects/Arrays when using immutable patterns.\n       *\n       * @param {string} property Property name\n       * @param {*} value New property value\n       * @param {*} old Previous property value\n       * @return {boolean} Whether the property should be considered a change\n       *   and enqueue a `_proeprtiesChanged` callback\n       * @protected\n       */\n      _shouldPropertyChange(property, value, old) {\n        return (\n          // Strict equality check\n          (old !== value &&\n           // This ensures (old==NaN, value==NaN) always returns false\n           (old === old || value === value))\n        );\n      }\n\n    }\n\n    return PropertyAccessors;\n\n  });\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/mixins/property-accessors.html","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\n\n(function() {\n\n  'use strict';\n\n  // 1.x backwards-compatible auto-wrapper for template type extensions\n  // This is a clear layering violation and gives favored-nation status to\n  // dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n  // a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n  // b.) to maintain if/repeat capability in parser-constrained elements\n  //     (e.g. table, select) in lieu of native CE type extensions without\n  //     massive new invention in this space (e.g. directive system)\n  const templateExtensions = {\n    'dom-if': true,\n    'dom-repeat': true\n  };\n  function wrapTemplateExtension(node) {\n    let is = node.getAttribute('is');\n    if (is && templateExtensions[is]) {\n      let t = node;\n      t.removeAttribute('is');\n      node = t.ownerDocument.createElement(is);\n      t.parentNode.replaceChild(node, t);\n      node.appendChild(t);\n      while(t.attributes.length) {\n        node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n        t.removeAttribute(t.attributes[0].name);\n      }\n    }\n    return node;\n  }\n\n  function findTemplateNode(root, nodeInfo) {\n    // recursively ascend tree until we hit root\n    let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n    // unwind the stack, returning the indexed node at each level\n    if (parent) {\n      // note: marginally faster than indexing via childNodes\n      // (http://jsperf.com/childnodes-lookup)\n      for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n        if (nodeInfo.parentIndex === i++) {\n          return n;\n        }\n      }\n    } else {\n      return root;\n    }\n  }\n\n  // construct `$` map (from id annotations)\n  function applyIdToMap(inst, map, node, nodeInfo) {\n    if (nodeInfo.id) {\n      map[nodeInfo.id] = node;\n    }\n  }\n\n  // install event listeners (from event annotations)\n  function applyEventListener(inst, node, nodeInfo) {\n    if (nodeInfo.events && nodeInfo.events.length) {\n      for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n        inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n      }\n    }\n  }\n\n  // push configuration references at configure time\n  function applyTemplateContent(inst, node, nodeInfo) {\n    if (nodeInfo.templateInfo) {\n      node._templateInfo = nodeInfo.templateInfo;\n    }\n  }\n\n  function createNodeEventHandler(context, eventName, methodName) {\n    // Instances can optionally have a _methodHost which allows redirecting where\n    // to find methods. Currently used by `templatize`.\n    context = context._methodHost || context;\n    let handler = function(e) {\n      if (context[methodName]) {\n        context[methodName](e, e.detail);\n      } else {\n        console.warn('listener method `' + methodName + '` not defined');\n      }\n    };\n    return handler;\n  }\n\n  /**\n   * Element mixin that provides basic template parsing and stamping, including\n   * the following template-related features for stamped templates:\n   *\n   * - Declarative event listeners (`on-eventname=\"listener\"`)\n   * - Map of node id's to stamped node instances (`this.$.id`)\n   * - Nested template content caching/removal and re-installation (performance\n   *   optimization)\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin that provides basic template parsing and stamping\n   */\n  Polymer.TemplateStamp = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymerMixinClass\n     * @implements {Polymer_TemplateStamp}\n     */\n    class TemplateStamp extends superClass {\n\n      /**\n       * Scans a template to produce template metadata.\n       *\n       * Template-specific metadata are stored in the object returned, and node-\n       * specific metadata are stored in objects in its flattened `nodeInfoList`\n       * array.  Only nodes in the template that were parsed as nodes of\n       * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n       * contains an `index` (`childNodes` index in parent) and optionally\n       * `parent`, which points to node info of its parent (including its index).\n       *\n       * The template metadata object returned from this method has the following\n       * structure (many fields optional):\n       *\n       * ```js\n       *   {\n       *     // Flattened list of node metadata (for nodes that generated metadata)\n       *     nodeInfoList: [\n       *       {\n       *         // `id` attribute for any nodes with id's for generating `$` map\n       *         id: {string},\n       *         // `on-event=\"handler\"` metadata\n       *         events: [\n       *           {\n       *             name: {string},   // event name\n       *             value: {string},  // handler method name\n       *           }, ...\n       *         ],\n       *         // Notes when the template contained a `<slot>` for shady DOM\n       *         // optimization purposes\n       *         hasInsertionPoint: {boolean},\n       *         // For nested `<template>`` nodes, nested template metadata\n       *         templateInfo: {object}, // nested template metadata\n       *         // Metadata to allow efficient retrieval of instanced node\n       *         // corresponding to this metadata\n       *         parentInfo: {number},   // reference to parent nodeInfo>\n       *         parentIndex: {number},  // index in parent's `childNodes` collection\n       *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n       *       },\n       *       ...\n       *     ],\n       *     // When true, the template had the `strip-whitespace` attribute\n       *     // or was nested in a template with that setting\n       *     stripWhitespace: {boolean},\n       *     // For nested templates, nested template content is moved into\n       *     // a document fragment stored here; this is an optimization to\n       *     // avoid the cost of nested template cloning\n       *     content: {DocumentFragment}\n       *   }\n       * ```\n       *\n       * This method kicks off a recursive treewalk as follows:\n       *\n       * ```\n       *    _parseTemplate <---------------------+\n       *      _parseTemplateContent              |\n       *        _parseTemplateNode  <------------|--+\n       *          _parseTemplateNestedTemplate --+  |\n       *          _parseTemplateChildNodes ---------+\n       *          _parseTemplateNodeAttributes\n       *            _parseTemplateNodeAttribute\n       *\n       * ```\n       *\n       * These methods may be overridden to add custom metadata about templates\n       * to either `templateInfo` or `nodeInfo`.\n       *\n       * Note that this method may be destructive to the template, in that\n       * e.g. event annotations may be removed after being noted in the\n       * template metadata.\n       *\n       * @param {HTMLTemplateElement} template Template to parse\n       * @param {Object=} outerTemplateInfo Template metadata from the outer\n       *   template, for parsing nested templates\n       * @return {Object} Parsed template metadata\n       */\n      static _parseTemplate(template, outerTemplateInfo) {\n        // since a template may be re-used, memo-ize metadata\n        if (!template._templateInfo) {\n          let templateInfo = template._templateInfo = {};\n          templateInfo.nodeInfoList = [];\n          templateInfo.stripWhiteSpace =\n            (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n            template.hasAttribute('strip-whitespace');\n          this._parseTemplateContent(template, templateInfo, {parent: null});\n        }\n        return template._templateInfo;\n      }\n\n      static _parseTemplateContent(template, templateInfo, nodeInfo) {\n        return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n      }\n\n      /**\n       * Parses template node and adds template and node metadata based on\n       * the current node, and its `childNodes` and `attributes`.\n       *\n       * This method may be overridden to add custom node or template specific\n       * metadata based on this node.\n       *\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNode(node, templateInfo, nodeInfo) {\n        let noted;\n        if (node.localName == 'template' && !node.hasAttribute('preserve-content')) {\n          noted = this._parseTemplateNestedTemplate(node, templateInfo, nodeInfo) || noted;\n        } else if (node.localName === 'slot') {\n          // For ShadyDom optimization, indicating there is an insertion point\n          templateInfo.hasInsertionPoint = true;\n        }\n        if (node.firstChild) {\n          noted = this._parseTemplateChildNodes(node, templateInfo, nodeInfo) || noted;\n        }\n        if (node.hasAttributes && node.hasAttributes()) {\n          noted = this._parseTemplateNodeAttributes(node, templateInfo, nodeInfo) || noted;\n        }\n        return noted;\n      }\n\n      /**\n       * Parses template child nodes for the given root node.\n       *\n       * This method also wraps whitelisted legacy template extensions\n       * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n       * wrappers, collapses text nodes, and strips whitespace from the template\n       * if the `templateInfo.stripWhitespace` setting was provided.\n       *\n       * @param {Node} root Root node whose `childNodes` will be parsed\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template.\n       */\n      static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n        for (let node=root.firstChild, parentIndex=0, next; node; node=next) {\n          // Wrap templates\n          if (node.localName == 'template') {\n            node = wrapTemplateExtension(node);\n          }\n          // collapse adjacent textNodes: fixes an IE issue that can cause\n          // text nodes to be inexplicably split =(\n          // note that root.normalize() should work but does not so we do this\n          // manually.\n          next = node.nextSibling;\n          if (node.nodeType === Node.TEXT_NODE) {\n            let n = next;\n            while (n && (n.nodeType === Node.TEXT_NODE)) {\n              node.textContent += n.textContent;\n              next = n.nextSibling;\n              root.removeChild(n);\n              n = next;\n            }\n            // optionally strip whitespace\n            if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n              root.removeChild(node);\n              continue;\n            }\n          }\n          let childInfo = { parentIndex, parentInfo: nodeInfo };\n          if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n            childInfo.infoIndex = templateInfo.nodeInfoList.push(childInfo) - 1;\n          }\n          // Increment if not removed\n          if (node.parentNode) {\n            parentIndex++;\n          }\n        }\n      }\n\n      /**\n       * Parses template content for the given nested `<template>`.\n       *\n       * Nested template info is stored as `templateInfo` in the current node's\n       * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n       * It will then be the responsibility of the host to set it back to the\n       * template and for users stamping nested templates to use the\n       * `_contentForTemplate` method to retrieve the content for this template\n       * (an optimization to avoid the cost of cloning nested template content).\n       *\n       * @param {HTMLTemplateElement} node Node to parse (a <template>)\n       * @param {Object} outerTemplateInfo Template metadata for current template\n       *   that includes the template `node`\n       * @param {Object} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n        let templateInfo = this._parseTemplate(node, outerTemplateInfo);\n        let content = templateInfo.content =\n          node.content.ownerDocument.createDocumentFragment();\n        content.appendChild(node.content);\n        nodeInfo.templateInfo = templateInfo;\n        return true;\n      }\n\n      /**\n       * Parses template node attributes and adds node metadata to `nodeInfo`\n       * for nodes of interest.\n       *\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n        // Make copy of original attribute list, since the order may change\n        // as attributes are added and removed\n        let noted;\n        let attrs = Array.from(node.attributes);\n        for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n          noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n        }\n        return noted;\n      }\n\n      /**\n       * Parses a single template node attribute and adds node metadata to\n       * `nodeInfo` for attributes of interest.\n       *\n       * This implementation adds metadata for `on-event=\"handler\"` attributes\n       * and `id` attributes.\n       *\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template.\n       * @param {string} name Attribute name\n       * @param {*} value Attribute value\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n        // events (on-*)\n        if (name.slice(0, 3) === 'on-') {\n          node.removeAttribute(name);\n          nodeInfo.events = nodeInfo.events || [];\n          nodeInfo.events.push({\n            name: name.slice(3),\n            value\n          });\n          return true;\n        }\n        // static id\n        else if (name === 'id') {\n          nodeInfo.id = value;\n          return true;\n        }\n      }\n\n      /**\n       * Returns the `content` document fragment for a given template.\n       *\n       * For nested templates, Polymer performs an optimization to cache nested\n       * template content to avoid the cost of cloning deeply nested templates.\n       * This method retrieves the cached content for a given template.\n       *\n       * @param {HTMLTemplateElement} template Template to retrieve `content` for\n       * @return {DocumentFragment} Content fragment\n       */\n      static _contentForTemplate(template) {\n        let templateInfo = template.__templateInfo;\n        return (templateInfo && templateInfo.content) || template.content;\n      }\n\n      /**\n       * Clones the provided template content and returns a document fragment\n       * containing the cloned dom.\n       *\n       * The template is parsed (once and memoized) using this library's\n       * template parsing features, and provides the following value-added\n       * features:\n       * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n       * * Generates an \"id map\" for all nodes with id's under `$` on returned\n       *   document fragment\n       * * Passes template info including `content` back to templates as\n       *   `_templateInfo` (a performance optimization to avoid deep template\n       *   cloning)\n       *\n       * Note that the memoized template parsing process is destructive to the\n       * template: attributes for bindings and declarative event listeners are\n       * removed after being noted in notes, and any nested `<template>.content`\n       * is removed and stored in notes as well.\n       *\n       * @param {HTMLTemplateElement} template Template to stamp\n       * @return {DocumentFragment} Cloned template content\n       */\n      _stampTemplate(template) {\n        // Polyfill support: bootstrap the template if it has not already been\n        if (template && !template.content &&\n            window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n          HTMLTemplateElement.decorate(template);\n        }\n        let templateInfo = this.constructor._parseTemplate(template);\n        let nodeInfo = templateInfo.nodeInfoList;\n        let content = templateInfo.content || template.content;\n        let dom = document.importNode(content, true);\n        // NOTE: ShadyDom optimization indicating there is an insertion point\n        dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n        let nodes = dom.nodeList = new Array(nodeInfo.length);\n        dom.$ = {};\n        for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n          let node = nodes[i] = findTemplateNode(dom, info);\n          applyIdToMap(this, dom.$, node, info);\n          applyTemplateContent(this, node, info);\n          applyEventListener(this, node, info);\n        }\n        return dom;\n      }\n\n      /**\n       * Adds an event listener by method name for the event provided.\n       *\n       * This method generates a handler function that looks up the method\n       * name at handling time.\n       *\n       * @param {Node} node Node to add listener on\n       * @param {string} eventName Name of event\n       * @param {string} methodName Name of method\n       * @param {*=} context Context the method will be called on (defaults\n       *   to `node`)\n       * @return {Function} Generated handler function\n       */\n      _addMethodEventListenerToNode(node, eventName, methodName, context) {\n        context = context || node;\n        let handler = createNodeEventHandler(context, eventName, methodName);\n        this._addEventListenerToNode(node, eventName, handler);\n        return handler;\n      }\n\n      /**\n       * Override point for adding custom or simulated event handling.\n       *\n       * @param {Node} node Node to add event listener to\n       * @param {string} eventName Name of event\n       * @param {Function} handler Listener function to add\n       */\n      _addEventListenerToNode(node, eventName, handler) {\n        node.addEventListener(eventName, handler);\n      }\n\n      /**\n       * Override point for adding custom or simulated event handling.\n       *\n       * @param {Node} node Node to remove event listener from\n       * @param {string} eventName Name of event\n       * @param {Function} handler Listener function to remove\n       */\n      _removeEventListenerFromNode(node, eventName, handler) {\n        node.removeEventListener(eventName, handler);\n      }\n\n    }\n\n    return TemplateStamp;\n\n  });\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/mixins/template-stamp.html","/*__wc__loader*/\nrequire('./boot.html');\n\nrequire('./mixin.html');\n\nrequire('./async.html');\n\n\n(function() {\n  'use strict';\n\n  /** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\n  let AsyncModule; // eslint-disable-line no-unused-vars\n\n  class Debouncer {\n    constructor() {\n      this._asyncModule = null;\n      this._callback = null;\n      this._timer = null;\n    }\n    /**\n     * Sets the scheduler; that is, a module with the Async interface,\n     * a callback and optional arguments to be passed to the run function\n     * from the async module.\n     *\n     * @param {!AsyncModule} asyncModule Object with Async interface.\n     * @param {function()} callback Callback to run.\n     */\n    setConfig(asyncModule, callback) {\n      this._asyncModule = asyncModule;\n      this._callback = callback;\n      this._timer = this._asyncModule.run(() => {\n        this._timer = null;\n        this._callback()\n      });\n    }\n    /**\n     * Cancels an active debouncer and returns a reference to itself.\n     */\n    cancel() {\n      if (this.isActive()) {\n        this._asyncModule.cancel(this._timer);\n        this._timer = null;\n      }\n    }\n    /**\n     * Flushes an active debouncer and returns a reference to itself.\n     */\n    flush() {\n      if (this.isActive()) {\n        this.cancel();\n        this._callback();\n      }\n    }\n    /**\n     * Returns true if the debouncer is active.\n     *\n     * @return {boolean} True if active.\n     */\n    isActive() {\n      return this._timer != null;\n    }\n  /**\n   * Creates a debouncer if no debouncer is passed as a parameter\n   * or it cancels an active debouncer otherwise. The following\n   * example shows how a debouncer can be called multiple times within a\n   * microtask and \"debounced\" such that the provided callback function is\n   * called once. Add this method to a custom element:\n   *\n   * _debounceWork() {\n   *   this._debounceJob = Polymer.Debouncer.debounce(this._debounceJob,\n   *       Polymer.Async.microTask, () => {\n   *     this._doWork();\n   *   });\n   * }\n   *\n   * If the `_debounceWork` method is called multiple times within the same\n   * microtask, the `_doWork` function will be called only once at the next\n   * microtask checkpoint.\n   *\n   * Note: In testing it is often convenient to avoid asynchrony. To accomplish\n   * this with a debouncer, you can use `Polymer.enqueueDebouncer` and\n   * `Polymer.flush`. For example, extend the above example by adding\n   * `Polymer.enqueueDebouncer(this._debounceJob)` at the end of the\n   * `_debounceWork` method. Then in a test, call `Polymer.flush` to ensure\n   * the debouncer has completed.\n   *\n   * @param {Polymer.Debouncer?} debouncer Debouncer object.\n   * @param {!AsyncModule} asyncModule Object with Async interface\n   * @param {function()} callback Callback to run.\n   * @return {!Debouncer} Returns a debouncer object.\n   */\n    static debounce(debouncer, asyncModule, callback) {\n      if (debouncer instanceof Debouncer) {\n        debouncer.cancel();\n      } else {\n        debouncer = new Debouncer();\n      }\n      debouncer.setConfig(asyncModule, callback);\n      return debouncer;\n    }\n  }\n\n  /**\n   * @memberof Polymer\n   */\n  Polymer.Debouncer = Debouncer;\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/debounce.html","/*__wc__loader*/\nrequire('./boot.html');\n\n\n(function() {\n  'use strict';\n\n  let debouncerQueue = [];\n\n  /**\n   * Adds a `Polymer.Debouncer` to a list of globally flushable tasks.\n   *\n   * @memberof Polymer\n   * @param {Polymer.Debouncer} debouncer Debouncer to enqueue\n   */\n  Polymer.enqueueDebouncer = function(debouncer) {\n    debouncerQueue.push(debouncer);\n  }\n\n  function flushDebouncers() {\n    const didFlush = Boolean(debouncerQueue.length);\n    while (debouncerQueue.length) {\n      try {\n        debouncerQueue.shift().flush();\n      } catch(e) {\n        setTimeout(() => {\n          throw e;\n        });\n      }\n    }\n    return didFlush;\n  }\n\n  /**\n   * Forces several classes of asynchronously queued tasks to flush:\n   * - Debouncers added via `enqueueDebouncer`\n   * - ShadyDOM distribution\n   *\n   * @memberof Polymer\n   */\n  Polymer.flush = function() {\n    let shadyDOM, debouncers;\n    do {\n      shadyDOM = window.ShadyDOM && ShadyDOM.flush();\n      if (window.ShadyCSS && window.ShadyCSS.ScopingShim) {\n        window.ShadyCSS.ScopingShim.flush();\n      }\n      debouncers = flushDebouncers();\n    } while (shadyDOM || debouncers);\n  }\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/flush.html","/*__wc__loader*/\nrequire('./boot.html');\n\n\n(function() {\n  'use strict';\n\n  /**\n   * Module with utilities for manipulating structured data path strings.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for manipulating structured data path strings.\n   */\n  const Path = {\n\n    /**\n     * Returns true if the given string is a structured data path (has dots).\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isPath('foo.bar.baz') // true\n     * Polymer.Path.isPath('foo')         // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {boolean} True if the string contained one or more dots\n     */\n    isPath: function(path) {\n      return path.indexOf('.') >= 0;\n    },\n\n    /**\n     * Returns the root property name for the given path.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.root('foo.bar.baz') // 'foo'\n     * Polymer.Path.root('foo')         // 'foo'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {string} Root property name\n     */\n    root: function(path) {\n      let dotIndex = path.indexOf('.');\n      if (dotIndex === -1) {\n        return path;\n      }\n      return path.slice(0, dotIndex);\n    },\n\n    /**\n     * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n     * Returns true if the given path is an ancestor of the base path.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isAncestor('foo.bar', 'foo')         // true\n     * Polymer.Path.isAncestor('foo.bar', 'foo.bar')     // false\n     * Polymer.Path.isAncestor('foo.bar', 'foo.bar.baz') // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Path string to test against.\n     * @param {string} path Path string to test.\n     * @return {boolean} True if `path` is an ancestor of `base`.\n     */\n    isAncestor: function(base, path) {\n      //     base.startsWith(path + '.');\n      return base.indexOf(path + '.') === 0;\n    },\n\n    /**\n     * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isDescendant('foo.bar', 'foo.bar.baz') // true\n     * Polymer.Path.isDescendant('foo.bar', 'foo.bar')     // false\n     * Polymer.Path.isDescendant('foo.bar', 'foo')         // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Path string to test against.\n     * @param {string} path Path string to test.\n     * @return {boolean} True if `path` is a descendant of `base`.\n     */\n    isDescendant: function(base, path) {\n      //     path.startsWith(base + '.');\n      return path.indexOf(base + '.') === 0;\n    },\n\n    /**\n     * Replaces a previous base path with a new base path, preserving the\n     * remainder of the path.\n     *\n     * User must ensure `path` has a prefix of `base`.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.translate('foo.bar', 'zot' 'foo.bar.baz') // 'zot.baz'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Current base string to remove\n     * @param {string} newBase New base string to replace with\n     * @param {string} path Path to translate\n     * @return {string} Translated string\n     */\n    translate: function(base, newBase, path) {\n      return newBase + path.slice(base.length);\n    },\n\n    matches: function(base, path) {\n      return (base === path) ||\n             this.isAncestor(base, path) ||\n             this.isDescendant(base, path);\n    },\n\n    /**\n     * Converts array-based paths to flattened path.  String-based paths\n     * are returned as-is.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n     * Polymer.Path.normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string | !Array<string|number>} path Input path\n     * @return {string} Flattened path\n     */\n    normalize: function(path) {\n      if (Array.isArray(path)) {\n        let parts = [];\n        for (let i=0; i<path.length; i++) {\n          let args = path[i].toString().split('.');\n          for (let j=0; j<args.length; j++) {\n            parts.push(args[j]);\n          }\n        }\n        return parts.join('.');\n      } else {\n        return path;\n      }\n    },\n\n    /**\n     * Splits a path into an array of property names. Accepts either arrays\n     * of path parts or strings.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n     * Polymer.Path.split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string | !Array<string|number>} path Input path\n     * @return {!Array<string>} Array of path parts\n     */\n    split: function(path) {\n      if (Array.isArray(path)) {\n        return this.normalize(path).split('.');\n      }\n      return path.toString().split('.');\n    },\n\n    /**\n     * Reads a value from a path.  If any sub-property in the path is `undefined`,\n     * this method returns `undefined` (will never throw.\n     *\n     * @memberof Polymer.Path\n     * @param {Object} root Object from which to dereference path from\n     * @param {string | !Array<string|number>} path Path to read\n     * @param {Object=} info If an object is provided to `info`, the normalized\n     *  (flattened) path will be set to `info.path`.\n     * @return {*} Value at path, or `undefined` if the path could not be\n     *  fully dereferenced.\n     */\n    get: function(root, path, info) {\n      let prop = root;\n      let parts = this.split(path);\n      // Loop over path parts[0..n-1] and dereference\n      for (let i=0; i<parts.length; i++) {\n        if (!prop) {\n          return;\n        }\n        let part = parts[i];\n        prop = prop[part];\n      }\n      if (info) {\n        info.path = parts.join('.');\n      }\n      return prop;\n    },\n\n    /**\n     * Sets a value to a path.  If any sub-property in the path is `undefined`,\n     * this method will no-op.\n     *\n     * @memberof Polymer.Path\n     * @param {Object} root Object from which to dereference path from\n     * @param {string | !Array<string|number>} path Path to set\n     * @param {*} value Value to set to path\n     * @return {string | undefined} The normalized version of the input path\n     */\n    set: function(root, path, value) {\n      let prop = root;\n      let parts = this.split(path);\n      let last = parts[parts.length-1];\n      if (parts.length > 1) {\n        // Loop over path parts[0..n-2] and dereference\n        for (let i=0; i<parts.length-1; i++) {\n          let part = parts[i];\n          prop = prop[part];\n          if (!prop) {\n            return;\n          }\n        }\n        // Set value to object at end of path\n        prop[last] = value;\n      } else {\n        // Simple property set\n        prop[path] = value;\n      }\n      return parts.join('.');\n    }\n\n  };\n\n  /**\n   * Returns true if the given string is a structured data path (has dots).\n   *\n   * This function is deprecated.  Use `Polymer.Path.isPath` instead.\n   *\n   * Example:\n   *\n   * ```\n   * Polymer.Path.isDeep('foo.bar.baz') // true\n   * Polymer.Path.isDeep('foo')         // false\n   * ```\n   *\n   * @deprecated\n   * @memberof Polymer.Path\n   * @param {string} path Path string\n   * @return {boolean} True if the string contained one or more dots\n   */\n  Path.isDeep = Path.isPath;\n\n  Polymer.Path = Path;\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/path.html","/*__wc__loader*/\nrequire('./resolve-url.html');\n\n\n(function() {\n  'use strict';\n\n  const MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\n  const INCLUDE_ATTR = 'include';\n\n  function importModule(moduleId) {\n    if (!Polymer.DomModule) {\n      return null;\n    }\n    return Polymer.DomModule.import(moduleId);\n  }\n\n  /**\n   * Module with utilities for collection CSS text from `<templates>`, external\n   * stylesheets, and `dom-module`s.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for collection CSS text from various sources.\n   */\n  const StyleGather = {\n\n    /**\n     * Returns CSS text of styles in a space-separated list of `dom-module`s.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleIds List of dom-module id's within which to\n     * search for css.\n     * @return {string} Concatenated CSS content from specified `dom-module`s\n     */\n    cssFromModules(moduleIds) {\n      let modules = moduleIds.trim().split(' ');\n      let cssText = '';\n      for (let i=0; i < modules.length; i++) {\n        cssText += this.cssFromModule(modules[i]);\n      }\n      return cssText;\n    },\n\n    /**\n     * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n     * can come either from `<style>`s within the first `<template>`, or else\n     * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n     * template.\n     *\n     * Any `<styles>` processed are removed from their original location.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleId dom-module id to gather styles from\n     * @return {string} Concatenated CSS content from specified `dom-module`\n     */\n    cssFromModule(moduleId) {\n      let m = importModule(moduleId);\n      if (m && m._cssText === undefined) {\n        let cssText = '';\n        // include css from the first template in the module\n        let t = m.querySelector('template');\n        if (t) {\n          cssText += this.cssFromTemplate(t, m.assetpath);\n        }\n        // module imports: <link rel=\"import\" type=\"css\">\n        cssText += this.cssFromModuleImports(moduleId);\n        m._cssText = cssText || null;\n      }\n      if (!m) {\n        console.warn('Could not find style data in module named', moduleId);\n      }\n      return m && m._cssText || '';\n    },\n\n    /**\n     * Returns CSS text of `<styles>` within a given template.\n     *\n     * Any `<styles>` processed are removed from their original location.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {HTMLTemplateElement} template Template to gather styles from\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} Concatenated CSS content from specified template\n     */\n    cssFromTemplate(template, baseURI) {\n      let cssText = '';\n      // if element is a template, get content from its .content\n      let e$ = template.content.querySelectorAll('style');\n      for (let i=0; i < e$.length; i++) {\n        let e = e$[i];\n        // support style sharing by allowing styles to \"include\"\n        // other dom-modules that contain styling\n        let include = e.getAttribute(INCLUDE_ATTR);\n        if (include) {\n          cssText += this.cssFromModules(include);\n        }\n        e.parentNode.removeChild(e);\n        cssText += baseURI ?\n          Polymer.ResolveUrl.resolveCss(e.textContent, baseURI) : e.textContent;\n      }\n      return cssText;\n    },\n\n    /**\n     * Returns CSS text from stylsheets loaded via `<link rel=\"import\" type=\"css\">`\n     * links within the specified `dom-module`.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleId Id of `dom-module` to gather CSS from\n     * @return {string} Concatenated CSS content from links in specified `dom-module`\n     */\n    cssFromModuleImports(moduleId) {\n      let cssText = '';\n      let m = importModule(moduleId);\n      if (!m) {\n        return cssText;\n      }\n      let p$ = m.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n      for (let i=0; i < p$.length; i++) {\n        let p = p$[i];\n        if (p.import) {\n          let importDoc = p.import;\n          // NOTE: polyfill affordance.\n          // under the HTMLImports polyfill, there will be no 'body',\n          // but the import pseudo-doc can be used directly.\n          let container = importDoc.body ? importDoc.body : importDoc;\n          cssText +=\n            Polymer.ResolveUrl.resolveCss(container.textContent,\n              importDoc.baseURI);\n        }\n      }\n      return cssText;\n    }\n  };\n\n  Polymer.StyleGather = StyleGather;\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/style-gather.html","/*__wc__loader*/\nrequire('./boot.html');\n\nrequire('../mixins/property-effects.html');\n\nrequire('../mixins/mutable-data.html');\n\n\n  (function() {\n    'use strict';\n\n    // Base class for HTMLTemplateElement extension that has property effects\n    // machinery for propagating host properties to children. This is an ES5\n    // class only because Babel (incorrectly) requires super() in the class\n    // constructor even though no `this` is used and it returns an instance.\n    let newInstance = null;\n    function HTMLTemplateElementExtension() { return newInstance; }\n    HTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {\n      constructor: {\n        value: HTMLTemplateElementExtension,\n        writable: true\n      }\n    });\n    const DataTemplate = Polymer.PropertyEffects(HTMLTemplateElementExtension);\n    const MutableDataTemplate = Polymer.MutableData(DataTemplate);\n\n    // Applies a DataTemplate subclass to a <template> instance\n    function upgradeTemplate(template, constructor) {\n      newInstance = template;\n      Object.setPrototypeOf(template, constructor.prototype);\n      new constructor();\n      newInstance = null;\n    }\n\n    // Base class for TemplateInstance's\n    /**\n     * @constructor\n     * @implements {Polymer_PropertyEffects}\n     */\n    const base = Polymer.PropertyEffects(class {});\n    class TemplateInstanceBase extends base {\n      constructor(props) {\n        super();\n        this._configureProperties(props);\n        this.root = this._stampTemplate(this.__dataHost);\n        // Save list of stamped children\n        let children = this.children = [];\n        for (let n = this.root.firstChild; n; n=n.nextSibling) {\n          children.push(n);\n          n.__templatizeInstance = this;\n        }\n        if (this.__templatizeOwner.__hideTemplateChildren__) {\n          this._showHideChildren(true);\n        }\n        // Flush props only when props are passed if instance props exist\n        // or when there isn't instance props.\n        let options = this.__templatizeOptions;\n        if ((props && options.instanceProps) || !options.instanceProps) {\n          this._enableProperties();\n        }\n      }\n      /**\n       * Configure the given `props` by calling `_setPendingProperty`. Also\n       * sets any properties stored in `__hostProps`.\n       * @private\n       * @param {Object} props Object of property name-value pairs to set.\n       */\n      _configureProperties(props) {\n        let options = this.__templatizeOptions;\n        if (props) {\n          for (let iprop in options.instanceProps) {\n            if (iprop in props) {\n              this._setPendingProperty(iprop, props[iprop]);\n            }\n          }\n        }\n        for (let hprop in this.__hostProps) {\n          this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);\n        }\n      }\n      /**\n       * Forwards a host property to this instance.  This method should be\n       * called on instances from the `options.forwardHostProp` callback\n       * to propagate changes of host properties to each instance.\n       *\n       * Note this method enqueues the change, which are flushed as a batch.\n       *\n       * @param {string} prop Property or path name\n       * @param {*} value Value of the property to forward\n       */\n      forwardHostProp(prop, value) {\n        if (this._setPendingPropertyOrPath(prop, value, false, true)) {\n          this.__dataHost._enqueueClient(this);\n        }\n      }\n      /**\n       * @override\n       */\n      _addEventListenerToNode(node, eventName, handler) {\n        if (this._methodHost && this.__templatizeOptions.parentModel) {\n          // If this instance should be considered a parent model, decorate\n          // events this template instance as `model`\n          this._methodHost._addEventListenerToNode(node, eventName, (e) => {\n            e.model = this;\n            handler(e);\n          });\n        } else {\n          // Otherwise delegate to the template's host (which could be)\n          // another template instance\n          let templateHost = this.__dataHost.__dataHost;\n          if (templateHost) {\n            templateHost._addEventListenerToNode(node, eventName, handler);\n          }\n        }\n      }\n      /**\n       * Shows or hides the template instance top level child elements. For\n       * text nodes, `textContent` is removed while \"hidden\" and replaced when\n       * \"shown.\"\n       * @param {boolean} hide Set to true to hide the children;\n       * set to false to show them.\n       * @protected\n       */\n      _showHideChildren(hide) {\n        let c = this.children;\n        for (let i=0; i<c.length; i++) {\n          let n = c[i];\n          // Ignore non-changes\n          if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n            if (n.nodeType === Node.TEXT_NODE) {\n              if (hide) {\n                n.__polymerTextContent__ = n.textContent;\n                n.textContent = '';\n              } else {\n                n.textContent = n.__polymerTextContent__;\n              }\n            } else if (n.style) {\n              if (hide) {\n                n.__polymerDisplay__ = n.style.display;\n                n.style.display = 'none';\n              } else {\n                n.style.display = n.__polymerDisplay__;\n              }\n            }\n          }\n          n.__hideTemplateChildren__ = hide;\n          if (n._showHideChildren) {\n            n._showHideChildren(hide);\n          }\n        }\n      }\n      /**\n       * Overrides default property-effects implementation to intercept\n       * textContent bindings while children are \"hidden\" and cache in\n       * private storage for later retrieval.\n       *\n       * @override\n       */\n      _setUnmanagedPropertyToNode(node, prop, value) {\n        if (node.__hideTemplateChildren__ &&\n            node.nodeType == Node.TEXT_NODE && prop == 'textContent') {\n          node.__polymerTextContent__ = value;\n        } else {\n          super._setUnmanagedPropertyToNode(node, prop, value);\n        }\n      }\n      /**\n       * Find the parent model of this template instance.  The parent model\n       * is either another templatize instance that had option `parentModel: true`,\n       * or else the host element.\n       *\n       * @return {Polymer.PropertyEffectsInterface} The parent model of this instance\n       */\n      get parentModel() {\n        let model = this.__parentModel;\n        if (!model) {\n          let options;\n          model = this\n          do {\n            // A template instance's `__dataHost` is a <template>\n            // `model.__dataHost.__dataHost` is the template's host\n            model = model.__dataHost.__dataHost;\n          } while ((options = model.__templatizeOptions) && !options.parentModel)\n          this.__parentModel = model;\n        }\n        return model;\n      }\n    }\n\n    const MutableTemplateInstanceBase = Polymer.MutableData(TemplateInstanceBase);\n\n    function findMethodHost(template) {\n      // Technically this should be the owner of the outermost template.\n      // In shadow dom, this is always getRootNode().host, but we can\n      // approximate this via cooperation with our dataHost always setting\n      // `_methodHost` as long as there were bindings (or id's) on this\n      // instance causing it to get a dataHost.\n      let templateHost = template.__dataHost;\n      return templateHost && templateHost._methodHost || templateHost;\n    }\n\n    function createTemplatizerClass(template, templateInfo, options) {\n      // Anonymous class created by the templatize\n      /**\n       * @unrestricted\n       */\n      let base = options.mutableData ?\n        MutableTemplateInstanceBase : TemplateInstanceBase;\n      let klass = class extends base { }\n      klass.prototype.__templatizeOptions = options;\n      klass.prototype._bindTemplate(template);\n      addNotifyEffects(klass, template, templateInfo, options);\n      return klass;\n    }\n\n    function addPropagateEffects(template, templateInfo, options) {\n      let userForwardHostProp = options.forwardHostProp;\n      if (userForwardHostProp) {\n        // Provide data API and property effects on memoized template class\n        let klass = templateInfo.templatizeTemplateClass;\n        if (!klass) {\n          let base = options.mutableData ? MutableDataTemplate : DataTemplate;\n          klass = templateInfo.templatizeTemplateClass =\n            class TemplatizedTemplate extends base {}\n          // Add template - >instances effects\n          // and host <- template effects\n          let hostProps = templateInfo.hostProps;\n          for (let prop in hostProps) {\n            klass.prototype._addPropertyEffect('_host_' + prop,\n              klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,\n              {fn: createForwardHostPropEffect(prop, userForwardHostProp)});\n            klass.prototype._createNotifyingProperty('_host_' + prop);\n          }\n        }\n        upgradeTemplate(template, klass);\n        // Mix any pre-bound data into __data; no need to flush this to\n        // instances since they pull from the template at instance-time\n        if (template.__dataProto) {\n          // Note, generally `__dataProto` could be chained, but it's guaranteed\n          // to not be since this is a vanilla template we just added effects to\n          Object.assign(template.__data, template.__dataProto);\n        }\n        // Clear any pending data for performance\n        template.__dataTemp = {};\n        template.__dataPending = null;\n        template.__dataOld = null;\n        template._enableProperties();\n      }\n    }\n\n    function createForwardHostPropEffect(hostProp, userForwardHostProp) {\n      return function forwardHostProp(template, prop, props) {\n        userForwardHostProp.call(template.__templatizeOwner,\n          prop.substring('_host_'.length), props[prop]);\n      }\n    }\n\n    function addNotifyEffects(klass, template, templateInfo, options) {\n      let hostProps = templateInfo.hostProps || {};\n      for (let iprop in options.instanceProps) {\n        delete hostProps[iprop];\n        let userNotifyInstanceProp = options.notifyInstanceProp;\n        if (userNotifyInstanceProp) {\n          klass.prototype._addPropertyEffect(iprop,\n            klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n            {fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)});\n        }\n      }\n      if (options.forwardHostProp && template.__dataHost) {\n        for (let hprop in hostProps) {\n          klass.prototype._addPropertyEffect(hprop,\n            klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n            {fn: createNotifyHostPropEffect()})\n        }\n      }\n    }\n\n    function createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {\n      return function notifyInstanceProp(inst, prop, props) {\n        userNotifyInstanceProp.call(inst.__templatizeOwner,\n          inst, prop, props[prop]);\n      }\n    }\n\n    function createNotifyHostPropEffect() {\n      return function notifyHostProp(inst, prop, props) {\n        inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);\n      }\n    }\n\n    /**\n     * Module for preparing and stamping instances of templates that utilize\n     * Polymer's data-binding and declarative event listener features.\n     *\n     * Example:\n     *\n     *     // Get a template from somewhere, e.g. light DOM\n     *     let template = this.querySelector('template');\n     *     // Prepare the template\n     *     let TemplateClass = Polymer.Templatize.templatize(template);\n     *     // Instance the template with an initial data model\n     *     let instance = new TemplateClass({myProp: 'initial'});\n     *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n     *     this.shadowRoot.appendChild(instance.root);\n     *     // Changing a property on the instance will propagate to bindings\n     *     // in the template\n     *     instance.myProp = 'new value';\n     *\n     * The `options` dictionary passed to `templatize` allows for customizing\n     * features of the generated template class, including how outer-scope host\n     * properties should be forwarded into template instances, how any instance\n     * properties added into the template's scope should be notified out to\n     * the host, and whether the instance should be decorated as a \"parent model\"\n     * of any event handlers.\n     *\n     *     // Customze property forwarding and event model decoration\n     *     let TemplateClass = Polymer.Tempaltize.templatize(template, this, {\n     *       parentModel: true,\n     *       instanceProps: {...},\n     *       forwardHostProp(property, value) {...},\n     *       notifyInstanceProp(instance, property, value) {...},\n     *     });\n     *\n     *\n     * @namespace\n     * @memberof Polymer\n     * @summary Module for preparing and stamping instances of templates\n     *   utilizing Polymer templating features.\n     */\n    const Templatize = {\n\n      /**\n       * Returns an anonymous `Polymer.PropertyEffects` class bound to the\n       * `<template>` provided.  Instancing the class will result in the\n       * template being stamped into document fragment stored as the instance's\n       * `root` property, after which it can be appended to the DOM.\n       *\n       * Templates may utilize all Polymer data-binding features as well as\n       * declarative event listeners.  Event listeners and inline computing\n       * functions in the template will be called on the host of the template.\n       *\n       * The constructor returned takes a single argument dictionary of initial\n       * property values to propagate into template bindings.  Additionally\n       * host properties can be forwarded in, and instance properties can be\n       * notified out by providing optional callbacks in the `options` dictionary.\n       *\n       * Valid configuration in `options` are as follows:\n       *\n       * - `forwardHostProp(property, value)`: Called when a property referenced\n       *   in the template changed on the template's host. As this library does\n       *   not retain references to templates instanced by the user, it is the\n       *   templatize owner's responsibility to forward host property changes into\n       *   user-stamped instances.  The `instance.forwardHostProp(property, value)`\n       *    method on the generated class should be called to forward host\n       *   properties into the template to prevent unnecessary property-changed\n       *   notifications. Any properties referenced in the template that are not\n       *   defined in `instanceProps` will be notified up to the template's host\n       *   automatically.\n       * - `instanceProps`: Dictionary of property names that will be added\n       *   to the instance by the templatize owner.  These properties shadow any\n       *   host properties, and changes within the template to these properties\n       *   will result in `notifyInstanceProp` being called.\n       * - `mutableData`: When `true`, the generated class will skip strict\n       *   dirty-checking for objects and arrays (always consider them to be\n       *   \"dirty\").\n       * - `notifyInstanceProp(instance, property, value)`: Called when\n       *   an instance property changes.  Users may choose to call `notifyPath`\n       *   on e.g. the owner to notify the change.\n       * - `parentModel`: When `true`, events handled by declarative event listeners\n       *   (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n       *   to the template instance that stamped it.  It will also be returned\n       *   from `instance.parentModel` in cases where template instance nesting\n       *   causes an inner model to shadow an outer model.\n       *\n       * Note that the class returned from `templatize` is generated only once\n       * for a given `<template>` using `options` from the first call for that\n       * template, and the cached class is returned for all subsequent calls to\n       * `templatize` for that template.  As such, `options` callbacks should not\n       * close over owner-specific properties since only the first `options` is\n       * used; rather, callbacks are called bound to the `owner`, and so context\n       * needed from the callbacks (such as references to `instances` stamped)\n       * should be stored on the `owner` such that they can be retrieved via `this`.\n       *\n       * @memberof Polymer.Templatize\n       * @param {HTMLTemplateElement} template Template to templatize\n       * @param {*} owner Owner of the template instances; any optional callbacks\n       *   will be bound to this owner.\n       * @param {*=} options Options dictionary (see summary for details)\n       * @return {TemplateInstanceBase} Generated class bound to the template\n       *   provided\n       */\n      templatize(template, owner, options) {\n        options = options || {};\n        if (template.__templatizeOwner) {\n          throw new Error('A <template> can only be templatized once');\n        }\n        template.__templatizeOwner = owner;\n        let templateInfo = owner.constructor._parseTemplate(template);\n        // Get memoized base class for the prototypical template, which\n        // includes property effects for binding template & forwarding\n        let baseClass = templateInfo.templatizeInstanceClass;\n        if (!baseClass) {\n          baseClass = createTemplatizerClass(template, templateInfo, options);\n          templateInfo.templatizeInstanceClass = baseClass;\n        }\n        // Host property forwarding must be installed onto template instance\n        addPropagateEffects(template, templateInfo, options);\n        // Subclass base class and add reference for this specific template\n        let klass = class TemplateInstance extends baseClass {};\n        klass.prototype._methodHost = findMethodHost(template);\n        klass.prototype.__dataHost = template;\n        klass.prototype.__templatizeOwner = owner;\n        klass.prototype.__hostProps = templateInfo.hostProps;\n        return klass;\n      },\n\n      /**\n       * Returns the template \"model\" associated with a given element, which\n       * serves as the binding scope for the template instance the element is\n       * contained in. A template model is an instance of\n       * `TemplateInstanceBase`, and should be used to manipulate data\n       * associated with this template instance.\n       *\n       * Example:\n       *\n       *   let model = modelForElement(el);\n       *   if (model.index < 10) {\n       *     model.set('item.checked', true);\n       *   }\n       *\n       * @memberof Polymer.Templatize\n       * @param {HTMLTemplateElement} template The model will be returned for\n       *   elements stamped from this template\n       * @param {HTMLElement} el Element for which to return a template model.\n       * @return {TemplateInstanceBase} Template instance representing the\n       *   binding scope for the element\n       */\n      modelForElement(template, el) {\n        let model;\n        while (el) {\n          // An element with a __templatizeInstance marks the top boundary\n          // of a scope; walk up until we find one, and then ensure that\n          // its __dataHost matches `this`, meaning this dom-repeat stamped it\n          if ((model = el.__templatizeInstance)) {\n            // Found an element stamped by another template; keep walking up\n            // from its __dataHost\n            if (model.__dataHost != template) {\n              el = model.__dataHost;\n            } else {\n              return model;\n            }\n          } else {\n            // Still in a template scope, keep going up until\n            // a __templatizeInstance is found\n            el = el.parentNode;\n          }\n        }\n        return null;\n      }\n    }\n\n    Polymer.Templatize = Templatize;\n\n  })();\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/templatize.html"],"sourceRoot":""}