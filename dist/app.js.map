{"version":3,"sources":["webpack:///webpack/bootstrap 468bbdd5574fc472b489","webpack:///./node_modules/@polymer/polymer/lib/utils/boot.js","webpack:///./node_modules/@polymer/polymer/lib/utils/case-map.js","webpack:///./node_modules/@polymer/polymer/lib/utils/resolve-url.js","webpack:///./node_modules/@polymer/polymer/lib/utils/mixin.js","webpack:///./node_modules/@polymer/polymer/lib/utils/settings.js","webpack:///./src/index.js","webpack:///./node_modules/@polymer/polymer/polymer-element.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/element-mixin.js","webpack:///./node_modules/@polymer/polymer/lib/utils/style-gather.js","webpack:///./node_modules/@polymer/polymer/lib/elements/dom-module.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/property-effects.js","webpack:///./node_modules/@polymer/polymer/lib/utils/path.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/property-accessors.js","webpack:///./node_modules/@polymer/polymer/lib/utils/async.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/template-stamp.js"],"names":["window","JSCompiler_renameProperty","prop","obj","Polymer","caseMap","DASH_TO_CAMEL","CAMEL_TO_DASH","dashToCamelCase","dash","indexOf","replace","m","toUpperCase","camelToDashCase","camel","toLowerCase","CSS_URL_RX","ABS_URL","workingURL","resolveDoc","resolveUrl","url","baseURI","test","undefined","u","URL","pathname","href","e","document","location","implementation","createHTMLDocument","base","createElement","head","appendChild","anchor","body","resolveCss","cssText","pre","post","pathFromUrl","substring","lastIndexOf","dedupeId","MixinFunction","prototype","__mixinApplications","__mixinSet","dedupingMixin","mixin","mixinApplications","WeakMap","mixinDedupeId","baseSet","map","extended","get","set","mixinSet","Object","create","settings","useShadow","ShadyDOM","useNativeCSSProperties","Boolean","ShadyCSS","nativeCss","useNativeCustomElements","customElements","polyfillWrapFlushCallback","rootPath","setRootPath","path","sanitizeDOMValue","setSanitizeDOMValue","newSanitizeDOMValue","MyElement","properties","name","type","String","value","template","define","Element","ElementMixin","HTMLElement","polymerElementBase","PropertyEffects","ownPropertiesForClass","klass","hasOwnProperty","__ownProperties","ownObserversForClass","__ownObservers","observers","flattenProperties","flattenedProps","props","p","o","propertiesForClass","__classProperties","superCtor","getPrototypeOf","constructor","PolymerElement","assign","propertyDefaultsForClass","__classPropertyDefaults","info","hasClassFinalized","finalizeClassAndSuper","proto","finalize","finalizeClass","__finalized","is","register","finalizeProperties","finalizeObservers","t","innerHTML","cloneNode","_template","createPropertyFromConfig","dynamicFns","i","length","_createMethodObserver","allProps","computed","readOnly","_hasReadOnlyEffect","_createComputedProperty","_createReadOnlyProperty","reflectToAttribute","_hasReflectEffect","_createReflectedProperty","notify","_hasNotifyEffect","_createNotifyingProperty","observer","_createPropertyObserver","finalizeTemplate","ext","cssFromModuleImports","cssFromTemplate","style","textContent","content","insertBefore","firstChild","prepareTemplate","_bindTemplate","observedAttributes","list","push","__observedAttributes","DomModule","import","importPath","module","_importPath","assetpath","root","$","_initializeProperties","instanceCount","__polymerFinalized","resolveUrl$0","__proto__","localName","p$","call","_hasAccessor","_setPendingProperty","connectedCallback","styleElement","_enableProperties","disconnectedCallback","ready","_stampTemplate","_readyClients","_attachDom","dom","attachShadow","shadowRoot","mode","Error","attributeChangedCallback","old","property","_attributeToProperty","updateStyles","styleSubtree","_parseTemplateContent","templateInfo","nodeInfo","registrations","_regLog","console","log","dumpRegistrations","forEach","styleDocument","MODULE_STYLE_LINK_SELECTOR","INCLUDE_ATTR","importModule","moduleId","PolymerDomModule","templateWithAssetPath","cssFromModules","moduleIds","modules","trim","split","cssFromModule","_cssText","_cssFromModuleImports","querySelector","warn","e$","querySelectorAll","include","getAttribute","parentNode","removeChild","importDoc","container","lcModules","findModule","id","styleOutsideTemplateCheck","inst","selector","__assetpath","owner","HTMLImports","importForElement","ownerDocument","CaseMap","TYPES","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","READ_ONLY","DataTrigger","DataEffect","PropertyEffectsType","ensureOwnEffectMap","model","effects","protoFx","instFx","Array","runEffects","oldProps","hasPaths","extraArgs","ran","runEffectsForProperty","rootProperty","root$0","fxs","l","fx","lastRun","pathMatchesTrigger","trigger","fn","triggerPath","structured","isAncestor","wildcard","isDescendant","runObserverEffect","methodName","changedProp","__data","dynamicFn","runNotifyEffects","notifyProps","notified","notifyPath","host","__dataHost","_invalidateProperties","eventName","camelToDashCase$0","dispatchNotifyEvent","detail","queueProperty","dispatchEvent","CustomEvent","runNotifyEffect","get$0","handleNotification","event","fromProp","toPath","negate","fromPath","translate","target","_setPendingPropertyOrPath","runReflectEffect","attrName","_propertyToAttribute","runComputedEffects","changedProps","computeEffects","inputProps","__dataOld","__dataPending","runComputedEffect","result","runMethodEffect","computedProp","methodInfo","__dataHasAccessor","computeLinkedPaths","links","__dataLinkedPaths","link","a","b","addBinding","kind","parts","literal","bindings","binding","isCompound","shouldAddListener","listenerEvent","listenerNegate","index","nodeInfoList","part","compoundIndex","addEffectForBindingPart","dependencies","evaluator","j","parseArg","_addTemplatePropertyEffect","runBindingEffect","nodeList","node","source","_enqueueClient","_evaluateBinding","applyBindingValue","computeBindingValue","_valueToNodeAttribute","_setUnmanagedPropertyToNode","storage","__dataCompoundStorage","join","setupBindings","setupCompoundStorage","addNotifyListener","literals","addEventListener","createMethodEffect","sig","effectFn","static","args","arg","_addPropertyEffect","context","_methodHost","marshalArgs","apply","emptyArray","IDENT","NUMBER","SQUOTE_STRING","DQUOTE_STRING","STRING","ARGUMENT","ARGUMENTS","ARGUMENT_LIST","BINDING","OPEN_BRACKET","CLOSE_BRACKET","NEGATE","EXPRESSION","bindingRegex","RegExp","literalFromParts","s","parseMethod","expression","match","parseArgs","argList","rawArg","fc","slice","Number","isPath$0","data","values","v","baseChanged","matches","notifySplices","array","splices","splicesPath","indexSplices","notifySplice","addedCount","removed","object","upper","superClass","propertyEffectsBase","TemplateStamp","PropertyAccessors","__dataClientsReady","__dataPendingClients","__dataToNotify","__dataHasPaths","__dataTemp","__dataClientsInitialized","__computeEffects","__reflectEffects","__notifyEffects","__propagateEffects","__observeEffects","__readOnly","__dataCounter","__templateInfo","PROPERTY_EFFECT_TYPES","hostStack","registerHost","_initializeProtoProperties","_initializeInstanceProperties","effect","_createPropertyAccessor","_removePropertyEffect","idx","splice","_hasPropertyEffect","_hasComputedEffect","shouldNotify","isPathNotification","isArray","set$0","_shouldPropertyChange","isPath","prevProps","_setProperty","__dataReady","_flushProperties","client","_flushClients","__enableOrFlushClients","clients","__dataEnabled","setProperties","setReadOnly","_propertiesChanged","currentProps","_propagatePropertyChanges","propertyEffects","nextTemplateInfo","linkPaths","to","from","normalize","unlinkPaths","items","len","ret","pop","hadLength","start","deleteCount","Math","floor","shift","unshift","propPath","arguments","protectedSetter","attr","addPropertyEffect","createPropertyObserver","createMethodObserver","createNotifyingProperty","createReadOnlyProperty","createReflectedProperty","createComputedProperty","bindTemplate","instanceBinding","_parseTemplate","wasPreBound","last","__templateInfoLast","previousTemplateInfo","hostProps","propEffects","beginHosting","endHosting","nodes","childNodes","n","nextSibling","_removeBoundDom","_parseTemplateNode","noted","nodeType","Node","TEXT_NODE","_parseBindings","_parseTemplateNodeAttribute","origName","setAttribute","removeAttribute","_parseTemplateNestedTemplate","text","lastIndex","exec","customEvent","notifyEvent","colon","signature","stack","stackLen","dotIndex","newBase","toString","isDeep","microtask","nativeProperties","getOwnPropertyNames","saveAccessorValue","__dataProto","createPropertiesForAttributes","a$","__serializing","__dataInvalid","__dataInstanceProps","_ensureAttribute","attribute","hasAttribute","_deserializeValue","str","_serializeValue","Date","JSON","stringify","x","outValue","parse","defineProperty","changed","_isPropertyPending","run","AsyncInterface","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","createTextNode","MutationObserver","microtaskFlush","observe","characterData","cb","setTimeout","timeOut","after","delay","cancel","clearTimeout","bind","animationFrame","requestAnimationFrame","cancelAnimationFrame","idlePeriod","requestIdleCallback","handle","cancelIdleCallback","microTask","callback","templateExtensions","wrapTemplateExtension","replaceChild","attributes","findTemplateNode","parent","parentInfo","parentIndex","applyIdToMap","applyEventListener","events","_addMethodEventListenerToNode","applyTemplateContent","_templateInfo","createNodeEventHandler","handler","outerTemplateInfo","stripWhiteSpace","element","hasInsertionPoint","_parseTemplateChildNodes","hasAttributes","_parseTemplateNodeAttributes","next","childInfo","infoIndex","createDocumentFragment","attrs","_contentForTemplate","HTMLTemplateElement","decorate","importNode","__noInsertionPoint","_addEventListenerToNode","_removeEventListenerFromNode","removeEventListener"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 468bbdd5574fc472b489","window.JSCompiler_renameProperty = function(prop, obj) { return prop; }\n\n/** @namespace */\nlet Polymer;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/boot.js","import './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/case-map.js","import './boot.js';\n\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nlet ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\nlet workingURL;\nlet resolveDoc;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nfunction resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    return (new URL(url, baseURI)).href;\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nfunction resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n    return pre + '\\'' +\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n      '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nfunction pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n\nexport { resolveCss };\nexport { resolveUrl };\nexport { pathFromUrl };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/resolve-url.js","import './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return dedupingMixin;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/mixin.js","import './boot.js';\nimport { pathFromUrl } from './resolve-url.js';\n\n/**\n * Legacy settings.\n * @namespace\n * @memberof Polymer\n */\nconst settings = undefined || {};\nexport const useShadow = !(window.ShadyDOM);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\nexport { settings as Settings };\n\n/**\n * Globally settable property that is automatically assigned to\n * `Polymer.ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `Polymer.rootPath` to provide a stable application mount path when\n * using client side routing.\n *\n * @memberof Polymer\n */\nlet rootPath = undefined ||\n  pathFromUrl(document.baseURI || window.location.href);\n\nexport { rootPath };\n\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM. The callback signature is:\n *\n *     Polymer = {\n *       sanitizeDOMValue: function(value, name, type, node) { ... }\n *     }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,Node):*)|undefined}\n * @memberof Polymer\n */\nlet sanitizeDOMValue = undefined;\n\nexport { sanitizeDOMValue };\n\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/settings.js","'use strict';\n\nimport { Element as PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nexport class MyElement extends PolymerElement {\n    static get properties() {\n      return {\n        name: {\n          type: String,\n          value: 'Foobar'\n        }\n      } \n    }\n\n    static get template() {\n      return `\n      <h1>Hello [[name]]!</h1>\n    `;\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import { ElementMixin } from './lib/mixins/element-mixin.js';\n\n/**\n * Base class that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * @customElement\n * @polymer\n * @memberof Polymer\n * @constructor\n * @implements {Polymer_ElementMixin}\n * @extends HTMLElement\n * @appliesMixin Polymer.ElementMixin\n * @summary Custom element base class that provides the core API for Polymer's\n *   key meta-programming features including template stamping, data-binding,\n *   attribute deserialization, and property change observation\n */\nconst Element = ElementMixin(HTMLElement);\nexport { Element };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/polymer-element.js","import '../utils/boot.js';\nimport { rootPath as rootPath$0 } from '../utils/settings.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport * as caseMap$0 from '../utils/case-map.js';\nimport { camelToDashCase } from '../utils/case-map.js';\nimport { cssFromModuleImports, cssFromTemplate } from '../utils/style-gather.js';\nimport { resolveUrl as resolveUrl$0 } from '../utils/resolve-url.js';\nimport { DomModule } from '../elements/dom-module.js';\nimport { PropertyEffects } from './property-effects.js';\n\nexport const ElementMixin = dedupingMixin(base => {\n\n  /**\n   * @constructor\n   * @extends {base}\n   * @implements {Polymer_PropertyEffects}\n   */\n  const polymerElementBase = PropertyEffects(base);\n\n  let caseMap = caseMap$0;\n\n  /**\n   * Returns the `properties` object specifically on `klass`. Use for:\n   * (1) super chain mixes togther to make `propertiesForClass` which is\n   * then used to make `observedAttributes`.\n   * (2) properties effects and observers are created from it at `finalize` time.\n   *\n   * @param {HTMLElement} klass Element class\n   * @return {Object} Object containing own properties for this class\n   * @private\n   */\n  function ownPropertiesForClass(klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__ownProperties', klass))) {\n      klass.__ownProperties =\n        klass.hasOwnProperty(JSCompiler_renameProperty('properties', klass)) ?\n        /** @type PolymerElementConstructor */ (klass).properties : {};\n    }\n    return klass.__ownProperties;\n  }\n\n  /**\n   * Returns the `observers` array specifically on `klass`. Use for\n   * setting up observers.\n   *\n   * @param {HTMLElement} klass Element class\n   * @return {Array} Array containing own observers for this class\n   * @private\n   */\n  function ownObserversForClass(klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__ownObservers', klass))) {\n      klass.__ownObservers =\n        klass.hasOwnProperty(JSCompiler_renameProperty('observers', klass)) ?\n        /** @type PolymerElementConstructor */ (klass).observers : [];\n    }\n    return klass.__ownObservers;\n  }\n\n  /**\n   * Mixes `props` into `flattenedProps` but upgrades shorthand type\n   * syntax to { type: Type}.\n   *\n   * @param {Object} flattenedProps Bag to collect flattened properties into\n   * @param {Object} props Bag of properties to add to `flattenedProps`\n   * @return {Object} The input `flattenedProps` bag\n   * @private\n   */\n  function flattenProperties(flattenedProps, props) {\n    for (let p in props) {\n      let o = props[p];\n      if (typeof o == 'function') {\n        o = { type: o };\n      }\n      flattenedProps[p] = o;\n    }\n    return flattenedProps;\n  }\n\n  /**\n   * Returns a flattened list of properties mixed together from the chain of all\n   * constructor's `config.properties`. This list is used to create\n   * (1) observedAttributes,\n   * (2) class property default values\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   * @suppress {missingProperties} class.prototype is not a property for some reason?\n   * @private\n   */\n  function propertiesForClass(klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__classProperties', klass))) {\n      klass.__classProperties =\n      flattenProperties({}, ownPropertiesForClass(klass));\n      let superCtor = Object.getPrototypeOf(klass.prototype).constructor;\n      if (superCtor.prototype instanceof PolymerElement) {\n        klass.__classProperties = Object.assign(\n          Object.create(propertiesForClass(/** @type PolymerElementConstructor */(superCtor))),\n          klass.__classProperties);\n      }\n    }\n    return klass.__classProperties;\n  }\n\n  /**\n   * Returns a list of properties with default values.\n   * This list is created as an optimization since it is a subset of\n   * the list returned from `propertiesForClass`.\n   * This list is used in `_initializeProperties` to set property defaults.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   *   that have default values\n   * @private\n   */\n  function propertyDefaultsForClass(klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__classPropertyDefaults', klass))) {\n      klass.__classPropertyDefaults = null;\n      let props = propertiesForClass(klass);\n      for (let p in props) {\n        let info = props[p];\n        if ('value' in info) {\n          klass.__classPropertyDefaults = klass.__classPropertyDefaults || {};\n          klass.__classPropertyDefaults[p] = info;\n        }\n      }\n    }\n    return klass.__classPropertyDefaults;\n  }\n\n  /**\n   * Returns true if a `klass` has finalized. Called in `ElementClass.finalize()`\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {boolean} True if all metaprogramming for this class has been\n   *   completed\n   * @private\n   */\n  function hasClassFinalized(klass) {\n    return klass.hasOwnProperty(JSCompiler_renameProperty('__finalized', klass));\n  }\n\n  /**\n   * Called by `ElementClass.finalize()`. Ensures this `klass` and\n   * *all superclasses* are finalized by traversing the prototype chain\n   * and calling `klass.finalize()`.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @private\n   */\n  function finalizeClassAndSuper(klass) {\n    let proto = /** @type PolymerElementConstructor */ (klass).prototype;\n    let superCtor = Object.getPrototypeOf(proto).constructor;\n    if (superCtor.prototype instanceof PolymerElement) {\n      superCtor.finalize();\n    }\n    finalizeClass(klass);\n  }\n\n  /**\n   * Configures a `klass` based on a staic `klass.config` object and\n   * a `template`. This includes creating accessors and effects\n   * for properties in `config` and the `template` as well as preparing the\n   * `template` for stamping.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @private\n   */\n  function finalizeClass(klass) {\n    klass.__finalized = true;\n    let proto = /** @type PolymerElementConstructor */ (klass).prototype;\n    if (klass.hasOwnProperty(\n      JSCompiler_renameProperty('is', klass)) && klass.is) {\n      register(proto);\n    }\n    let props = ownPropertiesForClass(klass);\n    if (props) {\n      finalizeProperties(proto, props);\n    }\n    let observers = ownObserversForClass(klass);\n    if (observers) {\n      finalizeObservers(proto, observers, props);\n    }\n    // note: create \"working\" template that is finalized at instance time\n    let template = /** @type PolymerElementConstructor */ (klass).template;\n    if (template) {\n      if (typeof template === 'string') {\n        let t = document.createElement('template');\n        t.innerHTML = template;\n        template = t;\n      } else {\n        template = template.cloneNode(true);\n      }\n      proto._template = template;\n    }\n  }\n\n  /**\n   * Configures a `proto` based on a `properties` object.\n   * Leverages `PropertyEffects` to create property accessors and effects\n   * supporting, observers, reflecting to attributes, change notification,\n   * computed properties, and read only properties.\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *    and effects to\n   * @param {Object} properties Flattened bag of property descriptors for\n   *    this class\n   * @private\n   */\n  function finalizeProperties(proto, properties) {\n    for (let p in properties) {\n      createPropertyFromConfig(proto, p, properties[p], properties);\n    }\n  }\n\n  /**\n   * Configures a `proto` based on a `observers` array.\n   * Leverages `PropertyEffects` to create observers.\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {Object} observers Flattened array of observer descriptors for\n   *   this class\n   * @param {Object} dynamicFns Object containing keys for any properties\n   *   that are functions and should trigger the effect when the function\n   *   reference is changed\n   * @private\n   */\n  function finalizeObservers(proto, observers, dynamicFns) {\n    for (let i=0; i < observers.length; i++) {\n      proto._createMethodObserver(observers[i], dynamicFns);\n    }\n  }\n\n  /**\n   * Creates effects for a property.\n   *\n   * Note, once a property has been set to\n   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n   * these values may not be changed. For example, a subclass cannot\n   * alter these settings. However, additional `observers` may be added\n   * by subclasses.\n   *\n   * The info object should may contain property metadata as follows:\n   *\n   * * `type`: {function} type to which an attribute matching the property\n   * is deserialized. Note the property is camel-cased from a dash-cased\n   * attribute. For example, 'foo-bar' attribute is dersialized to a\n   * property named 'fooBar'.\n   *\n   * * `readOnly`: {boolean} creates a readOnly property and\n   * makes a private setter for the private of the form '_setFoo' for a\n   * property 'foo',\n   *\n   * * `computed`: {string} creates a computed property. A computed property\n   * also automatically is set to `readOnly: true`. The value is calculated\n   * by running a method and arguments parsed from the given string. For\n   * example 'compute(foo)' will compute a given property when the\n   * 'foo' property changes by executing the 'compute' method. This method\n   * must return the computed value.\n   *\n   * * `reflectToAttriute`: {boolean} If true, the property value is reflected\n   * to an attribute of the same name. Note, the attribute is dash-cased\n   * so a property named 'fooBar' is reflected as 'foo-bar'.\n   *\n   * * `notify`: {boolean} sends a non-bubbling notification event when\n   * the property changes. For example, a property named 'foo' sends an\n   * event named 'foo-changed' with `event.detail` set to the value of\n   * the property.\n   *\n   * * observer: {string} name of a method that runs when the property\n   * changes. The arguments of the method are (value, previousValue).\n   *\n   * Note: Users may want control over modifying property\n   * effects via subclassing. For example, a user might want to make a\n   * reflectToAttribute property not do so in a subclass. We've chosen to\n   * disable this because it leads to additional complication.\n   * For example, a readOnly effect generates a special setter. If a subclass\n   * disables the effect, the setter would fail unexpectedly.\n   * Based on feedback, we may want to try to make effects more malleable\n   * and/or provide an advanced api for manipulating them.\n   * Also consider adding warnings when an effect cannot be changed.\n   *\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {string} name Name of the property.\n   * @param {Object} info Info object from which to create property effects.\n   * Supported keys:\n   * @param {Object} allProps Flattened map of all properties defined in this\n   *   element (including inherited properties)\n   * @private\n   */\n  function createPropertyFromConfig(proto, name, info, allProps) {\n    // computed forces readOnly...\n    if (info.computed) {\n      info.readOnly = true;\n    }\n    // Note, since all computed properties are readOnly, this prevents\n    // adding additional computed property effects (which leads to a confusing\n    // setup where multiple triggers for setting a property)\n    // While we do have `hasComputedEffect` this is set on the property's\n    // dependencies rather than itself.\n    if (info.computed  && !proto._hasReadOnlyEffect(name)) {\n      proto._createComputedProperty(name, info.computed, allProps);\n    }\n    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n      proto._createReadOnlyProperty(name, !info.computed);\n    }\n    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n      proto._createReflectedProperty(name);\n    }\n    if (info.notify && !proto._hasNotifyEffect(name)) {\n      proto._createNotifyingProperty(name);\n    }\n    // always add observer\n    if (info.observer) {\n      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n    }\n  }\n\n  /**\n   * Configures an element `proto` to function with a given `template`.\n   * The element name `is` and extends `ext` must be specified for ShadyCSS\n   * style scoping.\n   *\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {!HTMLTemplateElement} template Template to process and bind\n   * @param {string} baseURI URL against which to resolve urls in\n   *   style element cssText\n   * @param {string} is Tag name (or type extension name) for this element\n   * @param {string=} ext For type extensions, the tag name that was extended\n   * @private\n   */\n  function finalizeTemplate(proto, template, baseURI, is, ext) {\n    // support `include=\"module-name\"`\n    let cssText =\n      cssFromModuleImports(is) +\n      cssFromTemplate(template, baseURI);\n    if (cssText) {\n      let style = document.createElement('style');\n      style.textContent = cssText;\n      template.content.insertBefore(style, template.content.firstChild);\n    }\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(template, is, ext);\n    }\n    proto._bindTemplate(template);\n  }\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @unrestricted\n   * @implements {Polymer_ElementMixin}\n   */\n  class PolymerElement extends polymerElementBase {\n\n    /**\n     * Standard Custom Elements V1 API.  The default implementation returns\n     * a list of dash-cased attributes based on a flattening of all properties\n     * declared in `static get properties()` for this element and any\n     * superclasses.\n     *\n     * @return {Array} Observed attribute list\n     */\n    static get observedAttributes() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n        let list = [];\n        let properties = propertiesForClass(this);\n        for (let prop in properties) {\n          list.push(camelToDashCase(prop));\n        }\n        this.__observedAttributes = list;\n      }\n      return this.__observedAttributes;\n    }\n\n    /**\n     * Called automatically when the first element instance is created to\n     * ensure that class finalization work has been completed.\n     * May be called by users to eagerly perform class finalization work\n     * prior to the creation of the first element instance.\n     *\n     * Class finalization work generally includes meta-programming such as\n     * creating property accessors and any property effect metadata needed for\n     * the features used.\n     *\n     * @public\n     */\n    static finalize() {\n      if (!hasClassFinalized(this)) {\n        finalizeClassAndSuper(this);\n      }\n    }\n\n    /**\n     * Returns the template that will be stamped into this element's shadow root.\n     *\n     * If a `static get is()` getter is defined, the default implementation\n     * will return the first `<template>` in a `dom-module` whose `id`\n     * matches this element's `is`.\n     *\n     * Users may override this getter to return an arbitrary template\n     * (in which case the `is` getter is unnecessary). The template returned\n     * may be either an `HTMLTemplateElement` or a string that will be\n     * automatically parsed into a template.\n     *\n     * Note that when subclassing, if the super class overrode the default\n     * implementation and the subclass would like to provide an alternate\n     * template via a `dom-module`, it should override this getter and\n     * return `Polymer.DomModule.import(this.is, 'template')`.\n     *\n     * If a subclass would like to modify the super class template, it should\n     * clone it rather than modify it in place.  If the getter does expensive\n     * work such as cloning/modifying a template, it should memoize the\n     * template for maximum performance:\n     *\n     *   let memoizedTemplate;\n     *   class MySubClass extends MySuperClass {\n     *     static get template() {\n     *       if (!memoizedTemplate) {\n     *         memoizedTemplate = super.template.cloneNode(true);\n     *         let subContent = document.createElement('div');\n     *         subContent.textContent = 'This came from MySubClass';\n     *         memoizedTemplate.content.appendChild(subContent);\n     *       }\n     *       return memoizedTemplate;\n     *     }\n     *   }\n     *\n     * @return {HTMLTemplateElement|string} Template to be stamped\n     */\n    static get template() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n        this._template = DomModule && DomModule.import(\n          /** @type PolymerElementConstructor*/ (this).is, 'template') ||\n          // note: implemented so a subclass can retrieve the super\n          // template; call the super impl this way so that `this` points\n          // to the superclass.\n          Object.getPrototypeOf(/** @type PolymerElementConstructor*/ (this).prototype).constructor.template;\n      }\n      return this._template;\n    }\n\n    /**\n     * Path matching the url from which the element was imported.\n     * This path is used to resolve url's in template style cssText.\n     * The `importPath` property is also set on element instances and can be\n     * used to create bindings relative to the import path.\n     * Defaults to the path matching the url containing a `dom-module` element\n     * matching this element's static `is` property.\n     * Note, this path should contain a trailing `/`.\n     *\n     * @return {string} The import path for this element class\n     */\n    static get importPath() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n          const module = DomModule && DomModule.import(/** @type PolymerElementConstructor */ (this).is);\n          this._importPath = module ? module.assetpath : '' ||\n          Object.getPrototypeOf(/** @type PolymerElementConstructor*/ (this).prototype).constructor.importPath;\n      }\n      return this._importPath;\n    }\n\n    constructor() {\n      super();\n      /** @type {HTMLTemplateElement} */\n      this._template;\n      /** @type {string} */\n      this._importPath;\n      /** @type {string} */\n      this.rootPath;\n      /** @type {string} */\n      this.importPath;\n      /** @type {StampedTemplate | HTMLElement | ShadowRoot} */\n      this.root;\n      /** @type {!Object<string, !Node>} */\n      this.$;\n    }\n\n    /**\n     * Overrides the default `Polymer.PropertyAccessors` to ensure class\n     * metaprogramming related to property accessors and effects has\n     * completed (calls `finalize`).\n     *\n     * It also initializes any property defaults provided via `value` in\n     * `properties` metadata.\n     *\n     * @override\n     * @suppress {invalidCasts}\n     */\n    _initializeProperties() {\n      instanceCount++;\n      this.constructor.finalize();\n      const importPath = this.constructor.importPath;\n      // note: finalize template when we have access to `localName` to\n      // avoid dependence on `is` for polyfilling styling.\n      if (this._template && !this._template.__polymerFinalized) {\n        this._template.__polymerFinalized = true;\n        const baseURI =\n          importPath ? resolveUrl$0(importPath) : '';\n        finalizeTemplate(/** @type {!PolymerElement} */(this.__proto__), this._template, baseURI,\n          /**@type {!HTMLElement}*/(this).localName);\n      }\n      super._initializeProperties();\n      // set path defaults\n      this.rootPath = rootPath$0;\n      this.importPath = importPath;\n      // apply property defaults...\n      let p$ = propertyDefaultsForClass(this.constructor);\n      if (!p$) {\n        return;\n      }\n      for (let p in p$) {\n        let info = p$[p];\n        // Don't set default value if there is already an own property, which\n        // happens when a `properties` property with default but no effects had\n        // a property set (e.g. bound) by its host before upgrade\n        if (!this.hasOwnProperty(p)) {\n          let value = typeof info.value == 'function' ?\n            info.value.call(this) :\n            info.value;\n          // Set via `_setProperty` if there is an accessor, to enable\n          // initializing readOnly property defaults\n          if (this._hasAccessor(p)) {\n            this._setPendingProperty(p, value, true);\n          } else {\n            this[p] = value;\n          }\n        }\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `connectedCallback`.\n     *\n     * The default implementation enables the property effects system and\n     * flushes any pending properties, and updates shimmed CSS properties\n     * when using the ShadyCSS scoping/custom properties polyfill.\n     *\n     * @suppress {invalidCasts}\n     */\n    connectedCallback() {\n      if (window.ShadyCSS && this._template) {\n        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));\n      }\n      this._enableProperties();\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `disconnectedCallback`.\n     */\n    disconnectedCallback() {}\n\n    /**\n     * Stamps the element template.\n     *\n     * @override\n     */\n    ready() {\n      if (this._template) {\n        this.root = this._stampTemplate(this._template);\n        this.$ = this.root.$;\n      }\n      super.ready();\n    }\n\n    /**\n     * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n     * element dom by calling `_attachDom` with the dom stamped from the\n     * element's template via `_stampTemplate`. Note that this allows\n     * client dom to be attached to the element prior to any observers\n     * running.\n     *\n     * @override\n     */\n    _readyClients() {\n      if (this._template) {\n        this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));\n      }\n      // The super._readyClients here sets the clients initialized flag.\n      // We must wait to do this until after client dom is created/attached\n      // so that this flag can be checked to prevent notifications fired\n      // during this process from being handled before clients are ready.\n      super._readyClients();\n    }\n\n\n    /**\n     * Attaches an element's stamped dom to itself. By default,\n     * this method creates a `shadowRoot` and adds the dom to it.\n     * However, this method may be overridden to allow an element\n     * to put its dom in another location.\n     *\n     * @throws {Error}\n     * @suppress {missingReturn}\n     * @param {StampedTemplate} dom to attach to the element.\n     * @return {ShadowRoot} node to which the dom has been attached.\n     */\n    _attachDom(dom) {\n      if (this.attachShadow) {\n        if (dom) {\n          if (!this.shadowRoot) {\n            this.attachShadow({mode: 'open'});\n          }\n          this.shadowRoot.appendChild(dom);\n          return this.shadowRoot;\n        }\n        return null;\n      } else {\n        throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n        'Polymer.Element can create dom as children instead of in ' +\n        'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `attributeChangedCallback`.\n     *\n     * By default, attributes declared in `properties` metadata are\n     * deserialized using their `type` information to properties of the\n     * same name.  \"Dash-cased\" attributes are deserialzed to \"camelCase\"\n     * properties.\n     *\n     * @param {string} name Name of attribute.\n     * @param {?string} old Old value of attribute.\n     * @param {?string} value Current value of attribute.\n     * @override\n     */\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        let property = caseMap.dashToCamelCase(name);\n        let type = propertiesForClass(this.constructor)[property].type;\n        if (!this._hasReadOnlyEffect(property)) {\n          this._attributeToProperty(name, value, type);\n        }\n      }\n    }\n\n    /**\n     * When using the ShadyCSS scoping and custom property shim, causes all\n     * shimmed styles in this element (and its subtree) to be updated\n     * based on current custom property values.\n     *\n     * The optional parameter overrides inline custom property styles with an\n     * object of properties where the keys are CSS properties, and the values\n     * are strings.\n     *\n     * Example: `this.updateStyles({'--color': 'blue'})`\n     *\n     * These properties are retained unless a value of `null` is set.\n     *\n     * @param {Object=} properties Bag of custom property key/values to\n     *   apply to this element.\n     * @suppress {invalidCasts}\n     */\n    updateStyles(properties) {\n      if (window.ShadyCSS) {\n        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);\n      }\n    }\n\n    /**\n     * Rewrites a given URL relative to a base URL. The base URL defaults to\n     * the original location of the document containing the `dom-module` for\n     * this element. This method will return the same URL before and after\n     * bundling.\n     *\n     * @param {string} url URL to resolve.\n     * @param {string=} base Optional base URL to resolve against, defaults\n     * to the element's `importPath`\n     * @return {string} Rewritten URL relative to base\n     */\n    resolveUrl(url, base) {\n      if (!base && this.importPath) {\n        base = resolveUrl$0(this.importPath);\n      }\n      return resolveUrl$0(url, base);\n    }\n\n    /**\n     * Overrides `PropertyAccessors` to add map of dynamic functions on\n     * template info, for consumption by `PropertyEffects` template binding\n     * code. This map determines which method templates should have accessors\n     * created for them.\n     *\n     * @override\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      templateInfo.dynamicFns = templateInfo.dynamicFns || propertiesForClass(this);\n      return super._parseTemplateContent(template, templateInfo, nodeInfo);\n    }\n\n  }\n\n  return PolymerElement;\n});\n\nexport let instanceCount = 0;\nexport const registrations = [];\n\nexport function _regLog(prototype) {\n  console.log('[' + prototype.is + ']: registered');\n}\n\nexport function register(prototype) {\n  registrations.push(prototype);\n  undefined && _regLog(prototype);\n}\n\nexport function dumpRegistrations() {\n  registrations.forEach(_regLog);\n}\n\nexport const updateStyles = function(props) {\n  if (window.ShadyCSS) {\n    window.ShadyCSS.styleDocument(props);\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/mixins/element-mixin.js","import { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\n\nfunction importModule(moduleId) {\n  const /** Polymer.DomModule */ PolymerDomModule = customElements.get('dom-module');\n  if (!PolymerDomModule) {\n    return null;\n  }\n  return PolymerDomModule.import(moduleId);\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\nexport function cssFromModules(moduleIds) {\n  let modules = moduleIds.trim().split(/\\s+/);\n  let cssText = '';\n  for (let i=0; i < modules.length; i++) {\n    cssText += cssFromModule(modules[i]);\n  }\n  return cssText;\n}\n\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = m.querySelector('template');\n    if (t) {\n      cssText += cssFromTemplate(t, /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  // if element is a template, get content from its .content\n  let e$ = template.content.querySelectorAll('style');\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    // support style sharing by allowing styles to \"include\"\n    // other dom-modules that contain styling\n    let include = e.getAttribute(INCLUDE_ATTR);\n    if (include) {\n      cssText += cssFromModules(include);\n    }\n    e.parentNode.removeChild(e);\n    cssText += baseURI ?\n      resolveCss(e.textContent, baseURI) : e.textContent;\n  }\n  return cssText;\n}\n\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\nexport function _cssFromModuleImports(module) {\n  let cssText = '';\n  let p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      let importDoc = p.import;\n      // NOTE: polyfill affordance.\n      // under the HTMLImports polyfill, there will be no 'body',\n      // but the import pseudo-doc can be used directly.\n      let container = importDoc.body ? importDoc.body : importDoc;\n      cssText +=\n        resolveCss(container.textContent,\n          importDoc.baseURI);\n    }\n  }\n  return cssText;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/style-gather.js","import '../utils/boot.js';\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\n\nlet modules = {};\nlet lcModules = {};\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @memberof Polymer\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nclass DomModule extends HTMLElement {\n\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  attributeChangedCallback(name, old, value) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accomodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      this.id = id;\n      // store id separate from lowercased id so that\n      // in all cases mixedCase id will stored distinctly\n      // and lowercase version is a fallback\n      modules[id] = this;\n      lcModules[id.toLowerCase()] = this;\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n\nexport { DomModule };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/elements/dom-module.js","import '../utils/boot.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { root as root$0, isAncestor, isDescendant, get as get$0, translate, isPath as isPath$0, set as set$0, normalize } from '../utils/path.js';\nimport * as caseMap from '../utils/case-map.js';\nimport { camelToDashCase as camelToDashCase$0, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertyAccessors } from './property-accessors.js';\nimport { TemplateStamp } from './template-stamp.js';\nimport { sanitizeDOMValue } from '../utils/settings.js';\n\n/** @const {Object} */\nconst CaseMap = caseMap;\n\n// Monotonically increasing unique ID used for de-duping effects triggered\n// from multiple properties in the same turn\nlet dedupeId = 0;\n\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\n/**\n * @typedef {{\n * name: (string | undefined),\n * structured: (boolean | undefined),\n * wildcard: (boolean | undefined)\n * }}\n */\nlet DataTrigger; //eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n * info: ?,\n * trigger: (!DataTrigger | undefined),\n * fn: (!Function | undefined)\n * }}\n */\nlet DataEffect; //eslint-disable-line no-unused-vars\n\nlet PropertyEffectsType; //eslint-disable-line no-unused-vars\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    for (let p in effects) {\n      let protoFx = effects[p];\n      let instFx = effects[p] = Array(protoFx.length);\n      for (let i=0; i<protoFx.length; i++) {\n        instFx[i] = protoFx[i];\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {Object} props Bag of current property changes\n * @param {Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    let id = dedupeId++;\n    for (let prop in props) {\n      if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n        ran = true;\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root$0(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    let triggerPath = trigger.name;\n    return (triggerPath == path) ||\n      (trigger.structured && isAncestor(triggerPath, path)) ||\n      (trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  let fn = inst[info.methodName];\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.methodName + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  let rootProperty = root$0(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase$0(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} eventName The name of the event to send ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property changed, the path\n *   that changed (optional).\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  /** @type {!HTMLElement} */(inst).dispatchEvent(new CustomEvent(eventName, { detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root$0(property) : property;\n  let path = rootProperty != property ? property : null;\n  let value = path ? get$0(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property];  // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!PropertyEffectsType} inst Host element instance handling the notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */(event.detail);\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.target[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n      && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {!Object} changedProps Bag of changed properties\n * @param {!Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    let inputProps = changedProps;\n    while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n      Object.assign(oldProps, inst.__dataOld);\n      Object.assign(changedProps, inst.__dataPending);\n      inputProps = inst.__dataPending;\n      inst.__dataPending = null;\n    }\n  }\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nfunction runComputedEffect(inst, property, props, oldProps, info) {\n  let result = runMethodEffect(inst, property, props, oldProps, info);\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!PropertyEffectsType} inst The instance whose props are changing\n * @param {string | !Array<(string|number)>} path Path that has changed\n * @param {*} value Value of changed path\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- bindings ----------------------------------------------\n\n/**\n * Adds binding metadata to the current `nodeInfo`, and binding effects\n * for all part dependencies to `templateInfo`.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {NodeInfo} nodeInfo Node metadata for current template node\n * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n * @param {string} target Target property name\n * @param {!Array<!BindingPart>} parts Array of binding part metadata\n * @param {string=} literal Literal text surrounding binding parts (specified\n *   only for 'property' bindings, since these must be initialized as part\n *   of boot-up)\n * @private\n */\nfunction addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n  // Create binding metadata and add to nodeInfo\n  nodeInfo.bindings = nodeInfo.bindings || [];\n  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n  nodeInfo.bindings.push(binding);\n  // Add listener info to binding metadata\n  if (shouldAddListener(binding)) {\n    let {event, negate} = binding.parts[0];\n    binding.listenerEvent = event || (CaseMap.camelToDashCase(target) + '-changed');\n    binding.listenerNegate = negate;\n  }\n  // Add \"propagate\" property effects to templateInfo\n  let index = templateInfo.nodeInfoList.length;\n  for (let i=0; i<binding.parts.length; i++) {\n    let part = binding.parts[i];\n    part.compoundIndex = i;\n    addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n  }\n}\n\n/**\n * Adds property effects to the given `templateInfo` for the given binding\n * part.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {number} index Index into `nodeInfoList` for this node\n */\nfunction addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n  if (!part.literal) {\n    if (binding.kind === 'attribute' && binding.target[0] === '-') {\n      console.warn('Cannot set attribute ' + binding.target +\n        ' because \"-\" is not a valid attribute starting character');\n    } else {\n      let dependencies = part.dependencies;\n      let info = { index, binding, part, evaluator: constructor };\n      for (let j=0; j<dependencies.length; j++) {\n        let trigger = dependencies[j];\n        if (typeof trigger == 'string') {\n          trigger = parseArg(trigger);\n          trigger.wildcard = true;\n        }\n        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n          fn: runBindingEffect,\n          info, trigger\n        });\n      }\n    }\n  }\n}\n\n/**\n * Implements the \"binding\" (property/path binding) effect.\n *\n * Note that binding syntax is overridable via `_parseBindings` and\n * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n * non-literal parts returned from `_parseBindings`.  However,\n * there is no support for _path_ bindings via custom binding parts,\n * as this is specific to Polymer's path binding syntax.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} path Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n *   metadata\n * @private\n */\nfunction runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n  let node = nodeList[info.index];\n  let binding = info.binding;\n  let part = info.part;\n  // Subpath notification: transform path and set to client\n  // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n  if (hasPaths && part.source && (path.length > part.source.length) &&\n      (binding.kind == 'property') && !binding.isCompound &&\n      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n    let value = props[path];\n    path = translate(part.source, binding.target, path);\n    if (node._setPendingPropertyOrPath(path, value, false, true)) {\n      inst._enqueueClient(node);\n    }\n  } else {\n    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n    // Propagate value to child\n    applyBindingValue(inst, node, binding, part, value);\n  }\n}\n\n/**\n * Sets the value for an \"binding\" (binding) effect to a node,\n * either as a property or attribute.\n *\n * @param {!PropertyEffectsType} inst The instance owning the binding effect\n * @param {Node} node Target node for binding\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {*} value Value to set\n * @private\n */\nfunction applyBindingValue(inst, node, binding, part, value) {\n  value = computeBindingValue(node, value, binding, part);\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, binding.target, binding.kind, node);\n  }\n  if (binding.kind == 'attribute') {\n    // Attribute binding\n    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);\n  } else {\n    // Property binding\n    let prop = binding.target;\n    if (node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n        if (node._setPendingProperty(prop, value)) {\n          inst._enqueueClient(node);\n        }\n      }\n    } else  {\n      inst._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n}\n\n/**\n * Transforms an \"binding\" effect value based on compound & negation\n * effect metadata, as well as handling for special-case properties\n *\n * @param {Node} node Node the value will be set to\n * @param {*} value Value to set\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @return {*} Transformed value to set\n * @private\n */\nfunction computeBindingValue(node, value, binding, part) {\n  if (binding.isCompound) {\n    let storage = node.__dataCompoundStorage[binding.target];\n    storage[part.compoundIndex] = value;\n    value = storage.join('');\n  }\n  if (binding.kind !== 'attribute') {\n    // Some browsers serialize `undefined` to `\"undefined\"`\n    if (binding.target === 'textContent' ||\n        (node.localName == 'input' && binding.target == 'value')) {\n      value = value == undefined ? '' : value;\n    }\n  }\n  return value;\n}\n\n/**\n * Returns true if a binding's metadata meets all the requirements to allow\n * 2-way binding, and therefore a `<property>-changed` event listener should be\n * added:\n * - used curly braces\n * - is a property (not attribute) binding\n * - is not a textContent binding\n * - is not compound\n *\n * @param {!Binding} binding Binding metadata\n * @return {boolean} True if 2-way listener should be added\n * @private\n */\nfunction shouldAddListener(binding) {\n  return Boolean(binding.target) &&\n         binding.kind != 'attribute' &&\n         binding.kind != 'text' &&\n         !binding.isCompound &&\n         binding.parts[0].mode === '{';\n}\n\n/**\n * Setup compound binding storage structures, notify listeners, and dataHost\n * references onto the bound nodeList.\n *\n * @param {!PropertyEffectsType} inst Instance that bas been previously bound\n * @param {TemplateInfo} templateInfo Template metadata\n * @private\n */\nfunction setupBindings(inst, templateInfo) {\n  // Setup compound storage, dataHost, and notify listeners\n  let {nodeList, nodeInfoList} = templateInfo;\n  if (nodeInfoList.length) {\n    for (let i=0; i < nodeInfoList.length; i++) {\n      let info = nodeInfoList[i];\n      let node = nodeList[i];\n      let bindings = info.bindings;\n      if (bindings) {\n        for (let i=0; i<bindings.length; i++) {\n          let binding = bindings[i];\n          setupCompoundStorage(node, binding);\n          addNotifyListener(node, inst, binding);\n        }\n      }\n      node.__dataHost = inst;\n    }\n  }\n}\n\n/**\n * Initializes `__dataCompoundStorage` local storage on a bound node with\n * initial literal data for compound bindings, and sets the joined\n * literal parts to the bound property.\n *\n * When changes to compound parts occur, they are first set into the compound\n * storage array for that property, and then the array is joined to result in\n * the final value set to the property/attribute.\n *\n * @param {Node} node Bound node to initialize\n * @param {Binding} binding Binding metadata\n * @private\n */\nfunction setupCompoundStorage(node, binding) {\n  if (binding.isCompound) {\n    // Create compound storage map\n    let storage = node.__dataCompoundStorage ||\n      (node.__dataCompoundStorage = {});\n    let parts = binding.parts;\n    // Copy literals from parts into storage for this binding\n    let literals = new Array(parts.length);\n    for (let j=0; j<parts.length; j++) {\n      literals[j] = parts[j].literal;\n    }\n    let target = binding.target;\n    storage[target] = literals;\n    // Configure properties with their literal parts\n    if (binding.literal && binding.kind == 'property') {\n      node[target] = binding.literal;\n    }\n  }\n}\n\n/**\n * Adds a 2-way binding notification event listener to the node specified\n *\n * @param {Object} node Child element to add listener to\n * @param {!PropertyEffectsType} inst Host element instance to handle notification event\n * @param {Binding} binding Binding metadata\n * @private\n */\nfunction addNotifyListener(node, inst, binding) {\n  if (binding.listenerEvent) {\n    let part = binding.parts[0];\n    node.addEventListener(binding.listenerEvent, function(e) {\n      handleNotification(e, inst, binding.target, part.source, part.negate);\n    });\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || (dynamicFn &&\n    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = marshalArgs(inst.__data, info.args, property, props);\n    return fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\nconst emptyArray = [];\n\n// Regular expressions used for binding\nconst IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\nconst NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\nconst SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\nconst DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\nconst STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\nconst ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\nconst ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\nconst ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                              '(?:' + ARGUMENTS + '?' + ')' +\n                            '\\\\)\\\\s*' + ')';\nconst BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\nconst OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\nconst CLOSE_BRACKET = '(?:]]|}})';\nconst NEGATE = '(?:(!)\\\\s*)?'; // Group 2\nconst EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\nconst bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n/**\n * Create a string from binding parts of all the literal parts\n *\n * @param {!Array<BindingPart>} parts All parts to stringify\n * @return {string} String made from the literal parts\n */\nfunction literalFromParts(parts) {\n  let s = '';\n  for (let i=0; i<parts.length; i++) {\n    let literal = parts[i].literal;\n    s += literal || '';\n  }\n  return s;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = { methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function(rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '\\$1')\n    ;\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch(fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root$0(arg);\n    // detect structured path (has dots)\n    a.structured = isPath$0(arg);\n    if (a.structured) {\n      a.wildcard = (arg.slice(-2) == '.*');\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\n/**\n * Gather the argument values for a method specified in the provided array\n * of argument metadata.\n *\n * The `path` and `value` arguments are used to fill in wildcard descriptor\n * when the method is being called as a result of a path notification.\n *\n * @param {Object} data Instance data storage object to read properties from\n * @param {!Array<!MethodArg>} args Array of argument metadata\n * @param {string} path Property/path name that triggered the method effect\n * @param {Object} props Bag of current property changes\n * @return {Array<*>} Array of argument values\n * @private\n */\nfunction marshalArgs(data, args, path, props) {\n  let values = [];\n  for (let i=0, l=args.length; i<l; i++) {\n    let arg = args[i];\n    let name = arg.name;\n    let v;\n    if (arg.literal) {\n      v = arg.value;\n    } else {\n      if (arg.structured) {\n        v = get$0(data, name);\n        // when data is not stored e.g. `splices`\n        if (v === undefined) {\n          v = props[name];\n        }\n      } else {\n        v = data[name];\n      }\n    }\n    if (arg.wildcard) {\n      // Only send the actual path changed info if the change that\n      // caused the observer to run matched the wildcard\n      let baseChanged = (name.indexOf(path + '.') === 0);\n      let matches = (path.indexOf(name) === 0 && !baseChanged);\n      values[i] = {\n        path: matches ? path : name,\n        value: matches ? props[path] : v,\n        base: v\n      };\n    } else {\n      values[i] = v;\n    }\n  }\n  return values;\n}\n\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  let splicesPath = path + '.splices';\n  inst.notifyPath(splicesPath, { indexSplices: splices });\n  inst.notifyPath(path + '.length', array.length);\n  // Null here to allow potentially large splice records to be GC'ed.\n  inst.__data[splicesPath] = {indexSplices: null};\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\nexport const PropertyEffects = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @extends {superClass}\n   * @implements {Polymer_PropertyAccessors}\n   * @implements {Polymer_TemplateStamp}\n   * @unrestricted\n   */\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyEffects}\n   * @extends {propertyEffectsBase}\n   * @unrestricted\n   */\n  class PropertyEffects extends propertyEffectsBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__dataClientsReady;\n      /** @type {Array} */\n      this.__dataPendingClients;\n      /** @type {Object} */\n      this.__dataToNotify;\n      /** @type {Object} */\n      this.__dataLinkedPaths;\n      /** @type {boolean} */\n      this.__dataHasPaths;\n      /** @type {Object} */\n      this.__dataCompoundStorage;\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost;\n      /** @type {!Object} */\n      this.__dataTemp;\n      /** @type {boolean} */\n      this.__dataClientsInitialized;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {!Object} */\n      this.__dataPending;\n      /** @type {!Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__computeEffects;\n      /** @type {Object} */\n      this.__reflectEffects;\n      /** @type {Object} */\n      this.__notifyEffects;\n      /** @type {Object} */\n      this.__propagateEffects;\n      /** @type {Object} */\n      this.__observeEffects;\n      /** @type {Object} */\n      this.__readOnly;\n      /** @type {number} */\n      this.__dataCounter;\n      /** @type {!TemplateInfo} */\n      this.__templateInfo;\n    }\n\n    get PROPERTY_EFFECT_TYPES() {\n      return TYPES;\n    }\n\n    _initializeProperties() {\n      super._initializeProperties();\n      hostStack.registerHost(this);\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n\n    /**\n     * Overrides `Polymer.PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     */\n    _initializeProtoProperties(props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     */\n    _initializeInstanceProperties(props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @protected\n     */\n    _addPropertyEffect(property, type, effect) {\n      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     */\n    _removePropertyEffect(property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasPropertyEffect(property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReadOnlyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasNotifyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to attribute\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReflectEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasComputedEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification ||\n          root$0(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get$0(this, path);\n          path = /** @type {string} */ (set$0(this, path, value));\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {\n          computeLinkedPaths(this, path, value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @param {Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @protected\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value == 'object') {\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertyAccessors` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChaged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     * @override\n     */\n    _setPendingProperty(property, value, shouldNotify) {\n      let isPath = this.__dataHasPaths && isPath$0(property);\n      let prevProps = isPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (isPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (isPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     */\n    _invalidateProperties() {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @param {Object} client PropertyEffects client to enqueue\n     * @protected\n     */\n    _enqueueClient(client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @protected\n     */\n    _flushClients() {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients() {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i=0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @protected\n     */\n    _readyClients() {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @public\n     */\n    setProperties(props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          //TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     */\n    ready() {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @override\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      let notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter == 1) {\n        this.__dataTemp = {};\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @protected\n     */\n    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n      let templateInfo = this.__templateInfo;\n      while (templateInfo) {\n        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n          hasPaths, templateInfo.nodeList);\n        templateInfo = templateInfo.nextTemplateInfo;\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @public\n     */\n    linkPaths(to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @public\n     */\n    unlinkPaths(path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n     * Notify that an array has changed.\n     *\n     * Example:\n     *\n     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n     *     ...\n     *     this.items.splice(1, 1, {name: 'Sam'});\n     *     this.items.push({name: 'Bob'});\n     *     this.notifySplices('items', [\n     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n     *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n     *     ]);\n     *\n     * @param {string} path Path that should be notified.\n     * @param {Array} splices Array of splice records indicating ordered\n     *   changes that occurred to the array. Each record should have the\n     *   following fields:\n     *    * index: index at which the change occurred\n     *    * removed: array of items that were removed from this index\n     *    * addedCount: number of new items added at this index\n     *    * object: a reference to the array in question\n     *    * type: the string literal 'splice'\n     *\n     *   Note that splice records _must_ be normalized such that they are\n     *   reported in index order (raw results from `Object.observe` are not\n     *   ordered and must be normalized/merged before notifying).\n     * @public\n    */\n    notifySplices(path, splices) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get(path, root) {\n      return get$0(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @public\n    */\n    set(path, value, root) {\n      if (root) {\n        set$0(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array}*/(get$0(this, path, info));\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {Array} Array of removed items.\n     * @public\n     */\n    splice(path, start, deleteCount, ...items) {\n      let info = {path : ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else {\n        start = Math.floor(start);\n      }\n      if (!start) {\n        start = 0;\n      }\n      let ret = array.splice(start, deleteCount, ...items);\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @public\n    */\n    notifyPath(path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length == 1) {\n        // Get value if not supplied\n        let info = {path: ''};\n        value = get$0(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */(path);\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @protected\n     */\n    _createReadOnlyProperty(property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {string} methodName Name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @protected\n     */\n    _createPropertyObserver(property, methodName, dynamicFn) {\n      let info = { property, methodName, dynamicFn: Boolean(dynamicFn) };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect, info, trigger: {name: property}\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect(methodName, TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: methodName}\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    _createMethodObserver(expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    _createNotifyingProperty(property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: CaseMap.camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    _createReflectedProperty(property) {\n      let attr = CaseMap.camelToDashCase(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n          attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property thisead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    _createComputedProperty(property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @protected\n     */\n    static addPropertyEffect(property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string} methodName Name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @protected\n     */\n    static createPropertyObserver(property, methodName, dynamicFn) {\n      this.prototype._createPropertyObserver(property, methodName, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal Javascript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    static createMethodObserver(expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    static createNotifyingProperty(property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @protected\n     */\n    static createReadOnlyProperty(property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    static createReflectedProperty(property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal Javascript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @protected\n     */\n    static createComputedProperty(property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n\n    /**\n     * Parses the provided template to ensure binding effects are created\n     * for them, and then ensures property accessors are created for any\n     * dependent properties in the template.  Binding effects for bound\n     * templates are stored in a linked list on the instance so that\n     * templates can be efficiently stamped and unstamped.\n     *\n     * @param {HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @return {Object} Template metadata object\n     * @protected\n     */\n    static bindTemplate(template) {\n      return this.prototype._bindTemplate(template);\n    }\n\n    // -- binding ----------------------------------------------\n\n    /**\n     * Equivalent to static `bindTemplate` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * This method may be called on the prototype (for prototypical template\n     * binding, to avoid creating accessors every instance) once per prototype,\n     * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n     * create and link an instance of the template metadata associated with a\n     * particular stamping.\n     *\n     * @param {HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @param {boolean=} instanceBinding When false (default), performs\n     *   \"prototypical\" binding of the template and overwrites any previously\n     *   bound template for the class. When true (as passed from\n     *   `_stampTemplate`), the template info is instanced and linked into\n     *   the list of bound templates.\n     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n     *   this is an instance of the prototypical template info\n     * @protected\n     */\n    _bindTemplate(template, instanceBinding) {\n      let templateInfo = this.constructor._parseTemplate(template);\n      let wasPreBound = this.__templateInfo == templateInfo;\n      // Optimization: since this is called twice for proto-bound templates,\n      // don't attempt to recreate accessors if this template was pre-bound\n      if (!wasPreBound) {\n        for (let prop in templateInfo.propertyEffects) {\n          this._createPropertyAccessor(prop);\n        }\n      }\n      if (instanceBinding) {\n        // For instance-time binding, create instance of template metadata\n        // and link into list of templates if necessary\n        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));\n        templateInfo.wasPreBound = wasPreBound;\n        if (!wasPreBound && this.__templateInfo) {\n          let last = this.__templateInfoLast || this.__templateInfo;\n          this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n          templateInfo.previousTemplateInfo = last;\n          return templateInfo;\n        }\n      }\n      return this.__templateInfo = templateInfo;\n    }\n\n    /**\n     * Adds a property effect to the given template metadata, which is run\n     * at the \"propagate\" stage of `_propertiesChanged` when the template\n     * has been bound to the element via `_bindTemplate`.\n     *\n     * The `effect` object should match the format in `_addPropertyEffect`.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @protected\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n      hostProps[prop] = true;\n      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n      let propEffects = effects[prop] = effects[prop] || [];\n      propEffects.push(effect);\n    }\n\n    /**\n     * Stamps the provided template and performs instance-time setup for\n     * Polymer template features, including data bindings, declarative event\n     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n     * is returned containing the stamped DOM, ready for insertion into the\n     * DOM.\n     *\n     * This method may be called more than once; however note that due to\n     * `shadycss` polyfill limitations, only styles from templates prepared\n     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n     * to the shadow root and support CSS custom properties), and note that\n     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n     * any styles required by in runtime-stamped templates must be included\n     * in the main element template.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     * @protected\n     */\n    _stampTemplate(template) {\n      // Ensures that created dom is `_enqueueClient`'d to this element so\n      // that it can be flushed on next call to `_flushProperties`\n      hostStack.beginHosting(this);\n      let dom = super._stampTemplate(template);\n      hostStack.endHosting(this);\n      let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));\n      // Add template-instance-specific data to instanced templateInfo\n      templateInfo.nodeList = dom.nodeList;\n      // Capture child nodes to allow unstamping of non-prototypical templates\n      if (!templateInfo.wasPreBound) {\n        let nodes = templateInfo.childNodes = [];\n        for (let n=dom.firstChild; n; n=n.nextSibling) {\n          nodes.push(n);\n        }\n      }\n      dom.templateInfo = templateInfo;\n      // Setup compound storage, 2-way listeners, and dataHost for bindings\n      setupBindings(this, templateInfo);\n      // Flush properties into template nodes if already booted\n      if (this.__dataReady) {\n        runEffects(this, templateInfo.propertyEffects, this.__data, null,\n          false, templateInfo.nodeList);\n      }\n      return dom;\n    }\n\n    /**\n     * Removes and unbinds the nodes previously contained in the provided\n     * DocumentFragment returned from `_stampTemplate`.\n     *\n     * @param {!StampedTemplate} dom DocumentFragment previously returned\n     *   from `_stampTemplate` associated with the nodes to be removed\n     * @protected\n     */\n    _removeBoundDom(dom) {\n      // Unlink template info\n      let templateInfo = dom.templateInfo;\n      if (templateInfo.previousTemplateInfo) {\n        templateInfo.previousTemplateInfo.nextTemplateInfo =\n          templateInfo.nextTemplateInfo;\n      }\n      if (templateInfo.nextTemplateInfo) {\n        templateInfo.nextTemplateInfo.previousTemplateInfo =\n          templateInfo.previousTemplateInfo;\n      }\n      if (this.__templateInfoLast == templateInfo) {\n        this.__templateInfoLast = templateInfo.previousTemplateInfo;\n      }\n      templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n      // Remove stamped nodes\n      let nodes = templateInfo.childNodes;\n      for (let i=0; i<nodes.length; i++) {\n        let node = nodes[i];\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @override\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);\n      if (node.nodeType === Node.TEXT_NODE) {\n        let parts = this._parseBindings(node.textContent, templateInfo);\n        if (parts) {\n          // Initialize the textContent with any literal parts\n          // NOTE: default to a space here so the textNode remains; some browsers\n          // (IE) evacipate an empty textNode following cloneNode/importNode.\n          node.textContent = literalFromParts(parts) || ' ';\n          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n          noted = true;\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from attributes.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @override\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      let parts = this._parseBindings(value, templateInfo);\n      if (parts) {\n        // Attribute or property\n        let origName = name;\n        let kind = 'property';\n        if (name[name.length-1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        let literal = literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          node.setAttribute(name, literal);\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        if (kind === 'property') {\n          name = dashToCamelCase(name);\n        }\n        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n        return true;\n      } else {\n        return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * binding the properties that a nested template depends on to the template\n     * as `_host_<property>`.\n     *\n     * @override\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);\n      // Merge host props into outer template and add bindings\n      let hostProps = nodeInfo.templateInfo.hostProps;\n      let mode = '{';\n      for (let source in hostProps) {\n        let parts = [{ mode, source, dependencies: [source] }];\n        addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n      }\n      return noted;\n    }\n\n    /**\n     * Called to parse text in a template (either attribute values or\n     * textContent) into binding metadata.\n     *\n     * Any overrides of this method should return an array of binding part\n     * metadata  representing one or more bindings found in the provided text\n     * and any \"literal\" text in between.  Any non-literal parts will be passed\n     * to `_evaluateBinding` when any dependencies change.  The only required\n     * fields of each \"part\" in the returned array are as follows:\n     *\n     * - `dependencies` - Array containing trigger metadata for each property\n     *   that should trigger the binding to update\n     * - `literal` - String containing text if the part represents a literal;\n     *   in this case no `dependencies` are needed\n     *\n     * Additional metadata for use by `_evaluateBinding` may be provided in\n     * each part object as needed.\n     *\n     * The default implementation handles the following types of bindings\n     * (one or more may be intermixed with literal strings):\n     * - Property binding: `[[prop]]`\n     * - Path binding: `[[object.prop]]`\n     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n     * - Two-way property or path bindings (supports negation):\n     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n     * - Inline computed method (supports negation):\n     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n     *\n     * @param {string} text Text to parse from attribute or textContent\n     * @param {Object} templateInfo Current template metadata\n     * @return {Array<!BindingPart>} Array of binding part metadata\n     * @protected\n     */\n    static _parseBindings(text, templateInfo) {\n      let parts = [];\n      let lastIndex = 0;\n      let m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = bindingRegex.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({literal: text.slice(lastIndex, m.index)});\n        }\n        // Add binding part\n        let mode = m[1][0];\n        let negate = Boolean(m[2]);\n        let source = m[3].trim();\n        let customEvent = false, notifyEvent = '', colon = -1;\n        if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n          notifyEvent = source.substring(colon + 2);\n          source = source.substring(0, colon);\n          customEvent = true;\n        }\n        let signature = parseMethod(source);\n        let dependencies = [];\n        if (signature) {\n          // Inline computed function\n          let {args, methodName} = signature;\n          for (let i=0; i<args.length; i++) {\n            let arg = args[i];\n            if (!arg.literal) {\n              dependencies.push(arg);\n            }\n          }\n          let dynamicFns = templateInfo.dynamicFns;\n          if (dynamicFns && dynamicFns[methodName] || signature.static) {\n            dependencies.push(methodName);\n            signature.dynamicFn = true;\n          }\n        } else {\n          // Property or path\n          dependencies.push(source);\n        }\n        parts.push({\n          source, mode, negate, customEvent, signature, dependencies,\n          event: notifyEvent\n        });\n        lastIndex = bindingRegex.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        let literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Called to evaluate a previously parsed binding part based on a set of\n     * one or more changed dependencies.\n     *\n     * @param {this} inst Element that should be used as scope for\n     *   binding dependencies\n     * @param {BindingPart} part Binding part metadata\n     * @param {string} path Property/path that triggered this effect\n     * @param {Object} props Bag of current property changes\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {*} Value the binding part evaluated to\n     * @protected\n     */\n    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n      let value;\n      if (part.signature) {\n        value = runMethodEffect(inst, path, props, oldProps, part.signature);\n      } else if (path != part.source) {\n        value = get$0(inst, part.source);\n      } else {\n        if (hasPaths && isPath$0(path)) {\n          value = get$0(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      if (part.negate) {\n        value = !value;\n      }\n      return value;\n    }\n\n  }\n\n  // make a typing for closure :P\n  PropertyEffectsType = PropertyEffects;\n\n  return PropertyEffects;\n});\n\n/**\n * Helper api for enqueing client dom created by a host element.\n *\n * By default elements are flushed via `_flushProperties` when\n * `connectedCallback` is called. Elements attach their client dom to\n * themselves at `ready` time which results from this first flush.\n * This provides an ordering guarantee that the client dom an element\n * creates is flushed before the element itself (i.e. client `ready`\n * fires before host `ready`).\n *\n * However, if `_flushProperties` is called *before* an element is connected,\n * as for example `Templatize` does, this ordering guarantee cannot be\n * satisfied because no elements are connected. (Note: Bound elements that\n * receive data do become enqueued clients and are properly ordered but\n * unbound elements are not.)\n *\n * To maintain the desired \"client before host\" ordering guarantee for this\n * case we rely on the \"host stack. Client nodes registers themselves with\n * the creating host element when created. This ensures that all client dom\n * is readied in the proper order, maintaining the desired guarantee.\n *\n * @private\n */\nlet hostStack = {\n\n  stack: [],\n\n  /**\n   * @param {*} inst Instance to add to hostStack\n   * @this {hostStack}\n   */\n  registerHost(inst) {\n    if (this.stack.length) {\n      let host = this.stack[this.stack.length-1];\n      host._enqueueClient(inst);\n    }\n  },\n\n  /**\n   * @param {*} inst Instance to begin hosting\n   * @this {hostStack}\n   */\n  beginHosting(inst) {\n    this.stack.push(inst);\n  },\n\n  /**\n   * @param {*} inst Instance to end hosting\n   * @this {hostStack}\n   */\n  endHosting(inst) {\n    let stackLen = this.stack.length;\n    if (stackLen && this.stack[stackLen-1] == inst) {\n      this.stack.pop();\n    }\n  }\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/mixins/property-effects.js","import './boot.js';\n\nexport function isPath(path) {\n  return path.indexOf('.') >= 0;\n}\n\nexport function root(path) {\n  let dotIndex = path.indexOf('.');\n  if (dotIndex === -1) {\n    return path;\n  }\n  return path.slice(0, dotIndex);\n}\n\nexport function isAncestor(base, path) {\n  //     base.startsWith(path + '.');\n  return base.indexOf(path + '.') === 0;\n}\n\nexport function isDescendant(base, path) {\n  //     path.startsWith(base + '.');\n  return path.indexOf(base + '.') === 0;\n}\n\nexport function translate(base, newBase, path) {\n  return newBase + path.slice(base.length);\n}\n\nexport function matches(base, path) {\n  return (base === path) ||\n         isAncestor(base, path) ||\n         isDescendant(base, path);\n}\n\nexport function normalize(path) {\n  if (Array.isArray(path)) {\n    let parts = [];\n    for (let i=0; i<path.length; i++) {\n      let args = path[i].toString().split('.');\n      for (let j=0; j<args.length; j++) {\n        parts.push(args[j]);\n      }\n    }\n    return parts.join('.');\n  } else {\n    return path;\n  }\n}\n\nexport function split(path) {\n  if (Array.isArray(path)) {\n    return normalize(path).split('.');\n  }\n  return path.toString().split('.');\n}\n\nexport function get(root, path, info) {\n  let prop = root;\n  let parts = split(path);\n  // Loop over path parts[0..n-1] and dereference\n  for (let i=0; i<parts.length; i++) {\n    if (!prop) {\n      return;\n    }\n    let part = parts[i];\n    prop = prop[part];\n  }\n  if (info) {\n    info.path = parts.join('.');\n  }\n  return prop;\n}\n\nexport function set(root, path, value) {\n  let prop = root;\n  let parts = split(path);\n  let last = parts[parts.length-1];\n  if (parts.length > 1) {\n    // Loop over path parts[0..n-2] and dereference\n    for (let i=0; i<parts.length-1; i++) {\n      let part = parts[i];\n      prop = prop[part];\n      if (!prop) {\n        return;\n      }\n    }\n    // Set value to object at end of path\n    prop[last] = value;\n  } else {\n    // Simple property set\n    prop[path] = value;\n  }\n  return parts.join('.');\n}\n\nexport const isDeep = isPath;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/path.js","import '../utils/boot.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport * as caseMap$0 from '../utils/case-map.js';\nimport { microTask } from '../utils/async.js';\n\nlet caseMap = caseMap$0;\n\nlet microtask = microTask;\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nconst nativeProperties = {};\nlet proto = HTMLElement.prototype;\nwhile (proto) {\n  let props = Object.getOwnPropertyNames(proto);\n  for (let i=0; i<props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    let value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\nexport const PropertyAccessors = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends HTMLElement\n   * @unrestricted\n   */\n  class PropertyAccessors extends superClass {\n\n    /**\n     * Generates property accessors for all attributes in the standard\n     * static `observedAttributes` array.\n     *\n     * Attribute names are mapped to property names using the `dash-case` to\n     * `camelCase` convention\n     *\n     */\n    static createPropertiesForAttributes() {\n      let a$ = this.observedAttributes;\n      for (let i=0; i < a$.length; i++) {\n        this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n      }\n    }\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__serializing;\n      /** @type {number} */\n      this.__dataCounter;\n      /** @type {boolean} */\n      this.__dataEnabled;\n      /** @type {boolean} */\n      this.__dataReady;\n      /** @type {boolean} */\n      this.__dataInvalid;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {Object} */\n      this.__dataPending;\n      /** @type {Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__dataProto;\n      /** @type {Object} */\n      this.__dataHasAccessor;\n      /** @type {Object} */\n      this.__dataInstanceProps;\n      this._initializeProperties();\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     */\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @protected\n     */\n    _initializeProperties() {\n      this.__serializing = false;\n      this.__dataCounter = 0;\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      if (this.__dataProto) {\n        this._initializeProtoProperties(this.__dataProto);\n        this.__dataProto = null;\n      }\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at instance time with bag of properties that were overwritten\n     * by accessors on the prototype when accessors were created.\n     *\n     * The default implementation sets these properties back into the\n     * setter at instance time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @protected\n     */\n    _initializeProtoProperties(props) {\n      for (let p in props) {\n        this._setProperty(p, props[p]);\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @protected\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Ensures the element has the given attribute. If it does not,\n     * assigns the given value to the attribute.\n     *\n     *\n     * @param {string} attribute Name of attribute to ensure is set.\n     * @param {string} value of the attribute.\n     */\n    _ensureAttribute(attribute, value) {\n      if (!this.hasAttribute(attribute)) {\n        this._valueToNodeAttribute(this, value, attribute);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to.\n     */\n    _attributeToProperty(attribute, value, type) {\n      // Don't deserialize back to property if currently reflecting\n      if (!this.__serializing) {\n        let property = caseMap.dashToCamelCase(attribute);\n        this[property] = this._deserializeValue(value, type);\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect.\n     * @param {*=} value Property value to refect.\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(this, value,\n        attribute || caseMap.camelToDashCase(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      let str = this._serializeValue(value);\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called by Polymer when setting JS property values to\n     * HTML attributes.  Users may override this method on Polymer element\n     * prototypes to provide serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided property value.\n     */\n    _serializeValue(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     * Note: The return value of `undefined` is used as a sentinel value to\n     * indicate the attribute should be removed.\n     *\n     * @param {?string} value Attribute value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      /**\n       * @type {*}\n       */\n      let outValue;\n      switch (type) {\n        case Number:\n          outValue = Number(value);\n          break;\n\n        case Boolean:\n          outValue = (value !== null);\n          break;\n\n        case Object:\n          try {\n            outValue = JSON.parse(/** @type string */(value));\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n          }\n          break;\n\n        case Array:\n          try {\n            outValue = JSON.parse(/** @type string */(value));\n          } catch(x) {\n            outValue = null;\n            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n          }\n          break;\n\n        case Date:\n          outValue = new Date(value);\n          break;\n\n        case String:\n        default:\n          outValue = value;\n          break;\n      }\n\n      return outValue;\n    }\n    /* eslint-enable no-fallthrough */\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.  When calling on\n     * a prototype, any overwritten values are saved in `__dataProto`,\n     * and it is up to the subclasser to decide how/when to set those\n     * properties back into the accessor.  When calling on an instance,\n     * the overwritten value is set via `_setPendingProperty`, and the\n     * user should call `_invalidateProperties` or `_flushProperties`\n     * for the values to take effect.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @protected\n     */\n    _createPropertyAccessor(property, readOnly) {\n      if (!this.hasOwnProperty('__dataHasAccessor')) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        saveAccessorValue(this, property);\n        Object.defineProperty(this, property, {\n          /* eslint-disable valid-jsdoc */\n          /** @this {PropertyAccessors} */\n          get: function() {\n            return this.__data[property];\n          },\n          /** @this {PropertyAccessors} */\n          set: readOnly ? function() {} : function(value) {\n            this._setProperty(property, value);\n          }\n          /* eslint-enable */\n        });\n      }\n    }\n\n    /**\n     * Returns true if this library created an accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if an accessor was created\n     */\n    _hasAccessor(property) {\n      return this.__dataHasAccessor && this.__dataHasAccessor[property];\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @protected\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     */\n    _setPendingProperty(property, value) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n\n    /**\n     * Returns true if the specified property has a pending change.\n     *\n     * @param {string} prop Property name\n     * @return {boolean} True if property has a pending change\n     * @protected\n     */\n    _isPropertyPending(prop) {\n      return Boolean(this.__dataPending && (prop in this.__dataPending));\n    }\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @protected\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     *\n     * @protected\n     */\n    _flushProperties() {\n      if (this.__dataPending && this.__dataOld) {\n        let changedProps = this.__dataPending;\n        this.__dataPending = null;\n        this.__dataCounter++;\n        this._propertiesChanged(this.__data, changedProps, this.__dataOld);\n        this.__dataCounter--;\n      }\n    }\n\n    /**\n     * Lifecycle callback called the first time properties are being flushed.\n     * Prior to `ready`, all property sets through accessors are queued and\n     * their effects are flushed after this method returns.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its properties initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @public\n     */\n    ready() {\n      this.__dataReady = true;\n      // Run normal flush\n      this._flushProperties();\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @protected\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` for primitive types if a\n     * strict equality check fails, and returns `true` for all Object/Arrays.\n     * The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n         // This ensures (old==NaN, value==NaN) always returns false\n         (old === old || value === value))\n      );\n    }\n\n  }\n\n  return PropertyAccessors;\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/mixins/property-accessors.js","import './boot.js';\n\n/** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\nlet AsyncInterface; // eslint-disable-line no-unused-vars\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\nexport const timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} delay Time to wait before calling callbacks in ms\n   * @return {AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return  {\n      run(fn) { return setTimeout(fn, delay); },\n      cancel: window.clearTimeout.bind(window)\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {Function} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run: window.setTimeout.bind(window),\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel: window.clearTimeout.bind(window)\n};\n\nexport const animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof Polymer.Async.animationFrame\n   * @param {Function} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run: window.requestAnimationFrame.bind(window),\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel: window.cancelAnimationFrame.bind(window)\n};\n\nexport const idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof Polymer.Async.idlePeriod\n   * @param {function(IdleDeadline)} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof Polymer.Async.idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\n\nexport const microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof Polymer.Async.microTask\n   * @param {Function} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof Polymer.Async.microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/async.js","import '../utils/boot.js';\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// 1.x backwards-compatible auto-wrapper for template type extensions\n// This is a clear layering violation and gives favored-nation status to\n// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n// a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n// b.) to maintain if/repeat capability in parser-constrained elements\n//     (e.g. table, select) in lieu of native CE type extensions without\n//     massive new invention in this space (e.g. directive system)\nconst templateExtensions = {\n  'dom-if': true,\n  'dom-repeat': true\n};\nfunction wrapTemplateExtension(node) {\n  let is = node.getAttribute('is');\n  if (is && templateExtensions[is]) {\n    let t = node;\n    t.removeAttribute('is');\n    node = t.ownerDocument.createElement(is);\n    t.parentNode.replaceChild(node, t);\n    node.appendChild(t);\n    while(t.attributes.length) {\n      node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n      t.removeAttribute(t.attributes[0].name);\n    }\n  }\n  return node;\n}\n\nfunction findTemplateNode(root, nodeInfo) {\n  // recursively ascend tree until we hit root\n  let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n  // unwind the stack, returning the indexed node at each level\n  if (parent) {\n    // note: marginally faster than indexing via childNodes\n    // (http://jsperf.com/childnodes-lookup)\n    for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n      if (nodeInfo.parentIndex === i++) {\n        return n;\n      }\n    }\n  } else {\n    return root;\n  }\n}\n\n// construct `$` map (from id annotations)\nfunction applyIdToMap(inst, map, node, nodeInfo) {\n  if (nodeInfo.id) {\n    map[nodeInfo.id] = node;\n  }\n}\n\n// install event listeners (from event annotations)\nfunction applyEventListener(inst, node, nodeInfo) {\n  if (nodeInfo.events && nodeInfo.events.length) {\n    for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n      inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n    }\n  }\n}\n\n// push configuration references at configure time\nfunction applyTemplateContent(inst, node, nodeInfo) {\n  if (nodeInfo.templateInfo) {\n    node._templateInfo = nodeInfo.templateInfo;\n  }\n}\n\nfunction createNodeEventHandler(context, eventName, methodName) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  context = context._methodHost || context;\n  let handler = function(e) {\n    if (context[methodName]) {\n      context[methodName](e, e.detail);\n    } else {\n      console.warn('listener method `' + methodName + '` not defined');\n    }\n  };\n  return handler;\n}\n\nexport const TemplateStamp = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_TemplateStamp}\n   */\n  class TemplateStamp extends superClass {\n\n    /**\n     * Scans a template to produce template metadata.\n     *\n     * Template-specific metadata are stored in the object returned, and node-\n     * specific metadata are stored in objects in its flattened `nodeInfoList`\n     * array.  Only nodes in the template that were parsed as nodes of\n     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n     * contains an `index` (`childNodes` index in parent) and optionally\n     * `parent`, which points to node info of its parent (including its index).\n     *\n     * The template metadata object returned from this method has the following\n     * structure (many fields optional):\n     *\n     * ```js\n     *   {\n     *     // Flattened list of node metadata (for nodes that generated metadata)\n     *     nodeInfoList: [\n     *       {\n     *         // `id` attribute for any nodes with id's for generating `$` map\n     *         id: {string},\n     *         // `on-event=\"handler\"` metadata\n     *         events: [\n     *           {\n     *             name: {string},   // event name\n     *             value: {string},  // handler method name\n     *           }, ...\n     *         ],\n     *         // Notes when the template contained a `<slot>` for shady DOM\n     *         // optimization purposes\n     *         hasInsertionPoint: {boolean},\n     *         // For nested `<template>`` nodes, nested template metadata\n     *         templateInfo: {object}, // nested template metadata\n     *         // Metadata to allow efficient retrieval of instanced node\n     *         // corresponding to this metadata\n     *         parentInfo: {number},   // reference to parent nodeInfo>\n     *         parentIndex: {number},  // index in parent's `childNodes` collection\n     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n     *       },\n     *       ...\n     *     ],\n     *     // When true, the template had the `strip-whitespace` attribute\n     *     // or was nested in a template with that setting\n     *     stripWhitespace: {boolean},\n     *     // For nested templates, nested template content is moved into\n     *     // a document fragment stored here; this is an optimization to\n     *     // avoid the cost of nested template cloning\n     *     content: {DocumentFragment}\n     *   }\n     * ```\n     *\n     * This method kicks off a recursive treewalk as follows:\n     *\n     * ```\n     *    _parseTemplate <---------------------+\n     *      _parseTemplateContent              |\n     *        _parseTemplateNode  <------------|--+\n     *          _parseTemplateNestedTemplate --+  |\n     *          _parseTemplateChildNodes ---------+\n     *          _parseTemplateNodeAttributes\n     *            _parseTemplateNodeAttribute\n     *\n     * ```\n     *\n     * These methods may be overridden to add custom metadata about templates\n     * to either `templateInfo` or `nodeInfo`.\n     *\n     * Note that this method may be destructive to the template, in that\n     * e.g. event annotations may be removed after being noted in the\n     * template metadata.\n     *\n     * @param {!HTMLTemplateElement} template Template to parse\n     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer\n     *   template, for parsing nested templates\n     * @return {!TemplateInfo} Parsed template metadata\n     */\n    static _parseTemplate(template, outerTemplateInfo) {\n      // since a template may be re-used, memo-ize metadata\n      if (!template._templateInfo) {\n        let templateInfo = template._templateInfo = {};\n        templateInfo.nodeInfoList = [];\n        templateInfo.stripWhiteSpace =\n          (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n          template.hasAttribute('strip-whitespace');\n        this._parseTemplateContent(template, templateInfo, {parent: null});\n      }\n      return template._templateInfo;\n    }\n\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Parses template node and adds template and node metadata based on\n     * the current node, and its `childNodes` and `attributes`.\n     *\n     * This method may be overridden to add custom node or template specific\n     * metadata based on this node.\n     *\n     * @param {Node} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted;\n      let element = /** @type Element */(node);\n      if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {\n        noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;\n      } else if (element.localName === 'slot') {\n        // For ShadyDom optimization, indicating there is an insertion point\n        templateInfo.hasInsertionPoint = true;\n      }\n      if (element.firstChild) {\n        noted = this._parseTemplateChildNodes(element, templateInfo, nodeInfo) || noted;\n      }\n      if (element.hasAttributes && element.hasAttributes()) {\n        noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses template child nodes for the given root node.\n     *\n     * This method also wraps whitelisted legacy template extensions\n     * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n     * wrappers, collapses text nodes, and strips whitespace from the template\n     * if the `templateInfo.stripWhitespace` setting was provided.\n     *\n     * @param {Node} root Root node whose `childNodes` will be parsed\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     */\n    static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n      for (let node=root.firstChild, parentIndex=0, next; node; node=next) {\n        // Wrap templates\n        if (node.localName == 'template') {\n          node = wrapTemplateExtension(node);\n        }\n        // collapse adjacent textNodes: fixes an IE issue that can cause\n        // text nodes to be inexplicably split =(\n        // note that root.normalize() should work but does not so we do this\n        // manually.\n        next = node.nextSibling;\n        if (node.nodeType === Node.TEXT_NODE) {\n          let /** Node */ n = next;\n          while (n && (n.nodeType === Node.TEXT_NODE)) {\n            node.textContent += n.textContent;\n            next = n.nextSibling;\n            root.removeChild(n);\n            n = next;\n          }\n          // optionally strip whitespace\n          if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n            root.removeChild(node);\n            continue;\n          }\n        }\n        let childInfo = { parentIndex, parentInfo: nodeInfo };\n        if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n          childInfo.infoIndex = templateInfo.nodeInfoList.push(/** @type {!NodeInfo} */(childInfo)) - 1;\n        }\n        // Increment if not removed\n        if (node.parentNode) {\n          parentIndex++;\n        }\n      }\n    }\n\n    /**\n     * Parses template content for the given nested `<template>`.\n     *\n     * Nested template info is stored as `templateInfo` in the current node's\n     * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n     * It will then be the responsibility of the host to set it back to the\n     * template and for users stamping nested templates to use the\n     * `_contentForTemplate` method to retrieve the content for this template\n     * (an optimization to avoid the cost of cloning nested template content).\n     *\n     * @param {HTMLTemplateElement} node Node to parse (a <template>)\n     * @param {TemplateInfo} outerTemplateInfo Template metadata for current template\n     *   that includes the template `node`\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n      let templateInfo = this._parseTemplate(node, outerTemplateInfo);\n      let content = templateInfo.content =\n        node.content.ownerDocument.createDocumentFragment();\n      content.appendChild(node.content);\n      nodeInfo.templateInfo = templateInfo;\n      return true;\n    }\n\n    /**\n     * Parses template node attributes and adds node metadata to `nodeInfo`\n     * for nodes of interest.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n      // Make copy of original attribute list, since the order may change\n      // as attributes are added and removed\n      let noted = false;\n      let attrs = Array.from(node.attributes);\n      for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n        noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses a single template node attribute and adds node metadata to\n     * `nodeInfo` for attributes of interest.\n     *\n     * This implementation adds metadata for `on-event=\"handler\"` attributes\n     * and `id` attributes.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      // events (on-*)\n      if (name.slice(0, 3) === 'on-') {\n        node.removeAttribute(name);\n        nodeInfo.events = nodeInfo.events || [];\n        nodeInfo.events.push({\n          name: name.slice(3),\n          value\n        });\n        return true;\n      }\n      // static id\n      else if (name === 'id') {\n        nodeInfo.id = value;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns the `content` document fragment for a given template.\n     *\n     * For nested templates, Polymer performs an optimization to cache nested\n     * template content to avoid the cost of cloning deeply nested templates.\n     * This method retrieves the cached content for a given template.\n     *\n     * @param {HTMLTemplateElement} template Template to retrieve `content` for\n     * @return {DocumentFragment} Content fragment\n     */\n    static _contentForTemplate(template) {\n      let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;\n      return (templateInfo && templateInfo.content) || template.content;\n    }\n\n    /**\n     * Clones the provided template content and returns a document fragment\n     * containing the cloned dom.\n     *\n     * The template is parsed (once and memoized) using this library's\n     * template parsing features, and provides the following value-added\n     * features:\n     * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n     * * Generates an \"id map\" for all nodes with id's under `$` on returned\n     *   document fragment\n     * * Passes template info including `content` back to templates as\n     *   `_templateInfo` (a performance optimization to avoid deep template\n     *   cloning)\n     *\n     * Note that the memoized template parsing process is destructive to the\n     * template: attributes for bindings and declarative event listeners are\n     * removed after being noted in notes, and any nested `<template>.content`\n     * is removed and stored in notes as well.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     */\n    _stampTemplate(template) {\n      // Polyfill support: bootstrap the template if it has not already been\n      if (template && !template.content &&\n          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n        HTMLTemplateElement.decorate(template);\n      }\n      let templateInfo = this.constructor._parseTemplate(template);\n      let nodeInfo = templateInfo.nodeInfoList;\n      let content = templateInfo.content || template.content;\n      let dom = /** @type DocumentFragment */ (document.importNode(content, true));\n      // NOTE: ShadyDom optimization indicating there is an insertion point\n      dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n      let nodes = dom.nodeList = new Array(nodeInfo.length);\n      dom.$ = {};\n      for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n        let node = nodes[i] = findTemplateNode(dom, info);\n        applyIdToMap(this, dom.$, node, info);\n        applyTemplateContent(this, node, info);\n        applyEventListener(this, node, info);\n      }\n      return /** @type {!StampedTemplate} */(dom);\n    }\n\n    /**\n     * Adds an event listener by method name for the event provided.\n     *\n     * This method generates a handler function that looks up the method\n     * name at handling time.\n     *\n     * @param {Node} node Node to add listener on\n     * @param {string} eventName Name of event\n     * @param {string} methodName Name of method\n     * @param {*=} context Context the method will be called on (defaults\n     *   to `node`)\n     * @return {Function} Generated handler function\n     */\n    _addMethodEventListenerToNode(node, eventName, methodName, context) {\n      context = context || node;\n      let handler = createNodeEventHandler(context, eventName, methodName);\n      this._addEventListenerToNode(node, eventName, handler);\n      return handler;\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {Node} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {Function} handler Listener function to add\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      node.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {Node} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {Function} handler Listener function to remove\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      node.removeEventListener(eventName, handler);\n    }\n\n  }\n\n  return TemplateStamp;\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/mixins/template-stamp.js"],"sourceRoot":""}