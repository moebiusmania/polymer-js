{"version":3,"sources":["webpack:///webpack/bootstrap 563d2eb2fdc0e1f5051f","webpack:///./~/@polymer/polymer/lib/utils/boot.html","webpack:///./~/@polymer/polymer/lib/utils/mixin.html","webpack:///./~/@polymer/polymer/lib/utils/case-map.html","webpack:///./~/@polymer/polymer/lib/utils/resolve-url.html","webpack:///./index.js","webpack:///./components/fake-app/index.js","webpack:///./~/@polymer/polymer/lib/elements/dom-module.html","webpack:///./~/@polymer/polymer/lib/mixins/element-mixin.html","webpack:///./~/@polymer/polymer/lib/mixins/property-accessors.html","webpack:///./~/@polymer/polymer/lib/mixins/property-effects.html","webpack:///./~/@polymer/polymer/lib/mixins/template-stamp.html","webpack:///./~/@polymer/polymer/lib/utils/async.html","webpack:///./~/@polymer/polymer/lib/utils/path.html","webpack:///./~/@polymer/polymer/lib/utils/style-gather.html","webpack:///./~/@polymer/polymer/polymer-element.html"],"names":["userPolymer","window","Polymer","info","_polymerFn","Object","assign","Error","version","JSCompiler_renameProperty","prop","obj","require","dedupeId","cachingMixin","mixin","base","__mixinApplications","WeakMap","map","application","get","set","dedupingMixin","__dedupeId","baseSet","__mixinSet","extended","create","caseMap","DASH_TO_CAMEL","CAMEL_TO_DASH","CaseMap","dashToCamelCase","dash","indexOf","replace","m","toUpperCase","camelToDashCase","camel","toLowerCase","CSS_URL_RX","ABS_URL","workingURL","resolveDoc","resolveUrl","url","baseURI","test","undefined","u","URL","pathname","href","e","document","location","implementation","createHTMLDocument","createElement","head","appendChild","anchor","body","resolveCss","cssText","pre","post","pathFromUrl","substring","lastIndexOf","ResolveUrl","modules","lcModules","findModule","id","styleOutsideTemplateCheck","inst","querySelector","console","warn","DomModule","HTMLElement","observedAttributes","import","selector","attributeChangedCallback","name","old","value","register","assetpath","__assetpath","owner","HTMLImports","importForElement","ownerDocument","getAttribute","prototype","customElements","define","PolymerElementProperties","PolymerElementConstructor","is","extends","properties","observers","template","ElementMixin","polymerElementBase","PropertyEffects","ownPropertiesForClass","klass","hasOwnProperty","__ownProperties","ownObserversForClass","__ownObservers","flattenProperties","flattenedProps","props","p","o","type","propertiesForClass","__classProperties","superCtor","getPrototypeOf","constructor","PolymerElement","propertyDefaultsForClass","__classPropertyDefaults","hasClassFinalized","finalizeClassAndSuper","proto","finalize","finalizeClass","__finalized","telemetry","finalizeProperties","finalizeObservers","t","innerHTML","cloneNode","_template","createPropertyFromConfig","dynamicFns","i","length","_createMethodObserver","allProps","computed","readOnly","_hasReadOnlyEffect","_createComputedProperty","_createReadOnlyProperty","reflectToAttribute","_hasReflectEffect","_createReflectedProperty","notify","_hasNotifyEffect","_createNotifyingProperty","observer","_createPropertyObserver","finalizeTemplate","ext","StyleGather","cssFromTemplate","cssFromModuleImports","style","textContent","content","insertBefore","firstChild","ShadyCSS","prepareTemplate","_bindTemplate","list","push","__observedAttributes","importPath","module","_importPath","_initializeProperties","instanceCount","__polymerFinalized","__proto__","localName","rootPath","p$","call","_hasAccessor","_setPendingProperty","connectedCallback","styleElement","_enableProperties","disconnectedCallback","ready","root","_stampTemplate","$","_readyClients","_attachDom","dom","attachShadow","shadowRoot","mode","property","_attributeToProperty","updateStyles","styleSubtree","_parseTemplateContent","templateInfo","nodeInfo","registrations","_regLog","log","dumpRegistrations","forEach","styleDocument","microtask","Async","microTask","nativeProperties","getOwnPropertyNames","saveAccessorValue","model","__data","__dataProto","PropertyAccessors","superClass","createPropertiesForAttributes","a$","_createPropertyAccessor","__serializing","__dataCounter","__dataEnabled","__dataInitialized","__dataInvalid","__dataPending","__dataOld","_initializeProtoProperties","__dataHasAccessor","__dataInstanceProps","_setProperty","_initializeInstanceProperties","_ensureAttribute","attribute","hasAttribute","_valueToNodeAttribute","_deserializeValue","_propertyToAttribute","arguments","node","str","_serializeValue","removeAttribute","setAttribute","Date","toString","JSON","stringify","x","outValue","Number","Boolean","parse","Array","String","defineProperty","_invalidateProperties","_shouldPropertyChange","_isPropertyPending","run","_flushProperties","changedProps","_propertiesChanged","currentProps","oldProps","TYPES","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","READ_ONLY","ensureOwnEffectMap","effects","protoFx","instFx","runEffects","hasPaths","extraArgs","ran","runEffectsForProperty","rootProperty","Path","fxs","l","fx","lastRun","pathMatchesTrigger","trigger","fn","path","triggerPath","structured","isAncestor","wildcard","isDescendant","runObserverEffect","methodName","changedProp","dynamicFn","runNotifyEffects","notifyProps","__notifyEffects","notified","notifyPath","host","__dataHost","eventName","dispatchNotifyEvent","detail","queueProperty","dispatchEvent","CustomEvent","runNotifyEffect","handleNotification","event","fromProp","toPath","negate","fromPath","translate","target","__readOnly","_setPendingPropertyOrPath","runReflectEffect","sanitizeDOMValue","attrName","runComputedEffects","computeEffects","__computeEffects","inputProps","runComputedEffect","result","runMethodEffect","computedProp","methodInfo","computeLinkedPaths","links","__dataLinkedPaths","link","a","b","addBinding","kind","parts","literal","bindings","binding","isCompound","shouldAddListener","listenerEvent","listenerNegate","index","nodeInfoList","part","compoundIndex","addEffectForBindingPart","dependencies","evaluator","j","parseArg","_addTemplatePropertyEffect","runBindingEffect","nodeList","source","_enqueueClient","_evaluateBinding","applyBindingValue","computeBindingValue","_setUnmanagedPropertyToNode","storage","__dataCompoundStorage","join","setupBindings","setupCompoundStorage","addNotifyListener","literals","addEventListener","createMethodEffect","sig","effectFn","static","args","arg","_addPropertyEffect","context","_methodHost","marshalArgs","apply","emptyArray","IDENT","NUMBER","SQUOTE_STRING","DQUOTE_STRING","STRING","ARGUMENT","ARGUMENTS","ARGUMENT_LIST","BINDING","OPEN_BRACKET","CLOSE_BRACKET","NEGATE","EXPRESSION","bindingRegex","RegExp","literalFromParts","s","parseMethod","expression","match","trim","split","parseArgs","argList","rawArg","fc","slice","isPath","data","values","v","baseChanged","matches","notifySplices","array","splices","splicesPath","indexSplices","notifySplice","addedCount","removed","object","upper","propertyEffectsBase","TemplateStamp","PROPERTY_EFFECT_TYPES","hostStack","registerHost","__dataClientsInitialized","__dataPendingClients","__dataToNotify","__dataHasPaths","__dataTemp","effect","_removePropertyEffect","idx","splice","_hasPropertyEffect","_hasComputedEffect","shouldNotify","isPathNotification","isArray","prevProps","client","_flushClients","clients","setProperties","setReadOnly","_propagatePropertyChanges","__reflectEffects","__observeEffects","__propagateEffects","__templateInfo","propertyEffects","nextTemplateInfo","linkPaths","to","from","normalize","unlinkPaths","items","len","ret","pop","hadLength","start","deleteCount","Math","floor","shift","unshift","propPath","protectedSetter","attr","addPropertyEffect","createPropertyObserver","createMethodObserver","createNotifyingProperty","createReadOnlyProperty","createReflectedProperty","createComputedProperty","bindTemplate","instanceBinding","_parseTemplate","wasPreBound","last","__templateInfoLast","previousTemplateInfo","hostProps","propEffects","beginHosting","endHosting","nodes","childNodes","n","nextSibling","_removeBoundDom","parentNode","removeChild","_parseTemplateNode","noted","nodeType","Node","TEXT_NODE","_parseBindings","_parseTemplateNodeAttribute","origName","_parseTemplateNestedTemplate","text","lastIndex","exec","customEvent","notifyEvent","colon","signature","stack","stackLen","templateExtensions","wrapTemplateExtension","replaceChild","attributes","findTemplateNode","parent","parentInfo","parentIndex","applyIdToMap","applyEventListener","events","e$","_addMethodEventListenerToNode","applyTemplateContent","_templateInfo","createNodeEventHandler","handler","outerTemplateInfo","stripWhiteSpace","hasInsertionPoint","_parseTemplateChildNodes","hasAttributes","_parseTemplateNodeAttributes","next","childInfo","infoIndex","createDocumentFragment","attrs","_contentForTemplate","HTMLTemplateElement","decorate","importNode","__noInsertionPoint","_addEventListenerToNode","_removeEventListenerFromNode","removeEventListener","AsyncInterface","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","createTextNode","MutationObserver","microtaskFlush","observe","characterData","cb","setTimeout","timeOut","after","delay","cancel","clearTimeout","bind","animationFrame","requestAnimationFrame","cancelAnimationFrame","idlePeriod","requestIdleCallback","handle","cancelIdleCallback","callback","dotIndex","newBase","isDeep","MODULE_STYLE_LINK_SELECTOR","INCLUDE_ATTR","importModule","moduleId","cssFromModules","moduleIds","cssFromModule","_cssText","querySelectorAll","include","importDoc","container","Element"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 563d2eb2fdc0e1f5051f","/*__wc__loader*/\n\n(function() {\n  'use strict';\n\n  const userPolymer = window.Polymer;\n\n  /**\n   * @namespace Polymer\n   * @summary Polymer is a lightweight library built on top of the web\n   * standards-based Web Components API's, and makes it easy to build your\n   * own custom HTML elements.\n   * @param {Object} info Prototype for the custom element. It must contain\n   * an `is` property to specify the element name. Other properties populate\n   * the element prototype. The `properties`, `observers`, `hostAttributes`,\n   * and `listeners` properties are processed to create element features.\n   * @return {Object} Returns a custom element class for the given provided\n   * prototype `info` object. The name of the element if given by `info.is`.\n   */\n  window.Polymer = function(info) {\n    return window.Polymer._polymerFn(info);\n  }\n\n  // support user settings on the Polymer object\n  if (userPolymer) {\n    Object.assign(Polymer, userPolymer);\n  }\n\n  // To be plugged by legacy implementation if loaded\n  /**\n   * @param {Object} info Prototype for the custom element. It must contain\n   * an `is` property to specify the element name. Other properties populate\n   * the element prototype. The `properties`, `observers`, `hostAttributes`,\n   * and `listeners` properties are processed to create element features.\n   */\n  window.Polymer._polymerFn = function(info) { // eslint-disable-line no-unused-vars\n    throw new Error('Load polymer.html to use the Polymer() function.');\n  }\n  window.Polymer.version = '2.0.0';\n\n  /* eslint-disable no-unused-vars */\n  /*\n  When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]\n  We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.\n  */\n  window.JSCompiler_renameProperty = function(prop, obj) {\n    return prop;\n  }\n  /* eslint-enable */\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/boot.html","/*__wc__loader*/\nrequire('./boot.html');\n\n\n\n(function() {\n\n  'use strict';\n\n  // unique global id for deduping mixins.\n  let dedupeId = 0;\n\n  /**\n   * Given a mixin producing function, memoize applications of mixin to base\n   * @private\n   * @param {Function} mixin Mixin for which to create a caching mixin.\n   * @return {Function} Returns a mixin which when applied multiple times to the\n   * same base will always return the same extended class.\n   */\n  function cachingMixin(mixin) {\n    return function(base) {\n      if (!mixin.__mixinApplications) {\n        mixin.__mixinApplications = new WeakMap();\n      }\n      let map = mixin.__mixinApplications;\n      let application = map.get(base);\n      if (!application) {\n        application = mixin(base);\n        map.set(base, application);\n      }\n      return application;\n    };\n  }\n\n  /**\n   * Wraps an ES6 class expression mixin such that the mixin is only applied\n   * if it has not already been applied its base argument.  Also memoizes mixin\n   * applications.\n   *\n   * @memberof Polymer\n   * @param {Function} mixin ES6 class expression mixin to wrap\n   * @return {Function} Wrapped mixin that deduplicates and memoizes\n   *   mixin applications to base\n   */\n  Polymer.dedupingMixin = function(mixin) {\n    mixin = cachingMixin(mixin);\n    // maintain a unique id for each mixin\n    mixin.__dedupeId = ++dedupeId;\n    return function(base) {\n      let baseSet = base.__mixinSet;\n      if (baseSet && baseSet[mixin.__dedupeId]) {\n        return base;\n      }\n      let extended = mixin(base);\n      // copy inherited mixin set from the extended class, or the base class\n      // NOTE: we avoid use of Set here because some browser (IE11)\n      // cannot extend a base Set via the constructor.\n      extended.__mixinSet =\n        Object.create(extended.__mixinSet || baseSet || null);\n      extended.__mixinSet[mixin.__dedupeId] = true;\n      return extended;\n    }\n  };\n\n})();\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/mixin.html","/*__wc__loader*/\nrequire('./boot.html');\n\n\n(function() {\n  'use strict';\n\n  const caseMap = {};\n  const DASH_TO_CAMEL = /-[a-z]/g;\n  const CAMEL_TO_DASH = /([A-Z])/g;\n\n  /**\n   * Module with utilities for converting between \"dash-case\" and \"camelCase\"\n   * identifiers.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides utilities for converting between \"dash-case\"\n   *   and \"camelCase\".\n   */\n  const CaseMap = {\n\n    /**\n     * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n     * (e.g. `fooBarBaz`).\n     *\n     * @memberof Polymer.CaseMap\n     * @param {string} dash Dash-case identifier\n     * @return {string} Camel-case representation of the identifier\n     */\n    dashToCamelCase(dash) {\n      return caseMap[dash] || (\n        caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n          (m) => m[1].toUpperCase()\n        )\n      );\n    },\n\n    /**\n     * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n     * (e.g. `foo-bar-baz`).\n     *\n     * @memberof Polymer.CaseMap\n     * @param {string} camel Camel-case identifier\n     * @return {string} Dash-case representation of the identifier\n     */\n    camelToDashCase(camel) {\n      return caseMap[camel] || (\n        caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n      );\n    }\n\n  };\n\n  Polymer.CaseMap = CaseMap;\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/case-map.html","/*__wc__loader*/\nrequire('./boot.html');\n\n\n\n  (function() {\n    'use strict';\n\n    let CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\n    let ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\n    let workingURL;\n    let resolveDoc;\n    /**\n     * Resolves the given URL against the provided `baseUri'.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} url Input URL to resolve\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} resolved URL\n     */\n    function resolveUrl(url, baseURI) {\n      if (url && ABS_URL.test(url)) {\n        return url;\n      }\n      // Lazy feature detection.\n      if (workingURL === undefined) {\n        workingURL = false;\n        try {\n          const u = new URL('b', 'http://a');\n          u.pathname = 'c%20d';\n          workingURL = (u.href === 'http://a/c%20d');\n        } catch (e) {\n          // silently fail\n        }\n      }\n      if (!baseURI) {\n        baseURI = document.baseURI || window.location.href;\n      }\n      if (workingURL) {\n        return (new URL(url, baseURI)).href;\n      }\n      // Fallback to creating an anchor into a disconnected document.\n      if (!resolveDoc) {\n        resolveDoc = document.implementation.createHTMLDocument('temp');\n        resolveDoc.base = resolveDoc.createElement('base');\n        resolveDoc.head.appendChild(resolveDoc.base);\n        resolveDoc.anchor = resolveDoc.createElement('a');\n        resolveDoc.body.appendChild(resolveDoc.anchor);\n      }\n      resolveDoc.base.href = baseURI;\n      resolveDoc.anchor.href = url;\n      return resolveDoc.anchor.href || url;\n\n    }\n\n    /**\n     * Resolves any relative URL's in the given CSS text against the provided\n     * `ownerDocument`'s `baseURI`.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} cssText CSS text to process\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} Processed CSS text with resolved URL's\n     */\n    function resolveCss(cssText, baseURI) {\n      return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n        return pre + '\\'' +\n          resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n          '\\'' + post;\n      });\n    }\n\n    /**\n     * Returns a path from a given `url`. The path includes the trailing\n     * `/` from the url.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} url Input URL to transform\n     * @return {string} resolved path\n     */\n    function pathFromUrl(url) {\n      return url.substring(0, url.lastIndexOf('/') + 1);\n    }\n\n    /**\n     * Module with utilities for resolving relative URL's.\n     *\n     * @namespace\n     * @memberof Polymer\n     * @summary Module with utilities for resolving relative URL's.\n     */\n    Polymer.ResolveUrl = {\n      resolveCss: resolveCss,\n      resolveUrl: resolveUrl,\n      pathFromUrl: pathFromUrl\n    };\n\n  })();\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/resolve-url.html","'use strict';\n\nimport './components/fake-app';\n\n\n// WEBPACK FOOTER //\n// ./index.js","'use strict';\n\nimport '@polymer/polymer/polymer-element.html';\n\n\n// WEBPACK FOOTER //\n// ./components/fake-app/index.js","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/resolve-url.html');\n\n\n(function() {\n  'use strict';\n\n  let modules = {};\n  let lcModules = {};\n  function findModule(id) {\n    return modules[id] || lcModules[id.toLowerCase()];\n  }\n\n  function styleOutsideTemplateCheck(inst) {\n    if (inst.querySelector('style')) {\n      console.warn('dom-module %s has style outside template', inst.id);\n    }\n  }\n\n  /**\n   * The `dom-module` element registers the dom it contains to the name given\n   * by the module's id attribute. It provides a unified database of dom\n   * accessible via its static `import` API.\n   *\n   * A key use case of `dom-module` is for providing custom element `<template>`s\n   * via HTML imports that are parsed by the native HTML parser, that can be\n   * relocated during a bundling pass and still looked up by `id`.\n   *\n   * Example:\n   *\n   *     <dom-module id=\"foo\">\n   *       <img src=\"stuff.png\">\n   *     </dom-module>\n   *\n   * Then in code in some other location that cannot access the dom-module above\n   *\n   *     let img = document.createElement('dom-module').import('foo', 'img');\n   *\n   * @extends HTMLElement\n   * @memberof Polymer\n   * @summary Custom element that provides a registry of relocatable DOM content\n   *   by `id` that is agnostic to bundling.\n   */\n  class DomModule extends HTMLElement {\n\n    static get observedAttributes() { return ['id'] }\n\n    /**\n     * Retrieves the element specified by the css `selector` in the module\n     * registered by `id`. For example, this.import('foo', 'img');\n     * @param {string} id The id of the dom-module in which to search.\n     * @param {string=} selector The css selector by which to find the element.\n     * @return {Element} Returns the element which matches `selector` in the\n     * module registered at the specified `id`.\n     */\n    static import(id, selector) {\n      if (id) {\n        let m = findModule(id);\n        if (m && selector) {\n          return m.querySelector(selector);\n        }\n        return m;\n      }\n      return null;\n    }\n\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        this.register();\n      }\n    }\n\n    /**\n     * The absolute URL of the original location of this `dom-module`.\n     *\n     * This value will differ from this element's `ownerDocument` in the\n     * following ways:\n     * - Takes into account any `assetpath` attribute added during bundling\n     *   to indicate the original location relative to the bundled location\n     * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n     *   the path is relative to the import document's location since\n     *   `ownerDocument` is not currently polyfilled\n     */\n    get assetpath() {\n      // Don't override existing assetpath.\n      if (!this.__assetpath) {\n        // note: assetpath set via an attribute must be relative to this\n        // element's location; accomodate polyfilled HTMLImports\n        const owner = window.HTMLImports && HTMLImports.importForElement ?\n          HTMLImports.importForElement(this) || document : this.ownerDocument;\n        const url = Polymer.ResolveUrl.resolveUrl(\n          this.getAttribute('assetpath') || '', owner.baseURI);\n        this.__assetpath = Polymer.ResolveUrl.pathFromUrl(url);\n      }\n      return this.__assetpath;\n    }\n\n    /**\n     * Registers the dom-module at a given id. This method should only be called\n     * when a dom-module is imperatively created. For\n     * example, `document.createElement('dom-module').register('foo')`.\n     * @param {string=} id The id at which to register the dom-module.\n     */\n    register(id) {\n      id = id || this.id;\n      if (id) {\n        this.id = id;\n        // store id separate from lowercased id so that\n        // in all cases mixedCase id will stored distinctly\n        // and lowercase version is a fallback\n        modules[id] = this;\n        lcModules[id.toLowerCase()] = this;\n        styleOutsideTemplateCheck(this);\n      }\n    }\n  }\n\n  DomModule.prototype['modules'] = modules;\n\n  customElements.define('dom-module', DomModule);\n\n  // export\n  Polymer.DomModule = DomModule;\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/elements/dom-module.html","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\nrequire('../utils/case-map.html');\n\nrequire('../utils/style-gather.html');\n\nrequire('../utils/resolve-url.html');\n\nrequire('../elements/dom-module.html');\n\nrequire('./property-effects.html');\n\n\n(function() {\n  'use strict';\n  /**\n   * @typedef Object<string, {\n   *   value: *,\n   *   type: (Function | undefined),\n   *   readOnly: (boolean | undefined),\n   *   computed: (string | undefined),\n   *   reflectToAttribute: (boolean | undefined),\n   *   notify: (boolean | undefined),\n   *   observer: (string | undefined)\n   * }>)\n   */\n  let PolymerElementProperties; // eslint-disable-line no-unused-vars\n\n  /** @record */\n  let PolymerElementConstructor = function(){}; // eslint-disable-line no-unused-vars\n  /** @type {(string | undefined)} */\n  PolymerElementConstructor.is;\n  /** @type {(string | undefined)} */\n  PolymerElementConstructor.extends;\n  /** @type {(!PolymerElementProperties | undefined)} */\n  PolymerElementConstructor.properties;\n  /** @type {(!Array<string> | undefined)} */\n  PolymerElementConstructor.observers;\n  /** @type {(!HTMLTemplateElement | string | undefined)} */\n  PolymerElementConstructor.template;\n\n  /**\n   * Element class mixin that provides the core API for Polymer's meta-programming\n   * features including template stamping, data-binding, attribute deserialization,\n   * and property change observation.\n   *\n   * Subclassers may provide the following static getters to return metadata\n   * used to configure Polymer's features for the class:\n   *\n   * - `static get is()`: When the template is provided via a `dom-module`,\n   *   users should return the `dom-module` id from a static `is` getter.  If\n   *   no template is needed or the template is provided directly via the\n   *   `template` getter, there is no need to define `is` for the element.\n   *\n   * - `static get template()`: Users may provide the template directly (as\n   *   opposed to via `dom-module`) by implementing a static `template` getter.\n   *   The getter may return an `HTMLTemplateElement` or a string, which will\n   *   automatically be parsed into a template.\n   *\n   * - `static get properties()`: Should return an object describing\n   *   property-related metadata used by Polymer features (key: property name\n   *   value: object containing property metadata). Valid keys in per-property\n   *   metadata include:\n   *   - `type` (String|Number|Object|Array|...): Used by\n   *     `attributeChangedCallback` to determine how string-based attributes\n   *     are deserialized to JavaScript property values.\n   *   - `notify` (boolean): Causes a change in the property to fire a\n   *     non-bubbling event called `<property>-changed`. Elements that have\n   *     enabled two-way binding to the property use this event to observe changes.\n   *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n   *     To set a read-only property, use the private setter method\n   *     `_setProperty(property, value)`.\n   *   - `observer` (string): Observer method name that will be called when\n   *     the property changes. The arguments of the method are\n   *     `(value, previousValue)`.\n   *   - `computed` (string): String describing method and dependent properties\n   *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n   *     Computed properties are read-only by default and can only be changed\n   *     via the return value of the computing method.\n   *\n   * - `static get observers()`: Array of strings describing multi-property\n   *   observer methods and their dependent properties (e.g.\n   *   `'observeABC(a, b, c)'`).\n   *\n   * The base class provides default implementations for the following standard\n   * custom element lifecycle callbacks; users may override these, but should\n   * call the super method to ensure\n   * - `constructor`: Run when the element is created or upgraded\n   * - `connectedCallback`: Run each time the element is connected to the\n   *   document\n   * - `disconnectedCallback`: Run each time the element is disconnected from\n   *   the document\n   * - `attributeChangedCallback`: Run each time an attribute in\n   *   `observedAttributes` is set or removed (note: this element's default\n   *   `observedAttributes` implementation will automatically return an array\n   *   of dash-cased attributes based on `properties`)\n   *\n   * @polymerMixin\n   * @mixes Polymer.PropertyEffects\n   * @memberof Polymer\n   * @property rootPath {string} Set to the value of `Polymer.rootPath`,\n   *   which defaults to the main document path\n   * @property importPath {string} Set to the value of the class's static\n   *   `importPath` property, which defaults to the path of this element's\n   *   `dom-module` (when `is` is used), but can be overridden for other\n   *   import strategies.\n   * @summary Element class mixin that provides the core API for Polymer's\n   * meta-programming features.\n   */\n  Polymer.ElementMixin = Polymer.dedupingMixin(base => {\n\n    /**\n     * @constructor\n     * @extends {base}\n     * @implements {Polymer_PropertyEffects}\n     */\n    const polymerElementBase = Polymer.PropertyEffects(base);\n\n    let caseMap = Polymer.CaseMap;\n\n    /**\n     * Returns the `properties` object specifically on `klass`. Use for:\n     * (1) super chain mixes togther to make `propertiesForClass` which is\n     * then used to make `observedAttributes`.\n     * (2) properties effects and observers are created from it at `finalize` time.\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {Object} Object containing own properties for this class\n     * @private\n     */\n    function ownPropertiesForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__ownProperties', klass))) {\n        klass.__ownProperties =\n          klass.hasOwnProperty(JSCompiler_renameProperty('properties', klass)) ?\n          klass.properties : {};\n      }\n      return klass.__ownProperties;\n    }\n\n    /**\n     * Returns the `observers` array specifically on `klass`. Use for\n     * setting up observers.\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {Array} Array containing own observers for this class\n     * @private\n     */\n    function ownObserversForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__ownObservers', klass))) {\n        klass.__ownObservers =\n          klass.hasOwnProperty(JSCompiler_renameProperty('observers', klass)) ?\n          klass.observers : [];\n      }\n      return klass.__ownObservers;\n    }\n\n    /**\n     * Mixes `props` into `flattenedProps` but upgrades shorthand type\n     * syntax to { type: Type}.\n     *\n     * @param {Object} flattenedProps Bag to collect flattened properties into\n     * @param {Object} props Bag of properties to add to `flattenedProps`\n     * @return {Objecg} The input `flattenedProps` bag\n     * @private\n     */\n    function flattenProperties(flattenedProps, props) {\n      for (let p in props) {\n        let o = props[p];\n        if (typeof o == 'function') {\n          o = { type: o };\n        }\n        flattenedProps[p] = o;\n      }\n      return flattenedProps;\n    }\n\n    /**\n     * Returns a flattened list of properties mixed together from the chain of all\n     * constructor's `config.properties`. This list is used to create\n     * (1) observedAttributes,\n     * (2) class property default values\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {PolymerElementProperties} Flattened properties for this class\n     * @private\n     */\n    function propertiesForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__classProperties', klass))) {\n        klass.__classProperties =\n        flattenProperties({}, ownPropertiesForClass(klass));\n        let superCtor = Object.getPrototypeOf(klass.prototype).constructor;\n        if (superCtor.prototype instanceof PolymerElement) {\n          klass.__classProperties = Object.assign(\n            Object.create(propertiesForClass(superCtor)),\n            klass.__classProperties);\n        }\n      }\n      return klass.__classProperties;\n    }\n\n    /**\n     * Returns a list of properties with default values.\n     * This list is created as an optimization since it is a subset of\n     * the list returned from `propertiesForClass`.\n     * This list is used in `_initializeProperties` to set property defaults.\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {PolymerElementProperties} Flattened properties for this class\n     *   that have default values\n     * @private\n     */\n    function propertyDefaultsForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__classPropertyDefaults', klass))) {\n        klass.__classPropertyDefaults = null;\n        let props = propertiesForClass(klass);\n        for (let p in props) {\n          let info = props[p];\n          if ('value' in info) {\n            klass.__classPropertyDefaults = klass.__classPropertyDefaults || {};\n            klass.__classPropertyDefaults[p] = info;\n          }\n        }\n      }\n      return klass.__classPropertyDefaults;\n    }\n\n    /**\n     * Returns true if a `klass` has finalized. Called in `ElementClass.finalize()`\n     * @param {HTMLElement} klass Element class\n     * @return {boolean} True if all metaprogramming for this class has been\n     *   completed\n     * @private\n     */\n    function hasClassFinalized(klass) {\n      return klass.hasOwnProperty(JSCompiler_renameProperty('__finalized', klass));\n    }\n\n    /**\n     * Called by `ElementClass.finalize()`. Ensures this `klass` and\n     * *all superclasses* are finalized by traversing the prototype chain\n     * and calling `klass.finalize()`.\n     *\n     * @param {HTMLElement} klass Element class\n     * @private\n     */\n    function finalizeClassAndSuper(klass) {\n      let proto = klass.prototype;\n      let superCtor = Object.getPrototypeOf(proto).constructor;\n      if (superCtor.prototype instanceof PolymerElement) {\n        superCtor.finalize();\n      }\n      finalizeClass(klass);\n    }\n\n    /**\n     * Configures a `klass` based on a staic `klass.config` object and\n     * a `template`. This includes creating accessors and effects\n     * for properties in `config` and the `template` as well as preparing the\n     * `template` for stamping.\n     *\n     * @param {HTMLElement} klass Element class\n     * @private\n     */\n    function finalizeClass(klass) {\n      klass.__finalized = true;\n      let proto = klass.prototype;\n      if (klass.hasOwnProperty(\n        JSCompiler_renameProperty('is', klass)) && klass.is) {\n        Polymer.telemetry.register(proto);\n      }\n      let props = ownPropertiesForClass(klass);\n      if (props) {\n        finalizeProperties(proto, props);\n      }\n      let observers = ownObserversForClass(klass);\n      if (observers) {\n        finalizeObservers(proto, observers, props);\n      }\n      // note: create \"working\" template that is finalized at instance time\n      let template = klass.template;\n      if (template) {\n        if (typeof template === 'string') {\n          let t = document.createElement('template');\n          t.innerHTML = template;\n          template = t;\n        } else {\n          template = template.cloneNode(true);\n        }\n        proto._template = template;\n      }\n    }\n\n    /**\n     * Configures a `proto` based on a `properties` object.\n     * Leverages `PropertyEffects` to create property accessors and effects\n     * supporting, observers, reflecting to attributes, change notification,\n     * computed properties, and read only properties.\n     * @param {HTMLElement} proto Element class prototype to add accessors\n     *    and effects to\n     * @param {Object} properties Flattened bag of property descriptors for\n     *    this class\n     * @private\n     */\n    function finalizeProperties(proto, properties) {\n      for (let p in properties) {\n        createPropertyFromConfig(proto, p, properties[p], properties);\n      }\n    }\n\n    /**\n     * Configures a `proto` based on a `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {HTMLElement} proto Element class prototype to add accessors\n     *   and effects to\n     * @param {Object} observers Flattened array of observer descriptors for\n     *   this class\n     * @param {Object} dynamicFns Object containing keys for any properties\n     *   that are functions and should trigger the effect when the function\n     *   reference is changed\n     * @private\n     */\n    function finalizeObservers(proto, observers, dynamicFns) {\n      for (let i=0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicFns);\n      }\n    }\n\n    /**\n     * Creates effects for a property.\n     *\n     * Note, once a property has been set to\n     * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n     * these values may not be changed. For example, a subclass cannot\n     * alter these settings. However, additional `observers` may be added\n     * by subclasses.\n     *\n     * The info object should may contain property metadata as follows:\n     *\n     * * `type`: {function} type to which an attribute matching the property\n     * is deserialized. Note the property is camel-cased from a dash-cased\n     * attribute. For example, 'foo-bar' attribute is dersialized to a\n     * property named 'fooBar'.\n     *\n     * * `readOnly`: {boolean} creates a readOnly property and\n     * makes a private setter for the private of the form '_setFoo' for a\n     * property 'foo',\n     *\n     * * `computed`: {string} creates a computed property. A computed property\n     * also automatically is set to `readOnly: true`. The value is calculated\n     * by running a method and arguments parsed from the given string. For\n     * example 'compute(foo)' will compute a given property when the\n     * 'foo' property changes by executing the 'compute' method. This method\n     * must return the computed value.\n     *\n     * * `reflectToAttriute`: {boolean} If true, the property value is reflected\n     * to an attribute of the same name. Note, the attribute is dash-cased\n     * so a property named 'fooBar' is reflected as 'foo-bar'.\n     *\n     * * `notify`: {boolean} sends a non-bubbling notification event when\n     * the property changes. For example, a property named 'foo' sends an\n     * event named 'foo-changed' with `event.detail` set to the value of\n     * the property.\n     *\n     * * observer: {string} name of a method that runs when the property\n     * changes. The arguments of the method are (value, previousValue).\n     *\n     * Note: Users may want control over modifying property\n     * effects via subclassing. For example, a user might want to make a\n     * reflectToAttribute property not do so in a subclass. We've chosen to\n     * disable this because it leads to additional complication.\n     * For example, a readOnly effect generates a special setter. If a subclass\n     * disables the effect, the setter would fail unexpectedly.\n     * Based on feedback, we may want to try to make effects more malleable\n     * and/or provide an advanced api for manipulating them.\n     * Also consider adding warnings when an effect cannot be changed.\n     *\n     * @param {HTMLElement} proto Element class prototype to add accessors\n     *   and effects to\n     * @param {string} name Name of the property.\n     * @param {Object} info Info object from which to create property effects.\n     * Supported keys:\n     * @param {Object} allProps Flattened map of all properties defined in this\n     *   element (including inherited properties)\n     * @private\n     */\n    function createPropertyFromConfig(proto, name, info, allProps) {\n      // computed forces readOnly...\n      if (info.computed) {\n        info.readOnly = true;\n      }\n      // Note, since all computed properties are readOnly, this prevents\n      // adding additional computed property effects (which leads to a confusing\n      // setup where multiple triggers for setting a property)\n      // While we do have `hasComputedEffect` this is set on the property's\n      // dependencies rather than itself.\n      if (info.computed  && !proto._hasReadOnlyEffect(name)) {\n        proto._createComputedProperty(name, info.computed, allProps);\n      }\n      if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n        proto._createReadOnlyProperty(name, !info.computed);\n      }\n      if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n        proto._createReflectedProperty(name);\n      }\n      if (info.notify && !proto._hasNotifyEffect(name)) {\n        proto._createNotifyingProperty(name);\n      }\n      // always add observer\n      if (info.observer) {\n        proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n      }\n    }\n\n    /**\n     * Configures an element `proto` to function with a given `template`.\n     * The element name `is` and extends `ext` must be specified for ShadyCSS\n     * style scoping.\n     *\n     * @param {HTMLElement} proto Element class prototype to add accessors\n     *   and effects to\n     * @param {HTMLTemplateElement} template Template to process and bind\n     * @param {string} baseURI URL against which to resolve urls in\n     *   style element cssText\n     * @param {string} is Tag name (or type extension name) for this element\n     * @param {string=} ext For type extensions, the tag name that was extended\n     * @private\n     */\n    function finalizeTemplate(proto, template, baseURI, is, ext) {\n      // support `include=\"module-name\"`\n      let cssText =\n        Polymer.StyleGather.cssFromTemplate(template, baseURI) +\n        Polymer.StyleGather.cssFromModuleImports(is);\n      if (cssText) {\n        let style = document.createElement('style');\n        style.textContent = cssText;\n        template.content.insertBefore(style, template.content.firstChild);\n      }\n      if (window.ShadyCSS) {\n        window.ShadyCSS.prepareTemplate(template, is, ext);\n      }\n      proto._bindTemplate(template);\n    }\n\n    /**\n     * @polymerMixinClass\n     * @unrestricted\n     * @implements {Polymer_ElementMixin}\n     */\n    class PolymerElement extends polymerElementBase {\n\n      /**\n       * Standard Custom Elements V1 API.  The default implementation returns\n       * a list of dash-cased attributes based on a flattening of all properties\n       * declared in `static get properties()` for this element and any\n       * superclasses.\n       *\n       * @return {Array} Observed attribute list\n       */\n      static get observedAttributes() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n          let list = [];\n          let properties = propertiesForClass(this);\n          for (let prop in properties) {\n            list.push(Polymer.CaseMap.camelToDashCase(prop));\n          }\n          this.__observedAttributes = list;\n        }\n        return this.__observedAttributes;\n      }\n\n      /**\n       * Called automatically when the first element instance is created to\n       * ensure that class finalization work has been completed.\n       * May be called by users to eagerly perform class finalization work\n       * prior to the creation of the first element instance.\n       *\n       * Class finalization work generally includes meta-programming such as\n       * creating property accessors and any property effect metadata needed for\n       * the features used.\n       *\n       * @public\n       */\n      static finalize() {\n        if (!hasClassFinalized(this)) {\n          finalizeClassAndSuper(this);\n        }\n      }\n\n      /**\n       * Returns the template that will be stamped into this element's shadow root.\n       *\n       * If a `static get is()` getter is defined, the default implementation\n       * will return the first `<template>` in a `dom-module` whose `id`\n       * matches this element's `is`.\n       *\n       * Users may override this getter to return an arbitrary template\n       * (in which case the `is` getter is unnecessary). The template returned\n       * may be either an `HTMLTemplateElement` or a string that will be\n       * automatically parsed into a template.\n       *\n       * Note that when subclassing, if the super class overrode the default\n       * implementation and the subclass would like to provide an alternate\n       * template via a `dom-module`, it should override this getter and\n       * return `Polymer.DomModule.import(this.is, 'template')`.\n       *\n       * If a subclass would like to modify the super class template, it should\n       * clone it rather than modify it in place.  If the getter does expensive\n       * work such as cloning/modifying a template, it should memoize the\n       * template for maximum performance:\n       *\n       *   let memoizedTemplate;\n       *   class MySubClass extends MySuperClass {\n       *     static get template() {\n       *       if (!memoizedTemplate) {\n       *         memoizedTemplate = super.template.cloneNode(true);\n       *         let subContent = document.createElement('div');\n       *         subContent.textContent = 'This came from MySubClass';\n       *         memoizedTemplate.content.appendChild(subContent);\n       *       }\n       *       return memoizedTemplate;\n       *     }\n       *   }\n       *\n       * @return {HTMLTemplateElement|string} Template to be stamped\n       */\n      static get template() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n          this._template = Polymer.DomModule.import(this.is, 'template') ||\n            // note: implemented so a subclass can retrieve the super\n            // template; call the super impl this way so that `this` points\n            // to the superclass.\n            Object.getPrototypeOf(this.prototype).constructor.template;\n        }\n        return this._template;\n      }\n\n      /**\n       * Path matching the url from which the element was imported.\n       * This path is used to resolve url's in template style cssText.\n       * The `importPath` property is also set on element instances and can be\n       * used to create bindings relative to the import path.\n       * Defaults to the path matching the url containing a `dom-module` element\n       * matching this element's static `is` property.\n       * Note, this path should contain a trailing `/`.\n       *\n       * @return {string} The import path for this element class\n       */\n      static get importPath() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n            const module = Polymer.DomModule.import(this.is);\n            this._importPath = module ? module.assetpath : '' ||\n            Object.getPrototypeOf(this.prototype).constructor.importPath;\n        }\n        return this._importPath;\n      }\n\n      /**\n       * Overrides the default `Polymer.PropertyAccessors` to ensure class\n       * metaprogramming related to property accessors and effects has\n       * completed (calls `finalize`).\n       *\n       * It also initializes any property defaults provided via `value` in\n       * `properties` metadata.\n       *\n       * @override\n       */\n      _initializeProperties() {\n        Polymer.telemetry.instanceCount++;\n        this.constructor.finalize();\n        const importPath = this.constructor.importPath;\n        // note: finalize template when we have access to `localName` to\n        // avoid dependence on `is` for polyfilling styling.\n        if (this._template && !this._template.__polymerFinalized) {\n          this._template.__polymerFinalized = true;\n          const baseURI =\n            importPath ? Polymer.ResolveUrl.resolveUrl(importPath) : '';\n          finalizeTemplate(this.__proto__, this._template, baseURI,\n            this.localName);\n        }\n        super._initializeProperties();\n        // set path defaults\n        this.rootPath = Polymer.rootPath;\n        this.importPath = importPath;\n        // apply property defaults...\n        let p$ = propertyDefaultsForClass(this.constructor);\n        if (!p$) {\n          return;\n        }\n        for (let p in p$) {\n          let info = p$[p];\n          // Don't set default value if there is already an own property, which\n          // happens when a `properties` property with default but no effects had\n          // a property set (e.g. bound) by its host before upgrade\n          if (!this.hasOwnProperty(p)) {\n            let value = typeof info.value == 'function' ?\n              info.value.call(this) :\n              info.value;\n            // Set via `_setProperty` if there is an accessor, to enable\n            // initializing readOnly property defaults\n            if (this._hasAccessor(p)) {\n              this._setPendingProperty(p, value, true);\n            } else {\n              this[p] = value;\n            }\n          }\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `connectedCallback`.\n       *\n       * The default implementation enables the property effects system and\n       * flushes any pending properties, and updates shimmed CSS properties\n       * when using the ShadyCSS scoping/custom properties polyfill.\n       *\n       * @override\n       */\n      connectedCallback() {\n        if (window.ShadyCSS && this._template) {\n          window.ShadyCSS.styleElement(this);\n        }\n        this._enableProperties();\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `disconnectedCallback`.\n       *\n       * @override\n       */\n      disconnectedCallback() {}\n\n      /**\n       * Stamps the element template.\n       *\n       * @override\n       */\n      ready() {\n        if (this._template) {\n          this.root = this._stampTemplate(this._template);\n          this.$ = this.root.$;\n        }\n        super.ready();\n      }\n\n      /**\n       * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n       * element dom by calling `_attachDom` with the dom stamped from the\n       * element's template via `_stampTemplate`. Note that this allows\n       * client dom to be attached to the element prior to any observers\n       * running.\n       *\n       * @override\n       */\n      _readyClients() {\n        if (this._template) {\n          this.root = this._attachDom(this.root);\n        }\n        // The super._readyClients here sets the clients initialized flag.\n        // We must wait to do this until after client dom is created/attached\n        // so that this flag can be checked to prevent notifications fired\n        // during this process from being handled before clients are ready.\n        super._readyClients();\n      }\n\n\n      /**\n       * Attaches an element's stamped dom to itself. By default,\n       * this method creates a `shadowRoot` and adds the dom to it.\n       * However, this method may be overridden to allow an element\n       * to put its dom in another location.\n       *\n       * @throws {Error}\n       * @suppress {missingReturn}\n       * @param {NodeList} dom to attach to the element.\n       * @return {Node} node to which the dom has been attached.\n       */\n      _attachDom(dom) {\n        if (this.attachShadow) {\n          if (dom) {\n            if (!this.shadowRoot) {\n              this.attachShadow({mode: 'open'});\n            }\n            this.shadowRoot.appendChild(dom);\n            return this.shadowRoot;\n          }\n        } else {\n          throw new Error('ShadowDOM not available. ' +\n            // TODO(sorvell): move to compile-time conditional when supported\n          'Polymer.Element can create dom as children instead of in ' +\n          'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `attributeChangedCallback`.\n       *\n       * By default, attributes declared in `properties` metadata are\n       * deserialized using their `type` information to properties of the\n       * same name.  \"Dash-cased\" attributes are deserialzed to \"camelCase\"\n       * properties.\n       *\n       * @override\n       */\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          let property = caseMap.dashToCamelCase(name);\n          let type = propertiesForClass(this.constructor)[property].type;\n          if (!this._hasReadOnlyEffect(property)) {\n            this._attributeToProperty(name, value, type);\n          }\n        }\n      }\n\n      /**\n       * When using the ShadyCSS scoping and custom property shim, causes all\n       * shimmed styles in this element (and its subtree) to be updated\n       * based on current custom property values.\n       *\n       * The optional parameter overrides inline custom property styles with an\n       * object of properties where the keys are CSS properties, and the values\n       * are strings.\n       *\n       * Example: `this.updateStyles({'--color': 'blue'})`\n       *\n       * These properties are retained unless a value of `null` is set.\n       *\n       * @param {Object=} properties Bag of custom property key/values to\n       *   apply to this element.\n       */\n      updateStyles(properties) {\n        if (window.ShadyCSS) {\n          window.ShadyCSS.styleSubtree(this, properties);\n        }\n      }\n\n      /**\n       * Rewrites a given URL relative to a base URL. The base URL defaults to\n       * the original location of the document containing the `dom-module` for\n       * this element. This method will return the same URL before and after\n       * bundling.\n       *\n       * @param {string} url URL to resolve.\n       * @param {string=} base Optional base URL to resolve against, defaults\n       * to the element's `importPath`\n       * @return {string} Rewritten URL relative to base\n       */\n      resolveUrl(url, base) {\n        if (!base && this.importPath) {\n          base = Polymer.ResolveUrl.resolveUrl(this.importPath);\n        }\n        return Polymer.ResolveUrl.resolveUrl(url, base);\n      }\n\n      /**\n       * Overrides `PropertyAccessors` to add map of dynamic functions on\n       * template info, for consumption by `PropertyEffects` template binding\n       * code. This map determines which method templates should have accessors\n       * created for them.\n       *\n       * @override\n       */\n      static _parseTemplateContent(template, templateInfo, nodeInfo) {\n        templateInfo.dynamicFns = templateInfo.dynamicFns || propertiesForClass(this);\n        return super._parseTemplateContent(template, templateInfo, nodeInfo);\n      }\n\n    }\n\n    return PolymerElement;\n  });\n\n  /**\n   * Provides basic tracking of element definitions (registrations) and\n   * instance counts.\n   *\n   * @namespace\n   * @summary Provides basic tracking of element definitions (registrations) and\n   * instance counts.\n   */\n  Polymer.telemetry = {\n    /**\n     * Total number of Polymer element instances created.\n     * @type {number}\n     */\n    instanceCount: 0,\n    /**\n     * Array of Polymer element classes that have been finalized.\n     * @type {Array<Polymer.Element>}\n     */\n    registrations: [],\n    /**\n     * @param {HTMLElement} prototype Element prototype to log\n     * @private\n     */\n    _regLog: function(prototype) {\n      console.log('[' + prototype.is + ']: registered')\n    },\n    /**\n     * Registers a class prototype for telemetry purposes.\n     * @param {HTMLElement} prototype Element prototype to register\n     * @protected\n     */\n    register: function(prototype) {\n      this.registrations.push(prototype);\n      Polymer.log && this._regLog(prototype);\n    },\n    /**\n     * Logs all elements registered with an `is` to the console.\n     * @public\n     */\n    dumpRegistrations: function() {\n      this.registrations.forEach(this._regLog);\n    }\n  };\n\n  /**\n   * When using the ShadyCSS scoping and custom property shim, causes all\n   * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n   * to be updated based on current custom property values.\n   *\n   * The optional parameter overrides inline custom property styles with an\n   * object of properties where the keys are CSS properties, and the values\n   * are strings.\n   *\n   * Example: `Polymer.updateStyles({'--color': 'blue'})`\n   *\n   * These properties are retained unless a value of `null` is set.\n   *\n   * @param {Object=} props Bag of custom property key/values to\n   *   apply to the document.\n   */\n  Polymer.updateStyles = function(props) {\n    if (window.ShadyCSS) {\n      window.ShadyCSS.styleDocument(props);\n    }\n  };\n\n  /**\n   * Globally settable property that is automatically assigned to\n   * `Polymer.ElementMixin` instances, useful for binding in templates to\n   * make URL's relative to an application's root.  Defaults to the main\n   * document URL, but can be overridden by users.  It may be useful to set\n   * `Polymer.rootPath` to provide a stable application mount path when\n   * using client side routing.\n   *\n   * @memberof Polymer\n   */\n  Polymer.rootPath = Polymer.rootPath ||\n    Polymer.ResolveUrl.pathFromUrl(document.baseURI || window.location.href);\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/mixins/element-mixin.html","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\nrequire('../utils/case-map.html');\n\nrequire('../utils/async.html');\n\n\n(function() {\n\n  'use strict';\n\n  let caseMap = Polymer.CaseMap;\n\n  let microtask = Polymer.Async.microTask;\n\n  // Save map of native properties; this forms a blacklist or properties\n  // that won't have their values \"saved\" by `saveAccessorValue`, since\n  // reading from an HTMLElement accessor from the context of a prototype throws\n  const nativeProperties = {};\n  let proto = HTMLElement.prototype;\n  while (proto) {\n    let props = Object.getOwnPropertyNames(proto);\n    for (let i=0; i<props.length; i++) {\n      nativeProperties[props[i]] = true;\n    }\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  /**\n   * Used to save the value of a property that will be overridden with\n   * an accessor. If the `model` is a prototype, the values will be saved\n   * in `__dataProto`, and it's up to the user (or downstream mixin) to\n   * decide how/when to set these values back into the accessors.\n   * If `model` is already an instance (it has a `__data` property), then\n   * the value will be set as a pending property, meaning the user should\n   * call `_invalidateProperties` or `_flushProperties` to take effect\n   *\n   * @param {Object} model Prototype or instance\n   * @param {string} property Name of property\n   * @private\n   */\n  function saveAccessorValue(model, property) {\n    // Don't read/store value for any native properties since they could throw\n    if (!nativeProperties[property]) {\n      let value = model[property];\n      if (value !== undefined) {\n        if (model.__data) {\n          // Adding accessor to instance; update the property\n          // It is the user's responsibility to call _flushProperties\n          model._setPendingProperty(property, value);\n        } else {\n          // Adding accessor to proto; save proto's value for instance-time use\n          if (!model.__dataProto) {\n            model.__dataProto = {};\n          } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n            model.__dataProto = Object.create(model.__dataProto);\n          }\n          model.__dataProto[property] = value;\n        }\n      }\n    }\n  }\n\n  /**\n   * Element class mixin that provides basic meta-programming for creating one\n   * or more property accessors (getter/setter pair) that enqueue an async\n   * (batched) `_propertiesChanged` callback.\n   *\n   * For basic usage of this mixin, simply declare attributes to observe via\n   * the standard `static get observedAttributes()`, implement `_propertiesChanged`\n   * on the class, and then call `MyClass.createPropertiesForAttributes()` once\n   * on the class to generate property accessors for each observed attribute\n   * prior to instancing.  Last, call `this._flushProperties()` once to enable\n   * the accessors.\n   *\n   * Any `observedAttributes` will automatically be\n   * deserialized via `attributeChangedCallback` and set to the associated\n   * property using `dash-case`-to-`camelCase` convention.\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin for reacting to property changes from\n   *   generated property accessors.\n   */\n  Polymer.PropertyAccessors = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymerMixinClass\n     * @implements {Polymer_PropertyAccessors}\n     * @unrestricted\n     */\n    class PropertyAccessors extends superClass {\n\n      /**\n       * Generates property accessors for all attributes in the standard\n       * static `observedAttributes` array.\n       *\n       * Attribute names are mapped to property names using the `dash-case` to\n       * `camelCase` convention\n       *\n       */\n      static createPropertiesForAttributes() {\n        let a$ = this.observedAttributes;\n        for (let i=0; i < a$.length; i++) {\n          this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n        }\n      }\n\n      constructor() {\n        super();\n        this._initializeProperties();\n      }\n\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          this._attributeToProperty(name, value);\n        }\n      }\n\n      /**\n       * Initializes the local storage for property accessors.\n       *\n       * Provided as an override point for performing any setup work prior\n       * to initializing the property accessor system.\n       *\n       * @protected\n       */\n      _initializeProperties() {\n        this.__serializing = false;\n        this.__dataCounter = 0;\n        this.__dataEnabled = false;\n        this.__dataInitialized = false;\n        this.__dataInvalid = false;\n        // initialize data with prototype values saved when creating accessors\n        this.__data = {};\n        this.__dataPending = null;\n        this.__dataOld = null;\n        if (this.__dataProto) {\n          this._initializeProtoProperties(this.__dataProto);\n          this.__dataProto = null;\n        }\n        // Capture instance properties; these will be set into accessors\n        // during first flush. Don't set them here, since we want\n        // these to overwrite defaults/constructor assignments\n        for (let p in this.__dataHasAccessor) {\n          if (this.hasOwnProperty(p)) {\n            this.__dataInstanceProps = this.__dataInstanceProps || {};\n            this.__dataInstanceProps[p] = this[p];\n            delete this[p];\n          }\n        }\n      }\n\n      /**\n       * Called at instance time with bag of properties that were overwritten\n       * by accessors on the prototype when accessors were created.\n       *\n       * The default implementation sets these properties back into the\n       * setter at instance time.  This method is provided as an override\n       * point for customizing or providing more efficient initialization.\n       *\n       * @param {Object} props Bag of property values that were overwritten\n       *   when creating property accessors.\n       * @protected\n       */\n      _initializeProtoProperties(props) {\n        for (let p in props) {\n          this._setProperty(p, props[p]);\n        }\n      }\n\n      /**\n       * Called at ready time with bag of instance properties that overwrote\n       * accessors when the element upgraded.\n       *\n       * The default implementation sets these properties back into the\n       * setter at ready time.  This method is provided as an override\n       * point for customizing or providing more efficient initialization.\n       *\n       * @param {Object} props Bag of property values that were overwritten\n       *   when creating property accessors.\n       * @protected\n       */\n      _initializeInstanceProperties(props) {\n        Object.assign(this, props);\n      }\n\n      /**\n       * Ensures the element has the given attribute. If it does not,\n       * assigns the given value to the attribute.\n       *\n       *\n       * @param {string} attribute Name of attribute to ensure is set.\n       * @param {string} value of the attribute.\n       */\n      _ensureAttribute(attribute, value) {\n        if (!this.hasAttribute(attribute)) {\n          this._valueToNodeAttribute(this, value, attribute);\n        }\n      }\n\n      /**\n       * Deserializes an attribute to its associated property.\n       *\n       * This method calls the `_deserializeValue` method to convert the string to\n       * a typed value.\n       *\n       * @param {string} attribute Name of attribute to deserialize.\n       * @param {string} value of the attribute.\n       * @param {*} type type to deserialize to.\n       */\n      _attributeToProperty(attribute, value, type) {\n        // Don't deserialize back to property if currently reflecting\n        if (!this.__serializing) {\n          let property = caseMap.dashToCamelCase(attribute);\n          this[property] = this._deserializeValue(value, type);\n        }\n      }\n\n      /**\n       * Serializes a property to its associated attribute.\n       *\n       * @param {string} property Property name to reflect.\n       * @param {string=} attribute Attribute name to reflect.\n       * @param {*=} value Property value to refect.\n       */\n      _propertyToAttribute(property, attribute, value) {\n        this.__serializing = true;\n        value = (arguments.length < 3) ? this[property] : value;\n        this._valueToNodeAttribute(this, value,\n          attribute || caseMap.camelToDashCase(property));\n        this.__serializing = false;\n      }\n\n      /**\n       * Sets a typed value to an HTML attribute on a node.\n       *\n       * This method calls the `_serializeValue` method to convert the typed\n       * value to a string.  If the `_serializeValue` method returns `undefined`,\n       * the attribute will be removed (this is the default for boolean\n       * type `false`).\n       *\n       * @param {Element} node Element to set attribute to.\n       * @param {*} value Value to serialize.\n       * @param {string} attribute Attribute name to serialize to.\n       */\n      _valueToNodeAttribute(node, value, attribute) {\n        let str = this._serializeValue(value);\n        if (str === undefined) {\n          node.removeAttribute(attribute);\n        } else {\n          node.setAttribute(attribute, str);\n        }\n      }\n\n      /**\n       * Converts a typed JavaScript value to a string.\n       *\n       * This method is called by Polymer when setting JS property values to\n       * HTML attributes.  Users may override this method on Polymer element\n       * prototypes to provide serialization for custom types.\n       *\n       * @param {*} value Property value to serialize.\n       * @return {string | undefined} String serialized from the provided property value.\n       */\n      _serializeValue(value) {\n        /* eslint-disable no-fallthrough */\n        switch (typeof value) {\n          case 'boolean':\n            return value ? '' : undefined;\n\n          case 'object':\n            if (value instanceof Date) {\n              return value.toString();\n            } else if (value) {\n              try {\n                return JSON.stringify(value);\n              } catch(x) {\n                return '';\n              }\n            }\n\n          default:\n            return value != null ? value.toString() : undefined;\n        }\n      }\n\n      /**\n       * Converts a string to a typed JavaScript value.\n       *\n       * This method is called by Polymer when reading HTML attribute values to\n       * JS properties.  Users may override this method on Polymer element\n       * prototypes to provide deserialization for custom `type`s.  Note,\n       * the `type` argument is the value of the `type` field provided in the\n       * `properties` configuration object for a given property, and is\n       * by convention the constructor for the type to deserialize.\n       *\n       * Note: The return value of `undefined` is used as a sentinel value to\n       * indicate the attribute should be removed.\n       *\n       * @param {string} value Attribute value to deserialize.\n       * @param {*} type Type to deserialize the string to.\n       * @return {*} Typed value deserialized from the provided string.\n       */\n      _deserializeValue(value, type) {\n        /**\n         * @type {*}\n         */\n        let outValue;\n        switch (type) {\n          case Number:\n            outValue = Number(value);\n            break;\n\n          case Boolean:\n            outValue = (value !== null);\n            break;\n\n          case Object:\n            try {\n              outValue = JSON.parse(value);\n            } catch(x) {\n              // allow non-JSON literals like Strings and Numbers\n            }\n            break;\n\n          case Array:\n            try {\n              outValue = JSON.parse(value);\n            } catch(x) {\n              outValue = null;\n              console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n            }\n            break;\n\n          case Date:\n            outValue = new Date(value);\n            break;\n\n          case String:\n          default:\n            outValue = value;\n            break;\n        }\n\n        return outValue;\n      }\n      /* eslint-enable no-fallthrough */\n\n      /**\n       * Creates a setter/getter pair for the named property with its own\n       * local storage.  The getter returns the value in the local storage,\n       * and the setter calls `_setProperty`, which updates the local storage\n       * for the property and enqueues a `_propertiesChanged` callback.\n       *\n       * This method may be called on a prototype or an instance.  Calling\n       * this method may overwrite a property value that already exists on\n       * the prototype/instance by creating the accessor.  When calling on\n       * a prototype, any overwritten values are saved in `__dataProto`,\n       * and it is up to the subclasser to decide how/when to set those\n       * properties back into the accessor.  When calling on an instance,\n       * the overwritten value is set via `_setPendingProperty`, and the\n       * user should call `_invalidateProperties` or `_flushProperties`\n       * for the values to take effect.\n       *\n       * @param {string} property Name of the property\n       * @param {boolean=} readOnly When true, no setter is created; the\n       *   protected `_setProperty` function must be used to set the property\n       * @protected\n       */\n      _createPropertyAccessor(property, readOnly) {\n        if (!this.hasOwnProperty('__dataHasAccessor')) {\n          this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n        }\n        if (!this.__dataHasAccessor[property]) {\n          this.__dataHasAccessor[property] = true;\n          saveAccessorValue(this, property);\n          Object.defineProperty(this, property, {\n            get: function() {\n              return this.__data[property];\n            },\n            set: readOnly ? function() { } : function(value) {\n              this._setProperty(property, value);\n            }\n          });\n        }\n      }\n\n      /**\n       * Returns true if this library created an accessor for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if an accessor was created\n       */\n      _hasAccessor(property) {\n        return this.__dataHasAccessor && this.__dataHasAccessor[property];\n      }\n\n      /**\n       * Updates the local storage for a property (via `_setPendingProperty`)\n       * and enqueues a `_proeprtiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @protected\n       */\n      _setProperty(property, value) {\n        if (this._setPendingProperty(property, value)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Updates the local storage for a property, records the previous value,\n       * and adds it to the set of \"pending changes\" that will be passed to the\n       * `_propertiesChanged` callback.  This method does not enqueue the\n       * `_propertiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @return {boolean} Returns true if the property changed\n       * @protected\n       */\n      _setPendingProperty(property, value) {\n        let old = this.__data[property];\n        if (this._shouldPropertyChange(property, value, old)) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (!(property in this.__dataOld)) {\n            this.__dataOld[property] = old;\n          }\n          this.__data[property] = value;\n          this.__dataPending[property] = value;\n          return true;\n        }\n      }\n\n      /**\n       * Returns true if the specified property has a pending change.\n       *\n       * @param {string} prop Property name\n       * @return {boolean} True if property has a pending change\n       * @protected\n       */\n      _isPropertyPending(prop) {\n        return this.__dataPending && (prop in this.__dataPending);\n      }\n\n      /**\n       * Marks the properties as invalid, and enqueues an async\n       * `_propertiesChanged` callback.\n       *\n       * @protected\n       */\n      _invalidateProperties() {\n        if (!this.__dataInvalid && this.__dataInitialized) {\n          this.__dataInvalid = true;\n          microtask.run(() => {\n            if (this.__dataInvalid) {\n              this.__dataInvalid = false;\n              this._flushProperties();\n            }\n          });\n        }\n      }\n\n      /**\n       * Call to enable property accessor processing. Before this method is\n       * called accessor values will be set but side effects are\n       * queued. When called, any pending side effects occur immediately.\n       * For elements, generally `connectedCallback` is a normal spot to do so.\n       * It is safe to call this method multiple times as it only turns on\n       * property accessors once.\n       */\n      _enableProperties() {\n        if (!this.__dataEnabled) {\n          this.__dataEnabled = true;\n          if (this.__dataInstanceProps) {\n            this._initializeInstanceProperties(this.__dataInstanceProps);\n            this.__dataInstanceProps = null;\n          }\n          this.ready()\n        }\n      }\n\n      /**\n       * Calls the `_propertiesChanged` callback with the current set of\n       * pending changes (and old values recorded when pending changes were\n       * set), and resets the pending set of changes. Generally, this method\n       * should not be called in user code.\n       *\n       *\n       * @protected\n       */\n      _flushProperties() {\n        if (this.__dataPending) {\n          let changedProps = this.__dataPending;\n          this.__dataPending = null;\n          this.__dataCounter++;\n          this._propertiesChanged(this.__data, changedProps, this.__dataOld);\n          this.__dataCounter--;\n        }\n      }\n\n      /**\n       * Lifecycle callback called the first time properties are being flushed.\n       * Prior to `ready`, all property sets through accessors are queued and\n       * their effects are flushed after this method returns.\n       *\n       * Users may override this function to implement behavior that is\n       * dependent on the element having its properties initialized, e.g.\n       * from defaults (initialized from `constructor`, `_initializeProperties`),\n       * `attributeChangedCallback`, or values propagated from host e.g. via\n       * bindings.  `super.ready()` must be called to ensure the data system\n       * becomes enabled.\n       *\n       * @public\n       */\n      ready() {\n        this.__dataInitialized = true;\n        // Run normal flush\n        this._flushProperties();\n      }\n\n      /**\n       * Callback called when any properties with accessors created via\n       * `_createPropertyAccessor` have been set.\n       *\n       * @param {Object} currentProps Bag of all current accessor values\n       * @param {Object} changedProps Bag of properties changed since the last\n       *   call to `_propertiesChanged`\n       * @param {Object} oldProps Bag of previous values for each property\n       *   in `changedProps`\n       * @protected\n       */\n      _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      }\n\n      /**\n       * Method called to determine whether a property value should be\n       * considered as a change and cause the `_propertiesChanged` callback\n       * to be enqueued.\n       *\n       * The default implementation returns `true` for primitive types if a\n       * strict equality check fails, and returns `true` for all Object/Arrays.\n       * The method always returns false for `NaN`.\n       *\n       * Override this method to e.g. provide stricter checking for\n       * Objects/Arrays when using immutable patterns.\n       *\n       * @param {string} property Property name\n       * @param {*} value New property value\n       * @param {*} old Previous property value\n       * @return {boolean} Whether the property should be considered a change\n       *   and enqueue a `_proeprtiesChanged` callback\n       * @protected\n       */\n      _shouldPropertyChange(property, value, old) {\n        return (\n          // Strict equality check\n          (old !== value &&\n           // This ensures (old==NaN, value==NaN) always returns false\n           (old === old || value === value))\n        );\n      }\n\n    }\n\n    return PropertyAccessors;\n\n  });\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/mixins/property-accessors.html","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\nrequire('../utils/path.html');\n\nrequire('../utils/case-map.html');\n\nrequire('./property-accessors.html');\n\nrequire('./template-stamp.html');\n\n\n(function() {\n\n  'use strict';\n\n  /** @const {Object} */\n  const CaseMap = Polymer.CaseMap;\n\n  // Monotonically increasing unique ID used for de-duping effects triggered\n  // from multiple properties in the same turn\n  let dedupeId = 0;\n\n  // Property effect types; effects are stored on the prototype using these keys\n  const TYPES = {\n    COMPUTE: '__computeEffects',\n    REFLECT: '__reflectEffects',\n    NOTIFY: '__notifyEffects',\n    PROPAGATE: '__propagateEffects',\n    OBSERVE: '__observeEffects',\n    READ_ONLY: '__readOnly'\n  }\n\n  /**\n   * Ensures that the model has an own-property map of effects for the given type.\n   * The model may be a prototype or an instance.\n   *\n   * Property effects are stored as arrays of effects by property in a map,\n   * by named type on the model. e.g.\n   *\n   *   __computeEffects: {\n   *     foo: [ ... ],\n   *     bar: [ ... ]\n   *   }\n   *\n   * If the model does not yet have an effect map for the type, one is created\n   * and returned.  If it does, but it is not an own property (i.e. the\n   * prototype had effects), the the map is deeply cloned and the copy is\n   * set on the model and returned, ready for new effects to be added.\n   *\n   * @param {Object} model Prototype or instance\n   * @param {string} type Property effect type\n   * @return {Object} The own-property map of effects for the given type\n   * @private\n   */\n  function ensureOwnEffectMap(model, type) {\n    let effects = model[type];\n    if (!effects) {\n      effects = model[type] = {};\n    } else if (!model.hasOwnProperty(type)) {\n      effects = model[type] = Object.create(model[type]);\n      for (let p in effects) {\n        let protoFx = effects[p];\n        let instFx = effects[p] = Array(protoFx.length);\n        for (let i=0; i<protoFx.length; i++) {\n          instFx[i] = protoFx[i];\n        }\n      }\n    }\n    return effects;\n  }\n\n  // -- effects ----------------------------------------------\n\n  /**\n   * Runs all effects of a given type for the given set of property changes\n   * on an instance.\n   *\n   * @param {Object} inst The instance with effects to run\n   * @param {Object} effects Object map of property-to-Array of effects\n   * @param {Object} props Bag of current property changes\n   * @param {Object=} oldProps Bag of previous values for changed properties\n   * @param {boolean=} hasPaths True with `props` contains one or more paths\n   * @param {*=} extraArgs Additional metadata to pass to effect function\n   * @return {boolean} True if an effect ran for this property\n   * @private\n   */\n  function runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n    if (effects) {\n      let ran = false;\n      let id = dedupeId++;\n      for (let prop in props) {\n        if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n          ran = true;\n        }\n      }\n      return ran;\n    }\n    return false;\n  }\n\n  /**\n   * Runs a list of effects for a given property.\n   *\n   * @param {Object} inst The instance with effects to run\n   * @param {Object} effects Object map of property-to-Array of effects\n   * @param {number} dedupeId Counter used for de-duping effects\n   * @param {string} prop Name of changed property\n   * @param {*} props Changed properties\n   * @param {*} oldProps Old properties\n   * @param {boolean=} hasPaths True with `props` contains one or more paths\n   * @param {*=} extraArgs Additional metadata to pass to effect function\n   * @return {boolean} True if an effect ran for this property\n   * @private\n   */\n  function runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n    let ran = false;\n    let rootProperty = hasPaths ? Polymer.Path.root(prop) : prop;\n    let fxs = effects[rootProperty];\n    if (fxs) {\n      for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n        if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n            (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n          if (fx.info) {\n            fx.info.lastRun = dedupeId;\n          }\n          fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n          ran = true;\n        }\n      }\n    }\n    return ran;\n  }\n\n  /**\n   * Determines whether a property/path that has changed matches the trigger\n   * criteria for an effect.  A trigger is a descriptor with the following\n   * structure, which matches the descriptors returned from `parseArg`.\n   * e.g. for `foo.bar.*`:\n   * ```\n   * trigger: {\n   *   name: 'a.b',\n   *   structured: true,\n   *   wildcard: true\n   * }\n   * ```\n   * If no trigger is given, the path is deemed to match.\n   *\n   * @param {string} path Path or property that changed\n   * @param {Object} trigger Descriptor\n   * @return {boolean} Whether the path matched the trigger\n   */\n  function pathMatchesTrigger(path, trigger) {\n    if (trigger) {\n      let triggerPath = trigger.name;\n      return (triggerPath == path) ||\n        (trigger.structured && Polymer.Path.isAncestor(triggerPath, path)) ||\n        (trigger.wildcard && Polymer.Path.isDescendant(triggerPath, path));\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Implements the \"observer\" effect.\n   *\n   * Calls the method with `info.methodName` on the instance, passing the\n   * new and old values.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runObserverEffect(inst, property, props, oldProps, info) {\n    let fn = inst[info.methodName];\n    let changedProp = info.property;\n    if (fn) {\n      fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n    } else if (!info.dynamicFn) {\n      console.warn('observer method `' + info.methodName + '` not defined');\n    }\n  }\n\n  /**\n   * Runs \"notify\" effects for a set of changed properties.\n   *\n   * This method differs from the generic `runEffects` method in that it\n   * will dispatch path notification events in the case that the property\n   * changed was a path and the root property for that path didn't have a\n   * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n   * `notify: true` to ensure object sub-property notifications were\n   * sent.\n   *\n   * @param {Element} inst The instance with effects to run\n   * @param {Object} notifyProps Bag of properties to notify\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n    // Notify\n    let fxs = inst.__notifyEffects;\n    let notified;\n    let id = dedupeId++;\n    // Try normal notify effects; if none, fall back to try path notification\n    for (let prop in notifyProps) {\n      if (notifyProps[prop]) {\n        if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n          notified = true;\n        } else if (hasPaths && notifyPath(inst, prop, props)) {\n          notified = true;\n        }\n      }\n    }\n    // Flush host if we actually notified and host was batching\n    // And the host has already initialized clients; this prevents\n    // an issue with a host observing data changes before clients are ready.\n    let host;\n    if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n      host._invalidateProperties();\n    }\n  }\n\n  /**\n   * Dispatches {property}-changed events with path information in the detail\n   * object to indicate a sub-path of the property was changed.\n   *\n   * @param {Element} inst The element from which to fire the event\n   * @param {string} path The path that was changed\n   * @param {Object} props Bag of current property changes\n   * @return {boolean} Returns true if the path was notified\n   * @private\n   */\n  function notifyPath(inst, path, props) {\n    let rootProperty = Polymer.Path.root(path);\n    if (rootProperty !== path) {\n      let eventName = Polymer.CaseMap.camelToDashCase(rootProperty) + '-changed';\n      dispatchNotifyEvent(inst, eventName, props[path], path);\n      return true;\n    }\n  }\n\n  /**\n   * Dispatches {property}-changed events to indicate a property (or path)\n   * changed.\n   *\n   * @param {Element} inst The element from which to fire the event\n   * @param {string} eventName The name of the event to send ('{property}-changed')\n   * @param {*} value The value of the changed property\n   * @param {string | null | undefined} path If a sub-path of this property changed, the path\n   *   that changed (optional).\n   * @private\n   */\n  function dispatchNotifyEvent(inst, eventName, value, path) {\n    let detail = {\n      value: value,\n      queueProperty: true\n    };\n    if (path) {\n      detail.path = path;\n    }\n    inst.dispatchEvent(new CustomEvent(eventName, { detail }));\n  }\n\n  /**\n   * Implements the \"notify\" effect.\n   *\n   * Dispatches a non-bubbling event named `info.eventName` on the instance\n   * with a detail object containing the new `value`.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n    let rootProperty = hasPaths ? Polymer.Path.root(property) : property;\n    let path = rootProperty != property ? property : null;\n    let value = path ? Polymer.Path.get(inst, path) : inst.__data[property];\n    if (path && value === undefined) {\n      value = props[property];  // specifically for .splices\n    }\n    dispatchNotifyEvent(inst, info.eventName, value, path);\n  }\n\n  /**\n   * Handler function for 2-way notification events. Receives context\n   * information captured in the `addNotifyListener` closure from the\n   * `__notifyListeners` metadata.\n   *\n   * Sets the value of the notified property to the host property or path.  If\n   * the event contained path information, translate that path to the host\n   * scope's name for that path first.\n   *\n   * @param {Event} event Notification event (e.g. '<property>-changed')\n   * @param {Object} inst Host element instance handling the notification event\n   * @param {string} fromProp Child element property that was bound\n   * @param {string} toPath Host property/path that was bound\n   * @param {boolean} negate Whether the binding was negated\n   * @private\n   */\n  function handleNotification(event, inst, fromProp, toPath, negate) {\n    let value;\n    let detail = event.detail;\n    let fromPath = detail && detail.path;\n    if (fromPath) {\n      toPath = Polymer.Path.translate(fromProp, toPath, fromPath);\n      value = detail && detail.value;\n    } else {\n      value = event.target[fromProp];\n    }\n    value = negate ? !value : value;\n    if (!inst.__readOnly || !inst.__readOnly[toPath]) {\n      if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n        && (!detail || !detail.queueProperty)) {\n        inst._invalidateProperties();\n      }\n    }\n  }\n\n  /**\n   * Implements the \"reflect\" effect.\n   *\n   * Sets the attribute named `info.attrName` to the given property value.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runReflectEffect(inst, property, props, oldProps, info) {\n    let value = inst.__data[property];\n    if (Polymer.sanitizeDOMValue) {\n      value = Polymer.sanitizeDOMValue(value, info.attrName, 'attribute', inst);\n    }\n    inst._propertyToAttribute(property, info.attrName, value);\n  }\n\n  /**\n   * Runs \"computed\" effects for a set of changed properties.\n   *\n   * This method differs from the generic `runEffects` method in that it\n   * continues to run computed effects based on the output of each pass until\n   * there are no more newly computed properties.  This ensures that all\n   * properties that will be computed by the initial set of changes are\n   * computed before other effects (binding propagation, observers, and notify)\n   * run.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {Object} changedProps Bag of changed properties\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n    let computeEffects = inst.__computeEffects;\n    if (computeEffects) {\n      let inputProps = changedProps;\n      while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n        Object.assign(oldProps, inst.__dataOld);\n        Object.assign(changedProps, inst.__dataPending);\n        inputProps = inst.__dataPending;\n        inst.__dataPending = null;\n      }\n    }\n  }\n\n  /**\n   * Implements the \"computed property\" effect by running the method with the\n   * values of the arguments specified in the `info` object and setting the\n   * return value to the computed property specified.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runComputedEffect(inst, property, props, oldProps, info) {\n    let result = runMethodEffect(inst, property, props, oldProps, info);\n    let computedProp = info.methodInfo;\n    if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n      inst._setPendingProperty(computedProp, result, true);\n    } else {\n      inst[computedProp] = result;\n    }\n  }\n\n  /**\n   * Computes path changes based on path links set up using the `linkPaths`\n   * API.\n   *\n   * @param {Element} inst The instance whose props are changing\n   * @param {string} path Path that has changed\n   * @param {*} value Value of changed path\n   * @private\n   */\n  function computeLinkedPaths(inst, path, value) {\n    let links = inst.__dataLinkedPaths;\n    if (links) {\n      let link;\n      for (let a in links) {\n        let b = links[a];\n        if (Polymer.Path.isDescendant(a, path)) {\n          link = Polymer.Path.translate(a, b, path);\n          inst._setPendingPropertyOrPath(link, value, true, true);\n        } else if (Polymer.Path.isDescendant(b, path)) {\n          link = Polymer.Path.translate(b, a, path);\n          inst._setPendingPropertyOrPath(link, value, true, true);\n        }\n      }\n    }\n  }\n\n  // -- bindings ----------------------------------------------\n\n  /**\n   * Adds binding metadata to the current `nodeInfo`, and binding effects\n   * for all part dependencies to `templateInfo`.\n   *\n   * @param {Function} constructor Class that `_parseTemplate` is currently\n   *   running on\n   * @param {Object} templateInfo Template metadata for current template\n   * @param {Object} nodeInfo Node metadata for current template node\n   * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n   * @param {string} target Target property name\n   * @param {Array<Object>} parts Array of binding part metadata\n   * @param {string} literal Literal text surrounding binding parts (specified\n   *   only for 'property' bindings, since these must be initialized as part\n   *   of boot-up)\n   * @private\n   */\n  function addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n    // Create binding metadata and add to nodeInfo\n    nodeInfo.bindings = nodeInfo.bindings || [];\n    let binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n    nodeInfo.bindings.push(binding);\n    // Add listener info to binding metadata\n    if (shouldAddListener(binding)) {\n      let {event, negate} = binding.parts[0];\n      binding.listenerEvent = event || (CaseMap.camelToDashCase(target) + '-changed');\n      binding.listenerNegate = negate;\n    }\n    // Add \"propagate\" property effects to templateInfo\n    let index = templateInfo.nodeInfoList.length;\n    for (let i=0; i<binding.parts.length; i++) {\n      let part = binding.parts[i];\n      part.compoundIndex = i;\n      addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n    }\n  }\n\n  /**\n   * Adds property effects to the given `templateInfo` for the given binding\n   * part.\n   *\n   * @param {Function} constructor Class that `_parseTemplate` is currently\n   *   running on\n   * @param {Object} templateInfo Template metadata for current template\n   * @param {Object} binding Binding metadata\n   * @param {Object} part Binding part metadata\n   * @param {number} index Index into `nodeInfoList` for this node\n   */\n  function addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n    if (!part.literal) {\n      if (binding.kind === 'attribute' && binding.target[0] === '-') {\n        console.warn('Cannot set attribute ' + binding.target +\n          ' because \"-\" is not a valid attribute starting character');\n      } else {\n        let dependencies = part.dependencies;\n        let info = { index, binding, part, evaluator: constructor };\n        for (let j=0; j<dependencies.length; j++) {\n          let trigger = dependencies[j];\n          if (typeof trigger == 'string') {\n            trigger = parseArg(trigger);\n            trigger.wildcard = true;\n          }\n          constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n            fn: runBindingEffect,\n            info, trigger\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Implements the \"binding\" (property/path binding) effect.\n   *\n   * Note that binding syntax is overridable via `_parseBindings` and\n   * `_evaluateBindings`.  This method will call `_evaluateBinding` for any\n   * non-literal parts returned from `_parseBindings`.  However,\n   * there is no support for _path_ bindings via custom binding parts,\n   * as this is specific to Polymer's path binding syntax.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {string} path Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n   *   metadata\n   * @private\n   */\n  function runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n    let node = nodeList[info.index];\n    let binding = info.binding;\n    let part = info.part;\n    // Subpath notification: transform path and set to client\n    // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n    if (hasPaths && part.source && (path.length > part.source.length) &&\n        (binding.kind == 'property') && !binding.isCompound &&\n        node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n      let value = props[path];\n      path = Polymer.Path.translate(part.source, binding.target, path);\n      if (node._setPendingPropertyOrPath(path, value, false, true)) {\n        inst._enqueueClient(node);\n      }\n    } else {\n      let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n      // Propagate value to child\n      applyBindingValue(inst, node, binding, part, value);\n    }\n  }\n\n  /**\n   * Sets the value for an \"binding\" (binding) effect to a node,\n   * either as a property or attribute.\n   *\n   * @param {Object} inst The instance owning the binding effect\n   * @param {Node} node Target node for binding\n   * @param {Object} binding Binding metadata\n   * @param {Object} part Binding part metadata\n   * @param {*} value Value to set\n   * @private\n   */\n  function applyBindingValue(inst, node, binding, part, value) {\n    value = computeBindingValue(node, value, binding, part);\n    if (Polymer.sanitizeDOMValue) {\n      value = Polymer.sanitizeDOMValue(value, binding.target, binding.kind, node);\n    }\n    if (binding.kind == 'attribute') {\n      // Attribute binding\n      inst._valueToNodeAttribute(node, value, binding.target);\n    } else {\n      // Property binding\n      let prop = binding.target;\n      if (node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n        if (!node.__readOnly || !node.__readOnly[prop]) {\n          if (node._setPendingProperty(prop, value)) {\n            inst._enqueueClient(node);\n          }\n        }\n      } else  {\n        inst._setUnmanagedPropertyToNode(node, prop, value);\n      }\n    }\n  }\n\n  /**\n   * Transforms an \"binding\" effect value based on compound & negation\n   * effect metadata, as well as handling for special-case properties\n   *\n   * @param {Node} node Node the value will be set to\n   * @param {*} value Value to set\n   * @param {Object} binding Binding metadata\n   * @param {Object} part Binding part metadata\n   * @return {*} Transformed value to set\n   * @private\n   */\n  function computeBindingValue(node, value, binding, part) {\n    if (binding.isCompound) {\n      let storage = node.__dataCompoundStorage[binding.target];\n      storage[part.compoundIndex] = value;\n      value = storage.join('');\n    }\n    if (binding.kind !== 'attribute') {\n      // Some browsers serialize `undefined` to `\"undefined\"`\n      if (binding.target === 'textContent' ||\n          (node.localName == 'input' && binding.target == 'value')) {\n        value = value == undefined ? '' : value;\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Returns true if a binding's metadata meets all the requirements to allow\n   * 2-way binding, and therefore a `<property>-changed` event listener should be\n   * added:\n   * - used curly braces\n   * - is a property (not attribute) binding\n   * - is not a textContent binding\n   * - is not compound\n   *\n   * @param {Object} binding Binding metadata\n   * @return {boolean} True if 2-way listener should be added\n   * @private\n   */\n  function shouldAddListener(binding) {\n    return binding.target &&\n           binding.kind != 'attribute' &&\n           binding.kind != 'text' &&\n           !binding.isCompound &&\n           binding.parts[0].mode === '{';\n  }\n\n  /**\n   * Setup compound binding storage structures, notify listeners, and dataHost\n   * references onto the bound nodeList.\n   *\n   * @param {Object} inst Instance that bas been previously bound\n   * @param {Object} templateInfo Template metadata\n   * @private\n   */\n  function setupBindings(inst, templateInfo) {\n    // Setup compound storage, dataHost, and notify listeners\n    let {nodeList, nodeInfoList} = templateInfo;\n    if (nodeInfoList.length) {\n      for (let i=0; i < nodeInfoList.length; i++) {\n        let info = nodeInfoList[i];\n        let node = nodeList[i];\n        let bindings = info.bindings;\n        if (bindings) {\n          for (let i=0; i<bindings.length; i++) {\n            let binding = bindings[i];\n            setupCompoundStorage(node, binding);\n            addNotifyListener(node, inst, binding);\n          }\n        }\n        node.__dataHost = inst;\n      }\n    }\n  }\n\n  /**\n   * Initializes `__dataCompoundStorage` local storage on a bound node with\n   * initial literal data for compound bindings, and sets the joined\n   * literal parts to the bound property.\n   *\n   * When changes to compound parts occur, they are first set into the compound\n   * storage array for that property, and then the array is joined to result in\n   * the final value set to the property/attribute.\n   *\n   * @param {Node} node Bound node to initialize\n   * @param {Object} binding Binding metadata\n   * @private\n   */\n  function setupCompoundStorage(node, binding) {\n    if (binding.isCompound) {\n      // Create compound storage map\n      let storage = node.__dataCompoundStorage ||\n        (node.__dataCompoundStorage = {});\n      let parts = binding.parts;\n      // Copy literals from parts into storage for this binding\n      let literals = new Array(parts.length);\n      for (let j=0; j<parts.length; j++) {\n        literals[j] = parts[j].literal;\n      }\n      let target = binding.target;\n      storage[target] = literals;\n      // Configure properties with their literal parts\n      if (binding.literal && binding.kind == 'property') {\n        node[target] = binding.literal;\n      }\n    }\n  }\n\n  /**\n   * Adds a 2-way binding notification event listener to the node specified\n   *\n   * @param {Object} node Child element to add listener to\n   * @param {Object} inst Host element instance to handle notification event\n   * @param {Object} binding Binding metadata\n   * @private\n   */\n  function addNotifyListener(node, inst, binding) {\n    if (binding.listenerEvent) {\n      let part = binding.parts[0];\n      node.addEventListener(binding.listenerEvent, function(e) {\n        handleNotification(e, inst, binding.target, part.source, part.negate);\n      });\n    }\n  }\n\n  // -- for method-based effects (complexObserver & computed) --------------\n\n  /**\n   * Adds property effects for each argument in the method signature (and\n   * optionally, for the method name if `dynamic` is true) that calls the\n   * provided effect function.\n   *\n   * @param {Element | Object} model Prototype or instance\n   * @param {Object} sig Method signature metadata\n   * @param {string} type Type of property effect to add\n   * @param {Function} effectFn Function to run when arguments change\n   * @param {*=} methodInfo Effect-specific information to be included in\n   *   method effect metadata\n   * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n   *   method names should be included as a dependency to the effect. Note,\n   *   defaults to true if the signature is static (sig.static is true).\n   * @private\n   */\n  function createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n    dynamicFn = sig.static || (dynamicFn &&\n      (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n    let info = {\n      methodName: sig.methodName,\n      args: sig.args,\n      methodInfo,\n      dynamicFn\n    };\n    for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n      if (!arg.literal) {\n        model._addPropertyEffect(arg.rootProperty, type, {\n          fn: effectFn, info: info, trigger: arg\n        });\n      }\n    }\n    if (dynamicFn) {\n      model._addPropertyEffect(sig.methodName, type, {\n        fn: effectFn, info: info\n      });\n    }\n  }\n\n  /**\n   * Calls a method with arguments marshaled from properties on the instance\n   * based on the method signature contained in the effect metadata.\n   *\n   * Multi-property observers, computed properties, and inline computing\n   * functions call this function to invoke the method, then use the return\n   * value accordingly.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @return {*} Returns the return value from the method invocation\n   * @private\n   */\n  function runMethodEffect(inst, property, props, oldProps, info) {\n    // Instances can optionally have a _methodHost which allows redirecting where\n    // to find methods. Currently used by `templatize`.\n    let context = inst._methodHost || inst;\n    let fn = context[info.methodName];\n    if (fn) {\n      let args = marshalArgs(inst.__data, info.args, property, props);\n      return fn.apply(context, args);\n    } else if (!info.dynamicFn) {\n      console.warn('method `' + info.methodName + '` not defined');\n    }\n  }\n\n  const emptyArray = [];\n\n  // Regular expressions used for binding\n  const IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\n  const NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\n  const SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\n  const DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\n  const STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\n  const ARGUMENT = '(?:' + IDENT + '|' + NUMBER + '|' +  STRING + '\\\\s*' + ')';\n  const ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\n  const ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                                '(?:' + ARGUMENTS + '?' + ')' +\n                              '\\\\)\\\\s*' + ')';\n  const BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\n  const OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\n  const CLOSE_BRACKET = '(?:]]|}})';\n  const NEGATE = '(?:(!)\\\\s*)?'; // Group 2\n  const EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\n  const bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n  function literalFromParts(parts) {\n    let s = '';\n    for (let i=0; i<parts.length; i++) {\n      let literal = parts[i].literal;\n      s += literal || '';\n    }\n    return s;\n  }\n\n  /**\n   * Parses an expression string for a method signature, and returns a metadata\n   * describing the method in terms of `methodName`, `static` (whether all the\n   * arguments are literals), and an array of `args`\n   *\n   * @param {string} expression The expression to parse\n   * @return {?Object} The method metadata object if a method expression was\n   *   found, otherwise `undefined`\n   * @private\n   */\n  function parseMethod(expression) {\n    // tries to match valid javascript property names\n    let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n    if (m) {\n      let methodName = m[1];\n      let sig = { methodName, static: true };\n      if (m[2].trim()) {\n        // replace escaped commas with comma entity, split on un-escaped commas\n        let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n        return parseArgs(args, sig);\n      } else {\n        sig.args = emptyArray;\n        return sig;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Parses an array of arguments and sets the `args` property of the supplied\n   * signature metadata object. Sets the `static` property to false if any\n   * argument is a non-literal.\n   *\n   * @param {Array<string>} argList Array of argument names\n   * @param {Object} sig Method signature metadata object\n   * @return {Object} The updated signature metadata object\n   * @private\n   */\n  function parseArgs(argList, sig) {\n    sig.args = argList.map(function(rawArg) {\n      let arg = parseArg(rawArg);\n      if (!arg.literal) {\n        sig.static = false;\n      }\n      return arg;\n    }, this);\n    return sig;\n  }\n\n  /**\n   * Parses an individual argument, and returns an argument metadata object\n   * with the following fields:\n   *\n   *   {\n   *     value: 'prop',        // property/path or literal value\n   *     literal: false,       // whether argument is a literal\n   *     structured: false,    // whether the property is a path\n   *     rootProperty: 'prop', // the root property of the path\n   *     wildcard: false       // whether the argument was a wildcard '.*' path\n   *   }\n   *\n   * @param {string} rawArg The string value of the argument\n   * @return {Object} Argument metadata object\n   * @private\n   */\n  function parseArg(rawArg) {\n    // clean up whitespace\n    let arg = rawArg.trim()\n      // replace comma entity with comma\n      .replace(/&comma;/g, ',')\n      // repair extra escape sequences; note only commas strictly need\n      // escaping, but we allow any other char to be escaped since its\n      // likely users will do this\n      .replace(/\\\\(.)/g, '\\$1')\n      ;\n    // basic argument descriptor\n    let a = {\n      name: arg\n    };\n    // detect literal value (must be String or Number)\n    let fc = arg[0];\n    if (fc === '-') {\n      fc = arg[1];\n    }\n    if (fc >= '0' && fc <= '9') {\n      fc = '#';\n    }\n    switch(fc) {\n      case \"'\":\n      case '\"':\n        a.value = arg.slice(1, -1);\n        a.literal = true;\n        break;\n      case '#':\n        a.value = Number(arg);\n        a.literal = true;\n        break;\n    }\n    // if not literal, look for structured path\n    if (!a.literal) {\n      a.rootProperty = Polymer.Path.root(arg);\n      // detect structured path (has dots)\n      a.structured = Polymer.Path.isPath(arg);\n      if (a.structured) {\n        a.wildcard = (arg.slice(-2) == '.*');\n        if (a.wildcard) {\n          a.name = arg.slice(0, -2);\n        }\n      }\n    }\n    return a;\n  }\n\n  /**\n   * Gather the argument values for a method specified in the provided array\n   * of argument metadata.\n   *\n   * The `path` and `value` arguments are used to fill in wildcard descriptor\n   * when the method is being called as a result of a path notification.\n   *\n   * @param {Object} data Instance data storage object to read properties from\n   * @param {Array<Object>} args Array of argument metadata\n   * @param {string} path Property/path name that triggered the method effect\n   * @param {Object} props Bag of current property changes\n   * @return {Array<*>} Array of argument values\n   * @private\n   */\n  function marshalArgs(data, args, path, props) {\n    let values = [];\n    for (let i=0, l=args.length; i<l; i++) {\n      let arg = args[i];\n      let name = arg.name;\n      let v;\n      if (arg.literal) {\n        v = arg.value;\n      } else {\n        if (arg.structured) {\n          v = Polymer.Path.get(data, name);\n          // when data is not stored e.g. `splices`\n          if (v === undefined) {\n            v = props[name];\n          }\n        } else {\n          v = data[name];\n        }\n      }\n      if (arg.wildcard) {\n        // Only send the actual path changed info if the change that\n        // caused the observer to run matched the wildcard\n        let baseChanged = (name.indexOf(path + '.') === 0);\n        let matches = (path.indexOf(name) === 0 && !baseChanged);\n        values[i] = {\n          path: matches ? path : name,\n          value: matches ? props[path] : v,\n          base: v\n        };\n      } else {\n        values[i] = v;\n      }\n    }\n    return values;\n  }\n\n  // data api\n\n  /**\n   * Sends array splice notifications (`.splices` and `.length`)\n   *\n   * Note: this implementation only accepts normalized paths\n   *\n   * @param {Element} inst Instance to send notifications to\n   * @param {Array} array The array the mutations occurred on\n   * @param {string} path The path to the array that was mutated\n   * @param {Array} splices Array of splice records\n   * @private\n   */\n  function notifySplices(inst, array, path, splices) {\n    let splicesPath = path + '.splices';\n    inst.notifyPath(splicesPath, { indexSplices: splices });\n    inst.notifyPath(path + '.length', array.length);\n    // Null here to allow potentially large splice records to be GC'ed.\n    inst.__data[splicesPath] = {indexSplices: null};\n  }\n\n  /**\n   * Creates a splice record and sends an array splice notification for\n   * the described mutation\n   *\n   * Note: this implementation only accepts normalized paths\n   *\n   * @param {Element} inst Instance to send notifications to\n   * @param {Array} array The array the mutations occurred on\n   * @param {string} path The path to the array that was mutated\n   * @param {number} index Index at which the array mutation occurred\n   * @param {number} addedCount Number of added items\n   * @param {Array} removed Array of removed items\n   * @private\n   */\n  function notifySplice(inst, array, path, index, addedCount, removed) {\n    notifySplices(inst, array, path, [{\n      index: index,\n      addedCount: addedCount,\n      removed: removed,\n      object: array,\n      type: 'splice'\n    }]);\n  }\n\n  /**\n   * Returns an upper-cased version of the string.\n   *\n   * @param {string} name String to uppercase\n   * @return {string} Uppercased string\n   * @private\n   */\n  function upper(name) {\n    return name[0].toUpperCase() + name.substring(1);\n  }\n\n  /**\n   * Element class mixin that provides meta-programming for Polymer's template\n   * binding and data observation (collectively, \"property effects\") system.\n   *\n   * This mixin uses provides the following key static methods for adding\n   * property effects to an element class:\n   * - `addPropertyEffect`\n   * - `createPropertyObserver`\n   * - `createMethodObserver`\n   * - `createNotifyingProperty`\n   * - `createReadOnlyProperty`\n   * - `createReflectedProperty`\n   * - `createComputedProperty`\n   * - `bindTemplate`\n   *\n   * Each method creates one or more property accessors, along with metadata\n   * used by this mixin's implementation of `_propertiesChanged` to perform\n   * the property effects.\n   *\n   * Underscored versions of the above methods also exist on the element\n   * prototype for adding property effects on instances at runtime.\n   *\n   * Note that this mixin overrides several `PropertyAccessors` methods, in\n   * many cases to maintain guarantees provided by the Polymer 1.x features;\n   * notably it changes property accessors to be synchronous by default\n   * whereas the default when using `PropertyAccessors` standalone is to be\n   * async by default.\n   *\n   * @polymerMixin\n   * @mixes Polymer.TemplateStamp\n   * @mixes Polymer.PropertyAccessors\n   * @memberof Polymer\n   * @summary Element class mixin that provides meta-programming for Polymer's\n   * template binding and data observation system.\n   */\n  Polymer.PropertyEffects = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @constructor\n     * @extends {superClass}\n     * @implements {Polymer_PropertyAccessors}\n     * @implements {Polymer_TemplateStamp}\n     */\n    const propertyEffectsBase = Polymer.TemplateStamp(Polymer.PropertyAccessors(superClass));\n\n    /**\n     * @polymerMixinClass\n     * @unrestricted\n     * @implements {Polymer_PropertyEffects}\n     */\n    class PropertyEffects extends propertyEffectsBase {\n\n      get PROPERTY_EFFECT_TYPES() {\n        return TYPES;\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to initialize\n       * additional property-effect related properties.\n       *\n       * @override\n       */\n      _initializeProperties() {\n        super._initializeProperties();\n        hostStack.registerHost(this);\n        this.__dataClientsInitialized = false;\n        this.__dataPendingClients = null;\n        this.__dataToNotify = null;\n        this.__dataLinkedPaths = null;\n        this.__dataHasPaths = false;\n        // May be set on instance prior to upgrade\n        this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n        this.__dataHost = this.__dataHost || null;\n        this.__dataTemp = {};\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to provide a\n       * more efficient implementation of initializing properties from\n       * the prototype on the instance.\n       *\n       * @override\n       */\n      _initializeProtoProperties(props) {\n        this.__data = Object.create(props);\n        this.__dataPending = Object.create(props);\n        this.__dataOld = {};\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n       * `_setProperty`'s `shouldNotify: true`.\n       *\n       * @override\n       */\n      _initializeInstanceProperties(props) {\n        let readOnly = this.__readOnly;\n        for (let prop in props) {\n          if (!readOnly || !readOnly[prop]) {\n            this.__dataPending = this.__dataPending || {};\n            this.__dataOld = this.__dataOld || {};\n            this.__data[prop] = this.__dataPending[prop] = props[prop];\n          }\n        }\n      }\n\n      // Prototype setup ----------------------------------------\n\n      /**\n       * Equivalent to static `addPropertyEffect` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property that should trigger the effect\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      _addPropertyEffect(property, type, effect) {\n        this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n        // effects are accumulated into arrays per property based on type\n        let effects = ensureOwnEffectMap(this, type)[property];\n        if (!effects) {\n          effects = this[type][property] = [];\n        }\n        effects.push(effect);\n      }\n\n      /**\n       * Removes the given property effect.\n       *\n       * @param {string} property Property the effect was associated with\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object to remove\n       */\n      _removePropertyEffect(property, type, effect) {\n        let effects = ensureOwnEffectMap(this, type)[property];\n        let idx = effects.indexOf(effect);\n        if (idx >= 0) {\n          effects.splice(idx, 1);\n        }\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a property effect\n       * of a certain type.\n       *\n       * @param {string} property Property name\n       * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasPropertyEffect(property, type) {\n        let effects = this[type];\n        return Boolean(effects && effects[property]);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"read only\"\n       * accessor for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasReadOnlyEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"notify\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasNotifyEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.NOTIFY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"reflect to attribute\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasReflectEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.REFLECT);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"computed\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasComputedEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.COMPUTE);\n      }\n\n      // Runtime ----------------------------------------\n\n      /**\n       * Sets a pending property or path.  If the root property of the path in\n       * question had no accessor, the path is set, otherwise it is enqueued\n       * via `_setPendingProperty`.\n       *\n       * This function isolates relatively expensive functionality necessary\n       * for the public API (`set`, `setProperties`, `notifyPath`, and property\n       * change listeners via {{...}} bindings), such that it is only done\n       * when paths enter the system, and not at every propagation step.  It\n       * also sets a `__dataHasPaths` flag on the instance which is used to\n       * fast-path slower path-matching code in the property effects host paths.\n       *\n       * `path` can be a path string or array of path parts as accepted by the\n       * public API.\n       *\n       * @param {string | !Array<number|string>} path Path to set\n       * @param {*} value Value to set\n       * @param {boolean=} shouldNotify Set to true if this change should\n       *  cause a property notification event dispatch\n       * @param {boolean=} isPathNotification If the path being set is a path\n       *   notification of an already changed value, as opposed to a request\n       *   to set and notify the change.  In the latter `false` case, a dirty\n       *   check is performed and then the value is set to the path before\n       *   enqueuing the pending property change.\n       * @return {boolean} Returns true if the property/path was enqueued in\n       *   the pending changes bag.\n       * @protected\n       */\n      _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n        if (isPathNotification ||\n            Polymer.Path.root(Array.isArray(path) ? path[0] : path) !== path) {\n          // Dirty check changes being set to a path against the actual object,\n          // since this is the entry point for paths into the system; from here\n          // the only dirty checks are against the `__dataTemp` cache to prevent\n          // duplicate work in the same turn only. Note, if this was a notification\n          // of a change already set to a path (isPathNotification: true),\n          // we always let the change through and skip the `set` since it was\n          // already dirty checked at the point of entry and the underlying\n          // object has already been updated\n          if (!isPathNotification) {\n            let old = Polymer.Path.get(this, path);\n            path = /** @type {string} */ (Polymer.Path.set(this, path, value));\n            // Use property-accessor's simpler dirty check\n            if (!path || !super._shouldPropertyChange(path, value, old)) {\n              return false;\n            }\n          }\n          this.__dataHasPaths = true;\n          if (this._setPendingProperty(path, value, shouldNotify)) {\n            computeLinkedPaths(this, path, value);\n            return true;\n          }\n        } else {\n          if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n            return this._setPendingProperty(path, value, shouldNotify);\n          } else {\n            this[path] = value;\n          }\n        }\n        return false;\n      }\n\n      /**\n       * Applies a value to a non-Polymer element/node's property.\n       *\n       * The implementation makes a best-effort at binding interop:\n       * Some native element properties have side-effects when\n       * re-setting the same value (e.g. setting `<input>.value` resets the\n       * cursor position), so we do a dirty-check before setting the value.\n       * However, for better interop with non-Polymer custom elements that\n       * accept objects, we explicitly re-set object changes coming from the\n       * Polymer world (which may include deep object changes without the\n       * top reference changing), erring on the side of providing more\n       * information.\n       *\n       * Users may override this method to provide alternate approaches.\n       *\n       * @param {Node} node The node to set a property on\n       * @param {string} prop The property to set\n       * @param {*} value The value to set\n       * @protected\n       */\n      _setUnmanagedPropertyToNode(node, prop, value) {\n        // It is a judgment call that resetting primitives is\n        // \"bad\" and resettings objects is also \"good\"; alternatively we could\n        // implement a whitelist of tag & property values that should never\n        // be reset (e.g. <input>.value && <select>.value)\n        if (value !== node[prop] || typeof value == 'object') {\n          node[prop] = value;\n        }\n      }\n\n      /**\n       * Overrides the `PropertyAccessors` implementation to introduce special\n       * dirty check logic depending on the property & value being set:\n       *\n       * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n       *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n       * 2. Object set to simple property (e.g. 'prop': {...})\n       *    Stored in `__dataTemp` and `__data`, dirty checked against\n       *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n       * 3. Primitive value set to simple property (e.g. 'prop': 42)\n       *    Stored in `__data`, dirty checked against `__data`\n       *\n       * The dirty-check is important to prevent cycles due to two-way\n       * notification, but paths and objects are only dirty checked against any\n       * previous value set during this turn via a \"temporary cache\" that is\n       * cleared when the last `_propertiesChaged` exits. This is so:\n       * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n       *    due to array mutations like shift/unshift/splice; this is fine\n       *    since path changes are dirty-checked at user entry points like `set`\n       * b. dirty-checking for objects only lasts one turn to allow the user\n       *    to mutate the object in-place and re-set it with the same identity\n       *    and have all sub-properties re-propagated in a subsequent turn.\n       *\n       * The temp cache is not necessarily sufficient to prevent invalid array\n       * paths, since a splice can happen during the same turn (with pathological\n       * user code); we could introduce a \"fixup\" for temporarily cached array\n       * paths if needed: https://github.com/Polymer/polymer/issues/4227\n       *\n       * @override\n       */\n      _setPendingProperty(property, value, shouldNotify) {\n        let isPath = this.__dataHasPaths && Polymer.Path.isPath(property);\n        let prevProps = isPath ? this.__dataTemp : this.__data;\n        if (this._shouldPropertyChange(property, value, prevProps[property])) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (!(property in this.__dataOld)) {\n            this.__dataOld[property] = this.__data[property];\n          }\n          // Paths are stored in temporary cache (cleared at end of turn),\n          // which is used for dirty-checking, all others stored in __data\n          if (isPath) {\n            this.__dataTemp[property] = value;\n          } else {\n            this.__data[property] = value;\n          }\n          // All changes go into pending property bag, passed to _propertiesChanged\n          this.__dataPending[property] = value;\n          // Track properties that should notify separately\n          if (isPath || (this.__notifyEffects && this.__notifyEffects[property])) {\n            this.__dataToNotify = this.__dataToNotify || {};\n            this.__dataToNotify[property] = shouldNotify;\n          }\n          return true;\n        }\n      }\n\n      /**\n       * Overrides base implementation to ensure all accessors set `shouldNotify`\n       * to true, for per-property notification tracking.\n       *\n       * @override\n       */\n      _setProperty(property, value) {\n        if (this._setPendingProperty(property, value, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Overrides `PropertyAccessor`'s default async queuing of\n       * `_propertiesChanged`: if `__dataInitialized` is false (has not yet been\n       * manually flushed), the function no-ops; otherwise flushes\n       * `_propertiesChanged` synchronously.\n       *\n       * @override\n       */\n      _invalidateProperties() {\n        if (this.__dataInitialized) {\n          this._flushProperties();\n        }\n      }\n\n      /**\n       * Enqueues the given client on a list of pending clients, whose\n       * pending property changes can later be flushed via a call to\n       * `_flushClients`.\n       *\n       * @param {Object} client PropertyEffects client to enqueue\n       * @protected\n       */\n      _enqueueClient(client) {\n        this.__dataPendingClients = this.__dataPendingClients || [];\n        if (client !== this) {\n          this.__dataPendingClients.push(client);\n        }\n      }\n\n      /**\n       * Flushes any clients previously enqueued via `_enqueueClient`, causing\n       * their `_flushProperties` method to run.\n       *\n       * @protected\n       */\n      _flushClients() {\n        if (!this.__dataClientsInitialized) {\n          this.__dataClientsInitialized = true;\n          this._readyClients();\n          // Override point where accessors are turned on; importantly,\n          // this is after clients have fully readied, providing a guarantee\n          // that any property effects occur only after all clients are ready.\n          this.__dataInitialized = true;\n        } else {\n          // Flush all clients\n          let clients = this.__dataPendingClients;\n          if (clients) {\n            this.__dataPendingClients = null;\n            for (let i=0; i < clients.length; i++) {\n              let client = clients[i];\n              if (client.__dataPending) {\n                client._flushProperties();\n              }\n            }\n          }\n        }\n      }\n\n      /**\n       * Perform any initial setup on client dom. Called before the first\n       * `_flushProperties` call on client dom and before any element\n       * observers are called.\n       *\n       * @protected\n       */\n      _readyClients() {\n        let clients = this.__dataPendingClients;\n        if (clients) {\n          this.__dataPendingClients = null;\n          for (let i=0; i < clients.length; i++) {\n            let client = clients[i];\n            if (!client.__dataEnabled) {\n              client._enableProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Sets a bag of property changes to this instance, and\n       * synchronously processes all effects of the properties as a batch.\n       *\n       * Property names must be simple properties, not paths.  Batched\n       * path propagation is not supported.\n       *\n       * @param {Object} props Bag of one or more key-value pairs whose key is\n       *   a property and value is the new value to set for that property.\n       * @param {boolean=} setReadOnly When true, any private values set in\n       *   `props` will be set. By default, `setProperties` will not set\n       *   `readOnly: true` root properties.\n       * @public\n       */\n      setProperties(props, setReadOnly) {\n        for (let path in props) {\n          if (setReadOnly || !this.__readOnly || !this.__readOnly[path]) {\n            //TODO(kschaaf): explicitly disallow paths in setProperty?\n            // wildcard observers currently only pass the first changed path\n            // in the `info` object, and you could do some odd things batching\n            // paths, e.g. {'foo.bar': {...}, 'foo': null}\n            this._setPendingPropertyOrPath(path, props[path], true);\n          }\n        }\n        this._invalidateProperties();\n      }\n\n      /**\n       * Overrides `PropertyAccessors` so that property accessor\n       * side effects are not enabled until after client dom is fully ready.\n       * Also calls `_flushClients` callback to ensure client dom is enabled\n       * that was not enabled as a result of flushing properties.\n       *\n       * @override\n       */\n      ready() {\n        // It is important that `super.ready()` is not called here as it\n        // immediately turns on accessors. Instead, we wait until `readyClients`\n        // to enable accessors to provide a guarantee that clients are ready\n        // before processing any accessors side effects.\n        this._flushProperties();\n        // If no data was pending, `_flushProperties` will not `flushClients`\n        // so ensure this is done.\n        if (!this.__dataClientsInitialized) {\n          this._flushClients();\n        }\n        // Before ready, client notifications do not trigger _flushProperties.\n        // Therefore a flush is necessary here if data has been set.\n        if (this.__dataPending) {\n          this._flushProperties();\n        }\n      }\n\n      /**\n       * Implements `PropertyAccessors`'s properties changed callback.\n       *\n       * Runs each class of effects for the batch of changed properties in\n       * a specific order (compute, propagate, reflect, observe, notify).\n       *\n       * @override\n       */\n      _propertiesChanged(currentProps, changedProps, oldProps) {\n        // ----------------------------\n        // let c = Object.getOwnPropertyNames(changedProps || {});\n        // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n        // if (window.debug) { debugger; }\n        // ----------------------------\n        let hasPaths = this.__dataHasPaths;\n        this.__dataHasPaths = false;\n        // Compute properties\n        runComputedEffects(this, changedProps, oldProps, hasPaths);\n        // Clear notify properties prior to possible reentry (propagate, observe),\n        // but after computing effects have a chance to add to them\n        let notifyProps = this.__dataToNotify;\n        this.__dataToNotify = null;\n        // Propagate properties to clients\n        this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n        // Flush clients\n        this._flushClients();\n        // Reflect properties\n        runEffects(this, this.__reflectEffects, changedProps, oldProps, hasPaths);\n        // Observe properties\n        runEffects(this, this.__observeEffects, changedProps, oldProps, hasPaths);\n        // Notify properties to host\n        if (notifyProps) {\n          runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n        }\n        // Clear temporary cache at end of turn\n        if (this.__dataCounter == 1) {\n          this.__dataTemp = {};\n        }\n        // ----------------------------\n        // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n        // ----------------------------\n      }\n\n      /**\n       * Called to propagate any property changes to stamped template nodes\n       * managed by this element.\n       *\n       * @param {Object} changedProps Bag of changed properties\n       * @param {Object} oldProps Bag of previous values for changed properties\n       * @param {boolean} hasPaths True with `props` contains one or more paths\n       * @protected\n       */\n      _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n        if (this.__propagateEffects) {\n          runEffects(this, this.__propagateEffects, changedProps, oldProps, hasPaths);\n        }\n        let templateInfo = this.__templateInfo;\n        while (templateInfo) {\n          runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n            hasPaths, templateInfo.nodeList);\n          templateInfo = templateInfo.nextTemplateInfo;\n        }\n      }\n\n      /**\n       * Aliases one data path as another, such that path notifications from one\n       * are routed to the other.\n       *\n       * @param {string | !Array<string|number>} to Target path to link.\n       * @param {string | !Array<string|number>} from Source path to link.\n       * @public\n       */\n      linkPaths(to, from) {\n        to = Polymer.Path.normalize(to);\n        from = Polymer.Path.normalize(from);\n        this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n        this.__dataLinkedPaths[to] = from;\n      }\n\n      /**\n       * Removes a data path alias previously established with `_linkPaths`.\n       *\n       * Note, the path to unlink should be the target (`to`) used when\n       * linking the paths.\n       *\n       * @param {string | !Array<string|number>} path Target path to unlink.\n       * @public\n       */\n      unlinkPaths(path) {\n        path = Polymer.Path.normalize(path);\n        if (this.__dataLinkedPaths) {\n          delete this.__dataLinkedPaths[path];\n        }\n      }\n\n      /**\n       * Notify that an array has changed.\n       *\n       * Example:\n       *\n       *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n       *     ...\n       *     this.items.splice(1, 1, {name: 'Sam'});\n       *     this.items.push({name: 'Bob'});\n       *     this.notifySplices('items', [\n       *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n       *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n       *     ]);\n       *\n       * @param {string} path Path that should be notified.\n       * @param {Array} splices Array of splice records indicating ordered\n       *   changes that occurred to the array. Each record should have the\n       *   following fields:\n       *    * index: index at which the change occurred\n       *    * removed: array of items that were removed from this index\n       *    * addedCount: number of new items added at this index\n       *    * object: a reference to the array in question\n       *    * type: the string literal 'splice'\n       *\n       *   Note that splice records _must_ be normalized such that they are\n       *   reported in index order (raw results from `Object.observe` are not\n       *   ordered and must be normalized/merged before notifying).\n       * @public\n      */\n      notifySplices(path, splices) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        notifySplices(this, array, info.path, splices);\n      }\n\n      /**\n       * Convenience method for reading a value from a path.\n       *\n       * Note, if any part in the path is undefined, this method returns\n       * `undefined` (this method does not throw when dereferencing undefined\n       * paths).\n       *\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n       * @param {Object=} root Root object from which the path is evaluated.\n       * @return {*} Value at the path, or `undefined` if any part of the path\n       *   is undefined.\n       * @public\n       */\n      get(path, root) {\n        return Polymer.Path.get(root || this, path);\n      }\n\n      /**\n       * Convenience method for setting a value to a path and notifying any\n       * elements bound to the same path.\n       *\n       * Note, if any part in the path except for the last is undefined,\n       * this method does nothing (this method does not throw when\n       * dereferencing undefined paths).\n       *\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n       * @param {*} value Value to set at the specified path.\n       * @param {Object=} root Root object from which the path is evaluated.\n       *   When specified, no notification will occur.\n       * @public\n      */\n      set(path, value, root) {\n        if (root) {\n          Polymer.Path.set(root, path, value);\n        } else {\n          if (!this.__readOnly || !this.__readOnly[/** @type {string} */(path)]) {\n            if (this._setPendingPropertyOrPath(path, value, true)) {\n              this._invalidateProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Adds items onto the end of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @param {...*} items Items to push onto array\n       * @return {number} New length of the array.\n       * @public\n       */\n      push(path, ...items) {\n        let info = {};\n        let array = /** @type {Array}*/(Polymer.Path.get(this, path, info));\n        let len = array.length;\n        let ret = array.push(...items);\n        if (items.length) {\n          notifySplice(this, array, info.path, len, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the end of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n      pop(path) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let hadLength = Boolean(array.length);\n        let ret = array.pop();\n        if (hadLength) {\n          notifySplice(this, array, info.path, array.length, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Starting from the start index specified, removes 0 or more items\n       * from the array and inserts 0 or more new items in their place.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.splice`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @param {number} start Index from which to start removing/inserting.\n       * @param {number} deleteCount Number of items to remove.\n       * @param {...*} items Items to insert into array.\n       * @return {Array} Array of removed items.\n       * @public\n       */\n      splice(path, start, deleteCount, ...items) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        // Normalize fancy native splice handling of crazy start values\n        if (start < 0) {\n          start = array.length - Math.floor(-start);\n        } else {\n          start = Math.floor(start);\n        }\n        if (!start) {\n          start = 0;\n        }\n        let ret = array.splice(start, deleteCount, ...items);\n        if (items.length || ret.length) {\n          notifySplice(this, array, info.path, start, items.length, ret);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the beginning of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n      shift(path) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let hadLength = Boolean(array.length);\n        let ret = array.shift();\n        if (hadLength) {\n          notifySplice(this, array, info.path, 0, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Adds items onto the beginning of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @param {...*} items Items to insert info array\n       * @return {number} New length of the array.\n       * @public\n       */\n      unshift(path, ...items) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let ret = array.unshift(...items);\n        if (items.length) {\n          notifySplice(this, array, info.path, 0, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Notify that a path has changed.\n       *\n       * Example:\n       *\n       *     this.item.user.name = 'Bob';\n       *     this.notifyPath('item.user.name');\n       *\n       * @param {string} path Path that should be notified.\n       * @param {*=} value Value at the path (optional).\n       * @public\n      */\n      notifyPath(path, value) {\n        /** @type {string} */\n        let propPath;\n        if (arguments.length == 1) {\n          // Get value if not supplied\n          let info = {};\n          value = Polymer.Path.get(this, path, info);\n          propPath = info.path;\n        } else if (Array.isArray(path)) {\n          // Normalize path if needed\n          propPath = Polymer.Path.normalize(path);\n        } else {\n          propPath = /** @type{string} */(path);\n        }\n        if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Equivalent to static `createReadOnlyProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @param {boolean=} protectedSetter Creates a custom protected setter\n       *   when `true`.\n       * @protected\n       */\n      _createReadOnlyProperty(property, protectedSetter) {\n        this._addPropertyEffect(property, TYPES.READ_ONLY);\n        if (protectedSetter) {\n          this['_set' + upper(property)] = function(value) {\n            this._setProperty(property, value);\n          }\n        }\n      }\n\n      /**\n       * Equivalent to static `createPropertyObserver` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @param {string} methodName Name of observer method to call\n       * @param {boolean=} dynamicFn Whether the method name should be included as\n       *   a dependency to the effect.\n       * @protected\n       */\n      _createPropertyObserver(property, methodName, dynamicFn) {\n        let info = { property, methodName, dynamicFn };\n        this._addPropertyEffect(property, TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: property}\n        });\n        if (dynamicFn) {\n          this._addPropertyEffect(methodName, TYPES.OBSERVE, {\n            fn: runObserverEffect, info, trigger: {name: methodName}\n          });\n        }\n      }\n\n      /**\n       * Equivalent to static `createMethodObserver` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      _createMethodObserver(expression, dynamicFn) {\n        let sig = parseMethod(expression);\n        if (!sig) {\n          throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n        }\n        createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n      }\n\n      /**\n       * Equivalent to static `createNotifyingProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      _createNotifyingProperty(property) {\n        this._addPropertyEffect(property, TYPES.NOTIFY, {\n          fn: runNotifyEffect,\n          info: {\n            eventName: CaseMap.camelToDashCase(property) + '-changed',\n            property: property\n          }\n        });\n      }\n\n      /**\n       * Equivalent to static `createReflectedProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      _createReflectedProperty(property) {\n        let attr = CaseMap.camelToDashCase(property);\n        if (attr[0] === '-') {\n          console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n            attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property thisead.');\n        } else {\n          this._addPropertyEffect(property, TYPES.REFLECT, {\n            fn: runReflectEffect,\n            info: {\n              attrName: attr\n            }\n          });\n        }\n      }\n\n      /**\n       * Equivalent to static `createComputedProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Name of computed property to set\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      _createComputedProperty(property, expression, dynamicFn) {\n        let sig = parseMethod(expression);\n        if (!sig) {\n          throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n        }\n        createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n      }\n\n      // -- static class methods ------------\n\n      /**\n       * Ensures an accessor exists for the specified property, and adds\n       * to a list of \"property effects\" that will run when the accessor for\n       * the specified property is set.  Effects are grouped by \"type\", which\n       * roughly corresponds to a phase in effect processing.  The effect\n       * metadata should be in the following form:\n       *\n       *   {\n       *     fn: effectFunction, // Reference to function to call to perform effect\n       *     info: { ... }       // Effect metadata passed to function\n       *     trigger: {          // Optional triggering metadata; if not provided\n       *       name: string      // the property is treated as a wildcard\n       *       structured: boolean\n       *       wildcard: boolean\n       *     }\n       *   }\n       *\n       * Effects are called from `_propertiesChanged` in the following order by\n       * type:\n       *\n       * 1. COMPUTE\n       * 2. PROPAGATE\n       * 3. REFLECT\n       * 4. OBSERVE\n       * 5. NOTIFY\n       *\n       * Effect functions are called with the following signature:\n       *\n       *   effectFunction(inst, path, props, oldProps, info, hasPaths)\n       *\n       * @param {string} property Property that should trigger the effect\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      static addPropertyEffect(property, type, effect) {\n        this.prototype._addPropertyEffect(property, type, effect);\n      }\n\n      /**\n       * Creates a single-property observer for the given property.\n       *\n       * @param {string} property Property name\n       * @param {string} methodName Name of observer method to call\n       * @param {boolean=} dynamicFn Whether the method name should be included as\n       *   a dependency to the effect.\n       * @protected\n       */\n      static createPropertyObserver(property, methodName, dynamicFn) {\n        this.prototype._createPropertyObserver(property, methodName, dynamicFn);\n      }\n\n      /**\n       * Creates a multi-property \"method observer\" based on the provided\n       * expression, which should be a string in the form of a normal Javascript\n       * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n       * should correspond to a property or path in the context of this\n       * prototype (or instance), or may be a literal string or number.\n       *\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      static createMethodObserver(expression, dynamicFn) {\n        this.prototype._createMethodObserver(expression, dynamicFn);\n      }\n\n      /**\n       * Causes the setter for the given property to dispatch `<property>-changed`\n       * events to notify of changes to the property.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      static createNotifyingProperty(property) {\n        this.prototype._createNotifyingProperty(property);\n      }\n\n      /**\n       * Creates a read-only accessor for the given property.\n       *\n       * To set the property, use the protected `_setProperty` API.\n       * To create a custom protected setter (e.g. `_setMyProp()` for\n       * property `myProp`), pass `true` for `protectedSetter`.\n       *\n       * Note, if the property will have other property effects, this method\n       * should be called first, before adding other effects.\n       *\n       * @param {string} property Property name\n       * @param {boolean=} protectedSetter Creates a custom protected setter\n       *   when `true`.\n       * @protected\n       */\n      static createReadOnlyProperty(property, protectedSetter) {\n        this.prototype._createReadOnlyProperty(property, protectedSetter);\n      }\n\n      /**\n       * Causes the setter for the given property to reflect the property value\n       * to a (dash-cased) attribute of the same name.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      static createReflectedProperty(property) {\n        this.prototype._createReflectedProperty(property);\n      }\n\n      /**\n       * Creates a computed property whose value is set to the result of the\n       * method described by the given `expression` each time one or more\n       * arguments to the method changes.  The expression should be a string\n       * in the form of a normal Javascript function signature:\n       * `'methodName(arg1, [..., argn])'`\n       *\n       * @param {string} property Name of computed property to set\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n       *   method names should be included as a dependency to the effect.\n       * @protected\n       */\n      static createComputedProperty(property, expression, dynamicFn) {\n        this.prototype._createComputedProperty(property, expression, dynamicFn);\n      }\n\n      /**\n       * Parses the provided template to ensure binding effects are created\n       * for them, and then ensures property accessors are created for any\n       * dependent properties in the template.  Binding effects for bound\n       * templates are stored in a linked list on the instance so that\n       * templates can be efficiently stamped and unstamped.\n       *\n       * @param {HTMLTemplateElement} template Template containing binding\n       *   bindings\n       * @return {Object} Template metadata object\n       * @protected\n       */\n      static bindTemplate(template) {\n        return this.prototype._bindTemplate(template);\n      }\n\n      // -- binding ----------------------------------------------\n\n      /**\n       * Equivalent to static `bindTemplate` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * This method may be called on the prototype (for prototypical template\n       * binding, to avoid creating accessors every instance) once per prototype,\n       * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n       * create and link an instance of the template metadata associated with a\n       * particular stamping.\n       *\n       * @param {HTMLTemplateElement} template Template containing binding\n       *   bindings\n       * @param {boolean=} instanceBinding When false (default), performs\n       *   \"prototypical\" binding of the template and overwrites any previously\n       *   bound template for the class. When true (as passed from\n       *   `_stampTemplate`), the template info is instanced and linked into\n       *   the list of bound templates.\n       * @return {Object} Template metadata object; for `runtimeBinding`,\n       *   this is an instance of the prototypical template info\n       * @protected\n       */\n      _bindTemplate(template, instanceBinding) {\n        let templateInfo = this.constructor._parseTemplate(template);\n        let wasPreBound = this.__templateInfo == templateInfo;\n        // Optimization: since this is called twice for proto-bound templates,\n        // don't attempt to recreate accessors if this template was pre-bound\n        if (!wasPreBound) {\n          for (let prop in templateInfo.propertyEffects) {\n            this._createPropertyAccessor(prop);\n          }\n        }\n        if (instanceBinding) {\n          // For instance-time binding, create instance of template metadata\n          // and link into list of templates if necessary\n          templateInfo = Object.create(templateInfo);\n          templateInfo.wasPreBound = wasPreBound;\n          if (!wasPreBound && this.__templateInfo) {\n            let last = this.__templateInfoLast || this.__templateInfo;\n            this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n            templateInfo.previousTemplateInfo = last;\n            return templateInfo;\n          }\n        }\n        return this.__templateInfo = templateInfo;\n      }\n\n      /**\n       * Adds a property effect to the given template metadata, which is run\n       * at the \"propagate\" stage of `_propertiesChanged` when the template\n       * has been bound to the element via `_bindTemplate`.\n       *\n       * The `effect` object should match the format in `_addPropertyEffect`.\n       *\n       * @param {Object} templateInfo Template metadata to add effect to\n       * @param {string} prop Property that should trigger the effect\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n        let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n        hostProps[prop] = true;\n        let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n        let propEffects = effects[prop] = effects[prop] || [];\n        propEffects.push(effect);\n      }\n\n      /**\n       * Stamps the provided template and performs instance-time setup for\n       * Polymer template features, including data bindings, declarative event\n       * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n       * is returned containing the stamped DOM, ready for insertion into the\n       * DOM.\n       *\n       * This method may be called more than once; however note that due to\n       * `shadycss` polyfill limitations, only styles from templates prepared\n       * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n       * to the shadow root and support CSS custom properties), and note that\n       * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n       * any styles required by in runtime-stamped templates must be included\n       * in the main element template.\n       *\n       * @param {HTMLTemplateElement} template Template to stamp\n       * @return {DocumentFragment} Cloned template content\n       * @protected\n       */\n      _stampTemplate(template) {\n        // Ensures that created dom is `_enqueueClient`'d to this element so\n        // that it can be flushed on next call to `_flushProperties`\n        hostStack.beginHosting(this);\n        let dom = super._stampTemplate(template);\n        hostStack.endHosting(this);\n        let templateInfo = this._bindTemplate(template, true);\n        // Add template-instance-specific data to instanced templateInfo\n        templateInfo.nodeList = dom.nodeList;\n        // Capture child nodes to allow unstamping of non-prototypical templates\n        if (!templateInfo.wasPreBound) {\n          let nodes = templateInfo.childNodes = [];\n          for (let n=dom.firstChild; n; n=n.nextSibling) {\n            nodes.push(n);\n          }\n        }\n        dom.templateInfo = templateInfo;\n        // Setup compound storage, 2-way listeners, and dataHost for bindings\n        setupBindings(this, templateInfo);\n        // Flush properties into template nodes if already booted\n        if (this.__dataInitialized) {\n          runEffects(this, templateInfo.propertyEffects, this.__data, null,\n            false, templateInfo.nodeList);\n        }\n        return dom;\n      }\n\n      /**\n       * Removes and unbinds the nodes previously contained in the provided\n       * DocumentFragment returned from `_stampTemplate`.\n       *\n       * @param {DocumentFragment} dom DocumentFragment previously returned\n       *   from `_stampTemplate` associated with the nodes to be removed\n       * @protected\n       */\n      _removeBoundDom(dom) {\n        // Unlink template info\n        let templateInfo = dom.templateInfo;\n        if (templateInfo.previousTemplateInfo) {\n          templateInfo.previousTemplateInfo.nextTemplateInfo =\n            templateInfo.nextTemplateInfo;\n        }\n        if (templateInfo.nextTemplateInfo) {\n          templateInfo.nextTemplateInfo.previousTemplateInfo =\n            templateInfo.previousTemplateInfo;\n        }\n        if (this.__templateInfoLast == templateInfo) {\n          this.__templateInfoLast = templateInfo.previousTemplateInfo;\n        }\n        templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n        // Remove stamped nodes\n        let nodes = templateInfo.childNodes;\n        for (let i=0; i<nodes.length; i++) {\n          let node = nodes[i];\n          node.parentNode.removeChild(node);\n        }\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n       * array is added to `nodeInfo` and populated with binding metadata\n       * with information capturing the binding target, and a `parts` array\n       * with one or more metadata objects capturing the source(s) of the\n       * binding.\n       *\n       * @override\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template node\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       */\n      static _parseTemplateNode(node, templateInfo, nodeInfo) {\n        let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);\n        if (node.nodeType === Node.TEXT_NODE) {\n          let parts = this._parseBindings(node.textContent, templateInfo);\n          if (parts) {\n            // Initialize the textContent with any literal parts\n            // NOTE: default to a space here so the textNode remains; some browsers\n            // (IE) evacipate an empty textNode following cloneNode/importNode.\n            node.textContent = literalFromParts(parts) || ' ';\n            addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n            noted = true;\n          }\n        }\n        return noted;\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * parsing bindings from attributes.  A `bindings`\n       * array is added to `nodeInfo` and populated with binding metadata\n       * with information capturing the binding target, and a `parts` array\n       * with one or more metadata objects capturing the source(s) of the\n       * binding.\n       *\n       * @override\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template node\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       */\n      static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n        let parts = this._parseBindings(value, templateInfo);\n        if (parts) {\n          // Attribute or property\n          let origName = name;\n          let kind = 'property';\n          if (name[name.length-1] == '$') {\n            name = name.slice(0, -1);\n            kind = 'attribute';\n          }\n          // Initialize attribute bindings with any literal parts\n          let literal = literalFromParts(parts);\n          if (literal && kind == 'attribute') {\n            node.setAttribute(name, literal);\n          }\n          // Clear attribute before removing, since IE won't allow removing\n          // `value` attribute if it previously had a value (can't\n          // unconditionally set '' before removing since attributes with `$`\n          // can't be set using setAttribute)\n          if (node.localName === 'input' && origName === 'value') {\n            node.setAttribute(origName, '');\n          }\n          // Remove annotation\n          node.removeAttribute(origName);\n          // Case hackery: attributes are lower-case, but bind targets\n          // (properties) are case sensitive. Gambit is to map dash-case to\n          // camel-case: `foo-bar` becomes `fooBar`.\n          // Attribute bindings are excepted.\n          if (kind === 'property') {\n            name = Polymer.CaseMap.dashToCamelCase(name);\n          }\n          addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n          return true;\n        } else {\n          return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);\n        }\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * binding the properties that a nested template depends on to the template\n       * as `_host_<property>`.\n       *\n       * @override\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template node\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       */\n      static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n        let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);\n        // Merge host props into outer template and add bindings\n        let hostProps = nodeInfo.templateInfo.hostProps;\n        let mode = '{';\n        for (let source in hostProps) {\n          let parts = [{ mode, source, dependencies: [source] }];\n          addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n        }\n        return noted;\n      }\n\n      /**\n       * Called to parse text in a template (either attribute values or\n       * textContent) into binding metadata.\n       *\n       * Any overrides of this method should return an array of binding part\n       * metadata  representing one or more bindings found in the provided text\n       * and any \"literal\" text in between.  Any non-literal parts will be passed\n       * to `_evaluateBinding` when any dependencies change.  The only required\n       * fields of each \"part\" in the returned array are as follows:\n       *\n       * - `dependencies` - Array containing trigger metadata for each property\n       *   that should trigger the binding to update\n       * - `literal` - String containing text if the part represents a literal;\n       *   in this case no `dependencies` are needed\n       *\n       * Additional metadata for use by `_evaluateBinding` may be provided in\n       * each part object as needed.\n       *\n       * The default implementation handles the following types of bindings\n       * (one or more may be intermixed with literal strings):\n       * - Property binding: `[[prop]]`\n       * - Path binding: `[[object.prop]]`\n       * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n       * - Two-way property or path bindings (supports negation):\n       *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n       * - Inline computed method (supports negation):\n       *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n       *\n       * @param {string} text Text to parse from attribute or textContent\n       * @param {Object} templateInfo Current template metadata\n       * @return {Array<Object>} Array of binding part metadata\n       * @protected\n       */\n      static _parseBindings(text, templateInfo) {\n        let parts = [];\n        let lastIndex = 0;\n        let m;\n        // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n        // Regex matches:\n        //        Iteration 1:  Iteration 2:\n        // m[1]: '{{'          '[['\n        // m[2]: ''            '!'\n        // m[3]: 'prop'        'compute(foo,bar)'\n        while ((m = bindingRegex.exec(text)) !== null) {\n          // Add literal part\n          if (m.index > lastIndex) {\n            parts.push({literal: text.slice(lastIndex, m.index)});\n          }\n          // Add binding part\n          let mode = m[1][0];\n          let negate = Boolean(m[2]);\n          let source = m[3].trim();\n          let customEvent, notifyEvent, colon;\n          if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n            notifyEvent = source.substring(colon + 2);\n            source = source.substring(0, colon);\n            customEvent = true;\n          }\n          let signature = parseMethod(source);\n          let dependencies = [];\n          if (signature) {\n            // Inline computed function\n            let {args, methodName} = signature;\n            for (let i=0; i<args.length; i++) {\n              let arg = args[i];\n              if (!arg.literal) {\n                dependencies.push(arg);\n              }\n            }\n            let dynamicFns = templateInfo.dynamicFns;\n            if (dynamicFns && dynamicFns[methodName] || signature.static) {\n              dependencies.push(methodName);\n              signature.dynamicFn = true;\n            }\n          } else {\n            // Property or path\n            dependencies.push(source);\n          }\n          parts.push({\n            source, mode, negate, customEvent, signature, dependencies,\n            event: notifyEvent\n          });\n          lastIndex = bindingRegex.lastIndex;\n        }\n        // Add a final literal part\n        if (lastIndex && lastIndex < text.length) {\n          let literal = text.substring(lastIndex);\n          if (literal) {\n            parts.push({\n              literal: literal\n            });\n          }\n        }\n        if (parts.length) {\n          return parts;\n        }\n      }\n\n      /**\n       * Called to evaluate a previously parsed binding part based on a set of\n       * one or more changed dependencies.\n       *\n       * @param {HTMLElement} inst Element that should be used as scope for\n       *   binding dependencies\n       * @param {Object} part Binding part metadata\n       * @param {string} path Property/path that triggered this effect\n       * @param {Object} props Bag of current property changes\n       * @param {Object} oldProps Bag of previous values for changed properties\n       * @param {boolean} hasPaths True with `props` contains one or more paths\n       * @return {*} Value the binding part evaluated to\n       * @protected\n       */\n      static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n        let value;\n        if (part.signature) {\n          value = runMethodEffect(inst, path, props, oldProps, part.signature);\n        } else if (path != part.source) {\n          value = Polymer.Path.get(inst, part.source);\n        } else {\n          if (hasPaths && Polymer.Path.isPath(path)) {\n            value = Polymer.Path.get(inst, path);\n          } else {\n            value = inst.__data[path];\n          }\n        }\n        if (part.negate) {\n          value = !value;\n        }\n        return value;\n      }\n\n    }\n\n    return PropertyEffects;\n  });\n\n  /**\n   * Helper api for enqueing client dom created by a host element.\n   *\n   * By default elements are flushed via `_flushProperties` when\n   * `connectedCallback` is called. Elements attach their client dom to\n   * themselves at `ready` time which results from this first flush.\n   * This provides an ordering guarantee that the client dom an element\n   * creates is flushed before the element itself (i.e. client `ready`\n   * fires before host `ready`).\n   *\n   * However, if `_flushProperties` is called *before* an element is connected,\n   * as for example `Templatize` does, this ordering guarantee cannot be\n   * satisfied because no elements are connected. (Note: Bound elements that\n   * receive data do become enqueued clients and are properly ordered but\n   * unbound elements are not.)\n   *\n   * To maintain the desired \"client before host\" ordering guarantee for this\n   * case we rely on the \"host stack. Client nodes registers themselves with\n   * the creating host element when created. This ensures that all client dom\n   * is readied in the proper order, maintaining the desired guarantee.\n   *\n   * @private\n   */\n  let hostStack = {\n\n    stack: [],\n\n    registerHost(inst) {\n      if (this.stack.length) {\n        let host = this.stack[this.stack.length-1];\n        host._enqueueClient(inst);\n      }\n    },\n\n    beginHosting(inst) {\n      this.stack.push(inst);\n    },\n\n    endHosting(inst) {\n      let stackLen = this.stack.length;\n      if (stackLen && this.stack[stackLen-1] == inst) {\n        this.stack.pop();\n      }\n    }\n\n  }\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/mixins/property-effects.html","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\n\n(function() {\n\n  'use strict';\n\n  // 1.x backwards-compatible auto-wrapper for template type extensions\n  // This is a clear layering violation and gives favored-nation status to\n  // dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n  // a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n  // b.) to maintain if/repeat capability in parser-constrained elements\n  //     (e.g. table, select) in lieu of native CE type extensions without\n  //     massive new invention in this space (e.g. directive system)\n  const templateExtensions = {\n    'dom-if': true,\n    'dom-repeat': true\n  };\n  function wrapTemplateExtension(node) {\n    let is = node.getAttribute('is');\n    if (is && templateExtensions[is]) {\n      let t = node;\n      t.removeAttribute('is');\n      node = t.ownerDocument.createElement(is);\n      t.parentNode.replaceChild(node, t);\n      node.appendChild(t);\n      while(t.attributes.length) {\n        node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n        t.removeAttribute(t.attributes[0].name);\n      }\n    }\n    return node;\n  }\n\n  function findTemplateNode(root, nodeInfo) {\n    // recursively ascend tree until we hit root\n    let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n    // unwind the stack, returning the indexed node at each level\n    if (parent) {\n      // note: marginally faster than indexing via childNodes\n      // (http://jsperf.com/childnodes-lookup)\n      for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n        if (nodeInfo.parentIndex === i++) {\n          return n;\n        }\n      }\n    } else {\n      return root;\n    }\n  }\n\n  // construct `$` map (from id annotations)\n  function applyIdToMap(inst, map, node, nodeInfo) {\n    if (nodeInfo.id) {\n      map[nodeInfo.id] = node;\n    }\n  }\n\n  // install event listeners (from event annotations)\n  function applyEventListener(inst, node, nodeInfo) {\n    if (nodeInfo.events && nodeInfo.events.length) {\n      for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n        inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n      }\n    }\n  }\n\n  // push configuration references at configure time\n  function applyTemplateContent(inst, node, nodeInfo) {\n    if (nodeInfo.templateInfo) {\n      node._templateInfo = nodeInfo.templateInfo;\n    }\n  }\n\n  function createNodeEventHandler(context, eventName, methodName) {\n    // Instances can optionally have a _methodHost which allows redirecting where\n    // to find methods. Currently used by `templatize`.\n    context = context._methodHost || context;\n    let handler = function(e) {\n      if (context[methodName]) {\n        context[methodName](e, e.detail);\n      } else {\n        console.warn('listener method `' + methodName + '` not defined');\n      }\n    };\n    return handler;\n  }\n\n  /**\n   * Element mixin that provides basic template parsing and stamping, including\n   * the following template-related features for stamped templates:\n   *\n   * - Declarative event listeners (`on-eventname=\"listener\"`)\n   * - Map of node id's to stamped node instances (`this.$.id`)\n   * - Nested template content caching/removal and re-installation (performance\n   *   optimization)\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin that provides basic template parsing and stamping\n   */\n  Polymer.TemplateStamp = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymerMixinClass\n     * @implements {Polymer_TemplateStamp}\n     */\n    class TemplateStamp extends superClass {\n\n      /**\n       * Scans a template to produce template metadata.\n       *\n       * Template-specific metadata are stored in the object returned, and node-\n       * specific metadata are stored in objects in its flattened `nodeInfoList`\n       * array.  Only nodes in the template that were parsed as nodes of\n       * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n       * contains an `index` (`childNodes` index in parent) and optionally\n       * `parent`, which points to node info of its parent (including its index).\n       *\n       * The template metadata object returned from this method has the following\n       * structure (many fields optional):\n       *\n       * ```js\n       *   {\n       *     // Flattened list of node metadata (for nodes that generated metadata)\n       *     nodeInfoList: [\n       *       {\n       *         // `id` attribute for any nodes with id's for generating `$` map\n       *         id: {string},\n       *         // `on-event=\"handler\"` metadata\n       *         events: [\n       *           {\n       *             name: {string},   // event name\n       *             value: {string},  // handler method name\n       *           }, ...\n       *         ],\n       *         // Notes when the template contained a `<slot>` for shady DOM\n       *         // optimization purposes\n       *         hasInsertionPoint: {boolean},\n       *         // For nested `<template>`` nodes, nested template metadata\n       *         templateInfo: {object}, // nested template metadata\n       *         // Metadata to allow efficient retrieval of instanced node\n       *         // corresponding to this metadata\n       *         parentInfo: {number},   // reference to parent nodeInfo>\n       *         parentIndex: {number},  // index in parent's `childNodes` collection\n       *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n       *       },\n       *       ...\n       *     ],\n       *     // When true, the template had the `strip-whitespace` attribute\n       *     // or was nested in a template with that setting\n       *     stripWhitespace: {boolean},\n       *     // For nested templates, nested template content is moved into\n       *     // a document fragment stored here; this is an optimization to\n       *     // avoid the cost of nested template cloning\n       *     content: {DocumentFragment}\n       *   }\n       * ```\n       *\n       * This method kicks off a recursive treewalk as follows:\n       *\n       * ```\n       *    _parseTemplate <---------------------+\n       *      _parseTemplateContent              |\n       *        _parseTemplateNode  <------------|--+\n       *          _parseTemplateNestedTemplate --+  |\n       *          _parseTemplateChildNodes ---------+\n       *          _parseTemplateNodeAttributes\n       *            _parseTemplateNodeAttribute\n       *\n       * ```\n       *\n       * These methods may be overridden to add custom metadata about templates\n       * to either `templateInfo` or `nodeInfo`.\n       *\n       * Note that this method may be destructive to the template, in that\n       * e.g. event annotations may be removed after being noted in the\n       * template metadata.\n       *\n       * @param {HTMLTemplateElement} template Template to parse\n       * @param {Object=} outerTemplateInfo Template metadata from the outer\n       *   template, for parsing nested templates\n       * @return {Object} Parsed template metadata\n       */\n      static _parseTemplate(template, outerTemplateInfo) {\n        // since a template may be re-used, memo-ize metadata\n        if (!template._templateInfo) {\n          let templateInfo = template._templateInfo = {};\n          templateInfo.nodeInfoList = [];\n          templateInfo.stripWhiteSpace =\n            (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n            template.hasAttribute('strip-whitespace');\n          this._parseTemplateContent(template, templateInfo, {parent: null});\n        }\n        return template._templateInfo;\n      }\n\n      static _parseTemplateContent(template, templateInfo, nodeInfo) {\n        return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n      }\n\n      /**\n       * Parses template node and adds template and node metadata based on\n       * the current node, and its `childNodes` and `attributes`.\n       *\n       * This method may be overridden to add custom node or template specific\n       * metadata based on this node.\n       *\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNode(node, templateInfo, nodeInfo) {\n        let noted;\n        if (node.localName == 'template' && !node.hasAttribute('preserve-content')) {\n          noted = this._parseTemplateNestedTemplate(node, templateInfo, nodeInfo) || noted;\n        } else if (node.localName === 'slot') {\n          // For ShadyDom optimization, indicating there is an insertion point\n          templateInfo.hasInsertionPoint = true;\n        }\n        if (node.firstChild) {\n          noted = this._parseTemplateChildNodes(node, templateInfo, nodeInfo) || noted;\n        }\n        if (node.hasAttributes && node.hasAttributes()) {\n          noted = this._parseTemplateNodeAttributes(node, templateInfo, nodeInfo) || noted;\n        }\n        return noted;\n      }\n\n      /**\n       * Parses template child nodes for the given root node.\n       *\n       * This method also wraps whitelisted legacy template extensions\n       * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n       * wrappers, collapses text nodes, and strips whitespace from the template\n       * if the `templateInfo.stripWhitespace` setting was provided.\n       *\n       * @param {Node} root Root node whose `childNodes` will be parsed\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template.\n       */\n      static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n        for (let node=root.firstChild, parentIndex=0, next; node; node=next) {\n          // Wrap templates\n          if (node.localName == 'template') {\n            node = wrapTemplateExtension(node);\n          }\n          // collapse adjacent textNodes: fixes an IE issue that can cause\n          // text nodes to be inexplicably split =(\n          // note that root.normalize() should work but does not so we do this\n          // manually.\n          next = node.nextSibling;\n          if (node.nodeType === Node.TEXT_NODE) {\n            let n = next;\n            while (n && (n.nodeType === Node.TEXT_NODE)) {\n              node.textContent += n.textContent;\n              next = n.nextSibling;\n              root.removeChild(n);\n              n = next;\n            }\n            // optionally strip whitespace\n            if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n              root.removeChild(node);\n              continue;\n            }\n          }\n          let childInfo = { parentIndex, parentInfo: nodeInfo };\n          if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n            childInfo.infoIndex = templateInfo.nodeInfoList.push(childInfo) - 1;\n          }\n          // Increment if not removed\n          if (node.parentNode) {\n            parentIndex++;\n          }\n        }\n      }\n\n      /**\n       * Parses template content for the given nested `<template>`.\n       *\n       * Nested template info is stored as `templateInfo` in the current node's\n       * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n       * It will then be the responsibility of the host to set it back to the\n       * template and for users stamping nested templates to use the\n       * `_contentForTemplate` method to retrieve the content for this template\n       * (an optimization to avoid the cost of cloning nested template content).\n       *\n       * @param {HTMLTemplateElement} node Node to parse (a <template>)\n       * @param {Object} outerTemplateInfo Template metadata for current template\n       *   that includes the template `node`\n       * @param {Object} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n        let templateInfo = this._parseTemplate(node, outerTemplateInfo);\n        let content = templateInfo.content =\n          node.content.ownerDocument.createDocumentFragment();\n        content.appendChild(node.content);\n        nodeInfo.templateInfo = templateInfo;\n        return true;\n      }\n\n      /**\n       * Parses template node attributes and adds node metadata to `nodeInfo`\n       * for nodes of interest.\n       *\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n        // Make copy of original attribute list, since the order may change\n        // as attributes are added and removed\n        let noted;\n        let attrs = Array.from(node.attributes);\n        for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n          noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n        }\n        return noted;\n      }\n\n      /**\n       * Parses a single template node attribute and adds node metadata to\n       * `nodeInfo` for attributes of interest.\n       *\n       * This implementation adds metadata for `on-event=\"handler\"` attributes\n       * and `id` attributes.\n       *\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template.\n       * @param {string} name Attribute name\n       * @param {*} value Attribute value\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n        // events (on-*)\n        if (name.slice(0, 3) === 'on-') {\n          node.removeAttribute(name);\n          nodeInfo.events = nodeInfo.events || [];\n          nodeInfo.events.push({\n            name: name.slice(3),\n            value\n          });\n          return true;\n        }\n        // static id\n        else if (name === 'id') {\n          nodeInfo.id = value;\n          return true;\n        }\n      }\n\n      /**\n       * Returns the `content` document fragment for a given template.\n       *\n       * For nested templates, Polymer performs an optimization to cache nested\n       * template content to avoid the cost of cloning deeply nested templates.\n       * This method retrieves the cached content for a given template.\n       *\n       * @param {HTMLTemplateElement} template Template to retrieve `content` for\n       * @return {DocumentFragment} Content fragment\n       */\n      static _contentForTemplate(template) {\n        let templateInfo = template.__templateInfo;\n        return (templateInfo && templateInfo.content) || template.content;\n      }\n\n      /**\n       * Clones the provided template content and returns a document fragment\n       * containing the cloned dom.\n       *\n       * The template is parsed (once and memoized) using this library's\n       * template parsing features, and provides the following value-added\n       * features:\n       * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n       * * Generates an \"id map\" for all nodes with id's under `$` on returned\n       *   document fragment\n       * * Passes template info including `content` back to templates as\n       *   `_templateInfo` (a performance optimization to avoid deep template\n       *   cloning)\n       *\n       * Note that the memoized template parsing process is destructive to the\n       * template: attributes for bindings and declarative event listeners are\n       * removed after being noted in notes, and any nested `<template>.content`\n       * is removed and stored in notes as well.\n       *\n       * @param {HTMLTemplateElement} template Template to stamp\n       * @return {DocumentFragment} Cloned template content\n       */\n      _stampTemplate(template) {\n        // Polyfill support: bootstrap the template if it has not already been\n        if (template && !template.content &&\n            window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n          HTMLTemplateElement.decorate(template);\n        }\n        let templateInfo = this.constructor._parseTemplate(template);\n        let nodeInfo = templateInfo.nodeInfoList;\n        let content = templateInfo.content || template.content;\n        let dom = document.importNode(content, true);\n        // NOTE: ShadyDom optimization indicating there is an insertion point\n        dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n        let nodes = dom.nodeList = new Array(nodeInfo.length);\n        dom.$ = {};\n        for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n          let node = nodes[i] = findTemplateNode(dom, info);\n          applyIdToMap(this, dom.$, node, info);\n          applyTemplateContent(this, node, info);\n          applyEventListener(this, node, info);\n        }\n        return dom;\n      }\n\n      /**\n       * Adds an event listener by method name for the event provided.\n       *\n       * This method generates a handler function that looks up the method\n       * name at handling time.\n       *\n       * @param {Node} node Node to add listener on\n       * @param {string} eventName Name of event\n       * @param {string} methodName Name of method\n       * @param {*=} context Context the method will be called on (defaults\n       *   to `node`)\n       * @return {Function} Generated handler function\n       */\n      _addMethodEventListenerToNode(node, eventName, methodName, context) {\n        context = context || node;\n        let handler = createNodeEventHandler(context, eventName, methodName);\n        this._addEventListenerToNode(node, eventName, handler);\n        return handler;\n      }\n\n      /**\n       * Override point for adding custom or simulated event handling.\n       *\n       * @param {Node} node Node to add event listener to\n       * @param {string} eventName Name of event\n       * @param {Function} handler Listener function to add\n       */\n      _addEventListenerToNode(node, eventName, handler) {\n        node.addEventListener(eventName, handler);\n      }\n\n      /**\n       * Override point for adding custom or simulated event handling.\n       *\n       * @param {Node} node Node to remove event listener from\n       * @param {string} eventName Name of event\n       * @param {Function} handler Listener function to remove\n       */\n      _removeEventListenerFromNode(node, eventName, handler) {\n        node.removeEventListener(eventName, handler);\n      }\n\n    }\n\n    return TemplateStamp;\n\n  });\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/mixins/template-stamp.html","/*__wc__loader*/\nrequire('./boot.html');\n\n\n(function() {\n\n  'use strict';\n\n  /** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\n  let AsyncInterface; // eslint-disable-line no-unused-vars\n\n  // Microtask implemented using Mutation Observer\n  let microtaskCurrHandle = 0;\n  let microtaskLastHandle = 0;\n  let microtaskCallbacks = [];\n  let microtaskNodeContent = 0;\n  let microtaskNode = document.createTextNode('');\n  new window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\n  function microtaskFlush() {\n    const len = microtaskCallbacks.length;\n    for (let i = 0; i < len; i++) {\n      let cb = microtaskCallbacks[i];\n      if (cb) {\n        try {\n          cb();\n        } catch (e) {\n          setTimeout(() => { throw e });\n        }\n      }\n    }\n    microtaskCallbacks.splice(0, len);\n    microtaskLastHandle += len;\n  }\n\n  /**\n   * Module that provides a number of strategies for enqueuing asynchronous\n   * tasks.  Each sub-module provides a standard `run(fn)` interface that returns a\n   * handle, and a `cancel(handle)` interface for canceling async tasks before\n   * they run.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides a number of strategies for enqueuing asynchronous\n   * tasks.\n   */\n  Polymer.Async = {\n\n    /**\n     * Async interface wrapper around `setTimeout`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `setTimeout`.\n     */\n    timeOut: {\n      /**\n       * Returns a sub-module with the async interface providing the provided\n       * delay.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} delay Time to wait before calling callbacks in ms\n       * @return {AsyncInterface} An async timeout interface\n       */\n      after(delay) {\n        return  {\n          run(fn) { return setTimeout(fn, delay) },\n          cancel: window.clearTimeout.bind(window)\n        }\n      },\n      /**\n       * Enqueues a function called in the next task.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {Function} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run: window.setTimeout.bind(window),\n      /**\n       * Cancels a previously enqueued `timeOut` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel: window.clearTimeout.bind(window)\n    },\n\n    /**\n     * Async interface wrapper around `requestAnimationFrame`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `requestAnimationFrame`.\n     */\n    animationFrame: {\n      /**\n       * Enqueues a function called at `requestAnimationFrame` timing.\n       *\n       * @memberof Polymer.Async.animationFrame\n       * @param {Function} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run: window.requestAnimationFrame.bind(window),\n      /**\n       * Cancels a previously enqueued `animationFrame` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel: window.cancelAnimationFrame.bind(window)\n    },\n\n    /**\n     * Async interface wrapper around `requestIdleCallback`.  Falls back to\n     * `setTimeout` on browsers that do not support `requestIdleCallback`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `requestIdleCallback`.\n     */\n    idlePeriod: {\n      /**\n       * Enqueues a function called at `requestIdleCallback` timing.\n       *\n       * @memberof Polymer.Async.idlePeriod\n       * @param {function(IdleDeadline)} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run(fn) {\n        return window.requestIdleCallback ?\n          window.requestIdleCallback(fn) :\n          window.setTimeout(fn, 16);\n      },\n      /**\n       * Cancels a previously enqueued `idlePeriod` callback.\n       *\n       * @memberof Polymer.Async.idlePeriod\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel(handle) {\n        window.cancelIdleCallback ?\n          window.cancelIdleCallback(handle) :\n          window.clearTimeout(handle);\n      }\n    },\n\n    /**\n     * Async interface for enqueueing callbacks that run at microtask timing.\n     *\n     * Note that microtask timing is achieved via a single `MutationObserver`,\n     * and thus callbacks enqueued with this API will all run in a single\n     * batch, and not interleaved with other microtasks such as promises.\n     * Promises are avoided as an implementation choice for the time being\n     * due to Safari bugs that cause Promises to lack microtask guarantees.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface for enqueueing callbacks that run at microtask\n     *   timing.\n     */\n    microTask: {\n\n      /**\n       * Enqueues a function called at microtask timing.\n       *\n       * @memberof Polymer.Async.microTask\n       * @param {Function} callback Callback to run\n       * @return {*} Handle used for canceling task\n       */\n      run(callback) {\n        microtaskNode.textContent = microtaskNodeContent++;\n        microtaskCallbacks.push(callback);\n        return microtaskCurrHandle++;\n      },\n\n      /**\n       * Cancels a previously enqueued `microTask` callback.\n       *\n       * @memberof Polymer.Async.microTask\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel(handle) {\n        const idx = handle - microtaskLastHandle;\n        if (idx >= 0) {\n          if (!microtaskCallbacks[idx]) {\n            throw new Error('invalid async handle: ' + handle);\n          }\n          microtaskCallbacks[idx] = null;\n        }\n      }\n\n    }\n  };\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/async.html","/*__wc__loader*/\nrequire('./boot.html');\n\n\n(function() {\n  'use strict';\n\n  /**\n   * Module with utilities for manipulating structured data path strings.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for manipulating structured data path strings.\n   */\n  const Path = {\n\n    /**\n     * Returns true if the given string is a structured data path (has dots).\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isPath('foo.bar.baz') // true\n     * Polymer.Path.isPath('foo')         // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {boolean} True if the string contained one or more dots\n     */\n    isPath: function(path) {\n      return path.indexOf('.') >= 0;\n    },\n\n    /**\n     * Returns the root property name for the given path.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.root('foo.bar.baz') // 'foo'\n     * Polymer.Path.root('foo')         // 'foo'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {string} Root property name\n     */\n    root: function(path) {\n      let dotIndex = path.indexOf('.');\n      if (dotIndex === -1) {\n        return path;\n      }\n      return path.slice(0, dotIndex);\n    },\n\n    /**\n     * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n     * Returns true if the given path is an ancestor of the base path.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isAncestor('foo.bar', 'foo')         // true\n     * Polymer.Path.isAncestor('foo.bar', 'foo.bar')     // false\n     * Polymer.Path.isAncestor('foo.bar', 'foo.bar.baz') // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Path string to test against.\n     * @param {string} path Path string to test.\n     * @return {boolean} True if `path` is an ancestor of `base`.\n     */\n    isAncestor: function(base, path) {\n      //     base.startsWith(path + '.');\n      return base.indexOf(path + '.') === 0;\n    },\n\n    /**\n     * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isDescendant('foo.bar', 'foo.bar.baz') // true\n     * Polymer.Path.isDescendant('foo.bar', 'foo.bar')     // false\n     * Polymer.Path.isDescendant('foo.bar', 'foo')         // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Path string to test against.\n     * @param {string} path Path string to test.\n     * @return {boolean} True if `path` is a descendant of `base`.\n     */\n    isDescendant: function(base, path) {\n      //     path.startsWith(base + '.');\n      return path.indexOf(base + '.') === 0;\n    },\n\n    /**\n     * Replaces a previous base path with a new base path, preserving the\n     * remainder of the path.\n     *\n     * User must ensure `path` has a prefix of `base`.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.translate('foo.bar', 'zot' 'foo.bar.baz') // 'zot.baz'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Current base string to remove\n     * @param {string} newBase New base string to replace with\n     * @param {string} path Path to translate\n     * @return {string} Translated string\n     */\n    translate: function(base, newBase, path) {\n      return newBase + path.slice(base.length);\n    },\n\n    matches: function(base, path) {\n      return (base === path) ||\n             this.isAncestor(base, path) ||\n             this.isDescendant(base, path);\n    },\n\n    /**\n     * Converts array-based paths to flattened path.  String-based paths\n     * are returned as-is.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n     * Polymer.Path.normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string | !Array<string|number>} path Input path\n     * @return {string} Flattened path\n     */\n    normalize: function(path) {\n      if (Array.isArray(path)) {\n        let parts = [];\n        for (let i=0; i<path.length; i++) {\n          let args = path[i].toString().split('.');\n          for (let j=0; j<args.length; j++) {\n            parts.push(args[j]);\n          }\n        }\n        return parts.join('.');\n      } else {\n        return path;\n      }\n    },\n\n    /**\n     * Splits a path into an array of property names. Accepts either arrays\n     * of path parts or strings.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n     * Polymer.Path.split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string | !Array<string|number>} path Input path\n     * @return {!Array<string>} Array of path parts\n     */\n    split: function(path) {\n      if (Array.isArray(path)) {\n        return this.normalize(path).split('.');\n      }\n      return path.toString().split('.');\n    },\n\n    /**\n     * Reads a value from a path.  If any sub-property in the path is `undefined`,\n     * this method returns `undefined` (will never throw.\n     *\n     * @memberof Polymer.Path\n     * @param {Object} root Object from which to dereference path from\n     * @param {string | !Array<string|number>} path Path to read\n     * @param {Object=} info If an object is provided to `info`, the normalized\n     *  (flattened) path will be set to `info.path`.\n     * @return {*} Value at path, or `undefined` if the path could not be\n     *  fully dereferenced.\n     */\n    get: function(root, path, info) {\n      let prop = root;\n      let parts = this.split(path);\n      // Loop over path parts[0..n-1] and dereference\n      for (let i=0; i<parts.length; i++) {\n        if (!prop) {\n          return;\n        }\n        let part = parts[i];\n        prop = prop[part];\n      }\n      if (info) {\n        info.path = parts.join('.');\n      }\n      return prop;\n    },\n\n    /**\n     * Sets a value to a path.  If any sub-property in the path is `undefined`,\n     * this method will no-op.\n     *\n     * @memberof Polymer.Path\n     * @param {Object} root Object from which to dereference path from\n     * @param {string | !Array<string|number>} path Path to set\n     * @param {*} value Value to set to path\n     * @return {string | undefined} The normalized version of the input path\n     */\n    set: function(root, path, value) {\n      let prop = root;\n      let parts = this.split(path);\n      let last = parts[parts.length-1];\n      if (parts.length > 1) {\n        // Loop over path parts[0..n-2] and dereference\n        for (let i=0; i<parts.length-1; i++) {\n          let part = parts[i];\n          prop = prop[part];\n          if (!prop) {\n            return;\n          }\n        }\n        // Set value to object at end of path\n        prop[last] = value;\n      } else {\n        // Simple property set\n        prop[path] = value;\n      }\n      return parts.join('.');\n    }\n\n  };\n\n  /**\n   * Returns true if the given string is a structured data path (has dots).\n   *\n   * This function is deprecated.  Use `Polymer.Path.isPath` instead.\n   *\n   * Example:\n   *\n   * ```\n   * Polymer.Path.isDeep('foo.bar.baz') // true\n   * Polymer.Path.isDeep('foo')         // false\n   * ```\n   *\n   * @deprecated\n   * @memberof Polymer.Path\n   * @param {string} path Path string\n   * @return {boolean} True if the string contained one or more dots\n   */\n  Path.isDeep = Path.isPath;\n\n  Polymer.Path = Path;\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/path.html","/*__wc__loader*/\nrequire('./resolve-url.html');\n\n\n(function() {\n  'use strict';\n\n  const MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\n  const INCLUDE_ATTR = 'include';\n\n  function importModule(moduleId) {\n    if (!Polymer.DomModule) {\n      return null;\n    }\n    return Polymer.DomModule.import(moduleId);\n  }\n\n  /**\n   * Module with utilities for collection CSS text from `<templates>`, external\n   * stylesheets, and `dom-module`s.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for collection CSS text from various sources.\n   */\n  const StyleGather = {\n\n    /**\n     * Returns CSS text of styles in a space-separated list of `dom-module`s.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleIds List of dom-module id's within which to\n     * search for css.\n     * @return {string} Concatenated CSS content from specified `dom-module`s\n     */\n    cssFromModules(moduleIds) {\n      let modules = moduleIds.trim().split(' ');\n      let cssText = '';\n      for (let i=0; i < modules.length; i++) {\n        cssText += this.cssFromModule(modules[i]);\n      }\n      return cssText;\n    },\n\n    /**\n     * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n     * can come either from `<style>`s within the first `<template>`, or else\n     * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n     * template.\n     *\n     * Any `<styles>` processed are removed from their original location.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleId dom-module id to gather styles from\n     * @return {string} Concatenated CSS content from specified `dom-module`\n     */\n    cssFromModule(moduleId) {\n      let m = importModule(moduleId);\n      if (m && m._cssText === undefined) {\n        let cssText = '';\n        // include css from the first template in the module\n        let t = m.querySelector('template');\n        if (t) {\n          cssText += this.cssFromTemplate(t, m.assetpath);\n        }\n        // module imports: <link rel=\"import\" type=\"css\">\n        cssText += this.cssFromModuleImports(moduleId);\n        m._cssText = cssText || null;\n      }\n      if (!m) {\n        console.warn('Could not find style data in module named', moduleId);\n      }\n      return m && m._cssText || '';\n    },\n\n    /**\n     * Returns CSS text of `<styles>` within a given template.\n     *\n     * Any `<styles>` processed are removed from their original location.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {HTMLTemplateElement} template Template to gather styles from\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} Concatenated CSS content from specified template\n     */\n    cssFromTemplate(template, baseURI) {\n      let cssText = '';\n      // if element is a template, get content from its .content\n      let e$ = template.content.querySelectorAll('style');\n      for (let i=0; i < e$.length; i++) {\n        let e = e$[i];\n        // support style sharing by allowing styles to \"include\"\n        // other dom-modules that contain styling\n        let include = e.getAttribute(INCLUDE_ATTR);\n        if (include) {\n          cssText += this.cssFromModules(include);\n        }\n        e.parentNode.removeChild(e);\n        cssText += baseURI ?\n          Polymer.ResolveUrl.resolveCss(e.textContent, baseURI) : e.textContent;\n      }\n      return cssText;\n    },\n\n    /**\n     * Returns CSS text from stylsheets loaded via `<link rel=\"import\" type=\"css\">`\n     * links within the specified `dom-module`.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleId Id of `dom-module` to gather CSS from\n     * @return {string} Concatenated CSS content from links in specified `dom-module`\n     */\n    cssFromModuleImports(moduleId) {\n      let cssText = '';\n      let m = importModule(moduleId);\n      if (!m) {\n        return cssText;\n      }\n      let p$ = m.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n      for (let i=0; i < p$.length; i++) {\n        let p = p$[i];\n        if (p.import) {\n          let importDoc = p.import;\n          // NOTE: polyfill affordance.\n          // under the HTMLImports polyfill, there will be no 'body',\n          // but the import pseudo-doc can be used directly.\n          let container = importDoc.body ? importDoc.body : importDoc;\n          cssText +=\n            Polymer.ResolveUrl.resolveCss(container.textContent,\n              importDoc.baseURI);\n        }\n      }\n      return cssText;\n    }\n  };\n\n  Polymer.StyleGather = StyleGather;\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/lib/utils/style-gather.html","/*__wc__loader*/\nrequire('./lib/mixins/element-mixin.html');\n\n\n(function() {\n  'use strict';\n\n  /**\n   * Base class that provides the core API for Polymer's meta-programming\n   * features including template stamping, data-binding, attribute deserialization,\n   * and property change observation.\n   *\n   * @polymerElement\n   * @memberof Polymer\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @extends HTMLElement\n   * @mixes Polymer.ElementMixin\n   * @summary Custom element base class that provides the core API for Polymer's\n   *   key meta-programming features including template stamping, data-binding,\n   *   attribute deserialization, and property change observation\n   */\n  const Element = Polymer.ElementMixin(HTMLElement);\n  Polymer.Element = Element;\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./~/@polymer/polymer/polymer-element.html"],"sourceRoot":""}